{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"This repository contain documentation and scripts that aim to help PC Engines apuX platform users and developers to customize firmware to their needs.","title":"Home"},{"location":"APU_mPCIe_capabilities/","text":"APU2B, APU2C, APU2D, APU2E Slot Interfaces Use Cases J14 (mPCIe1) USB, PCIe, SIM LTE and Wifi modules J13 (mPCIe2) USB, PCIe SIM LTE and Wifi modules J12 (mSATA) mSATA only mSATA disks APU3A, APU3B, APU3C Slot Interfaces Use Cases J16 (mPCIe1) USB, PCIe USB and Wifi modules J15 (mPCIe2) USB, SIM1 only LTE modules J14 (mSATA) mSATA, USB, SIM2 mSATA disks and LTE modules APU4A, APU4B, APU4C Slot Interfaces Use Cases J15 (mPCIe1) USB, PCIe USB and Wifi modules J14 (mPCIe2) USB, SIM1 only LTE modules J13 (mSATA) mSATA, USB, SIM2 mSATA disks and LTE modules","title":"APU mPCIe capabilities"},{"location":"APU_mPCIe_capabilities/#apu2b-apu2c-apu2d-apu2e","text":"Slot Interfaces Use Cases J14 (mPCIe1) USB, PCIe, SIM LTE and Wifi modules J13 (mPCIe2) USB, PCIe SIM LTE and Wifi modules J12 (mSATA) mSATA only mSATA disks","title":"APU2B, APU2C, APU2D, APU2E"},{"location":"APU_mPCIe_capabilities/#apu3a-apu3b-apu3c","text":"Slot Interfaces Use Cases J16 (mPCIe1) USB, PCIe USB and Wifi modules J15 (mPCIe2) USB, SIM1 only LTE modules J14 (mSATA) mSATA, USB, SIM2 mSATA disks and LTE modules","title":"APU3A, APU3B, APU3C"},{"location":"APU_mPCIe_capabilities/#apu4a-apu4b-apu4c","text":"Slot Interfaces Use Cases J15 (mPCIe1) USB, PCIe USB and Wifi modules J14 (mPCIe2) USB, SIM1 only LTE modules J13 (mSATA) mSATA, USB, SIM2 mSATA disks and LTE modules","title":"APU4A, APU4B, APU4C"},{"location":"apu2_vboot/","text":"Vboot measured boot on apu2 This document describes a procedure of building a coreboot image for apu2 with vboot support and measured boot utilizing a TPM module. Procedure will work only on apu2 versions v4.9.0.6 and newer. Building coreboot image Clone the pce-fw-builder Pull or build docker container: docker pull pcengines/pce-fw-builder Build v4.9.0.6 image: ./build.sh release v4.9.0.6 apu2 Invoke distclean: ./build.sh dev-build $PWD/release/coreboot apu2 distclean Copy the vboot miniconfig: cp $PWD/release/coreboot/configs/config.pcengines_apu2_vboot $PWD/release/coreboot/.config Create full config: ./build.sh dev-build $PWD/release/coreboot apu2 olddefconfig Build the image again: ./build.sh dev-build $PWD/release/coreboot apu2 CPUS=$(nproc) Flash the new image. The firmware image can be found in release/coreboot/build which is relative to cloned pce-fw-builder directory. Using custom keys The config file present in repository builds the binary with default vboot developer keys. If one would like to use own keys, vboot has bash scripts that simplify the key generation process. Enter previously cloned coreboot directory and change directory to vboot: cd $PWD/release/coreboot/3rdparty/vboot Compile and install the vboot library (outside docker on the host): make DESTDIR=/usr sudo make install Then invoke from $PWD/release/coreboot : 3rdparty/vboot/scripts/keygeneration/create_new_keys.sh --4k --4k-root --output keys This script will produce whole set of new random keys in the keys directory. In order to use them, follow the procedure described previously, but: Create full config: ./build.sh dev-build $PWD/release/coreboot apu2 olddefconfig Enter menuconfig: ./build.sh dev-build $PWD/release/coreboot apu2 menuconfig Enter Security -> Verified boot (vboot) -> Vboot keys. Change the directories: $(VBOOT_SOURCE)/tests/devkeys/some_key.vbpubk ----> $(top)/some_key.vbpubk Do the change for all 4 key paths, but do not change the filename (generated keys have the same names): ($(VBOOT_SOURCE)/tests/devkeys/root_key.vbpubk) Root key (public) ($(VBOOT_SOURCE)/tests/devkeys/recovery_key.vbpubk) Recovery key (public) ($(VBOOT_SOURCE)/tests/devkeys/firmware_data_key.vbprivk) Firmware key (private)($(VBOOT_SOURCE)/tests/devkeys/kernel_subkey.vbpubk) Kernel subkey (public) ($(VBOOT_SOURCE)/tests/devkeys/firmware.keyblock) Keyblock to use for the RW regions Build the image again: ./build.sh dev-build $PWD/release/coreboot apu2 CPUS=$(nproc) Flash the new image. The firmware image can be found in release/coreboot/build which is relative to cloned pce-fw-builder directory. Advantages of vboot Flashmap layout. Whole flash is divided into sections describe in an FMD (FlashMap Descriptor) file (located in src/mainboard/pcengines/apu2 directory). Each section has strictly precised size. This allows to flash only certain flash regions with flashrom (requires quite fresh compilation of flashrom). Flashing a single region, for example RW_SECTION_A: flashrom -p internal -w coreboot.rom --fmap -i RW_SECTION_A Region names are defined in the FMD file. Verified boot Each boot component in firmware block A or B (depending which one is correctly booting) is verified again the keys that signed the blocks and the root key which public part lies in the recovery region. Only the firmware signed by the keys that belong to the cryptographical keychain (established during key generation) is allowed to boot. If the signatures are not matching, another firmware slot is used (also must pass verification). If everything else fails, boot from recovery. Recovery partition aka read-only is supposed to be protected by SPI flash protection mechanism as it make the Root of Trust. Note that firmware components signed by different keyset won't work. If You change the keys, flash whole firmware. Measured boot By utlizing TPM capabilities, each boot component is cryptographically measured i.e. its hash is computed and extended in TPM's PCR (Platform Configuration Register). The hash is not directly written into PCR, but extended, which means that TPM takes current PCR value, add the hash value of the component and rehashes the combined value. The final result is written to PCR. Such approach has the advantage that the final PCR values after boot process is finished are fixed. In other words, by measuring the same components, in same order, without any changes in its content we are able to obtain same PCR values. There is no other way to obtain the same result if any of the components changed, or if the measuring order has been altered. Given that, the PCR values can clearly assure that the firmware has not been tampered. How to check it works In order to verify whether vboot and TPM works, one has to compile the cbmem utility: cd $PWD/release/coreboot/util/cbmem make And copy the cbmem executable to the apu2 platform booted with vboot support. Dump the bootlog to a file: ./cbmem -c > bootconsole.log And analyze it. You should see similar messages: Phase 1 FMAP: area GBB found @ 505000 (978944 bytes) VB2:vb2_check_recovery() Recovery reason from previous boot: 0x0 / 0x0 Phase 2 Phase 3 FMAP: area GBB found @ 505000 (978944 bytes) FMAP: area VBLOCK_A found @ a0000 (65536 bytes) FMAP: area VBLOCK_A found @ a0000 (65536 bytes) VB2:vb2_verify_keyblock() Checking key block signature... FMAP: area VBLOCK_A found @ a0000 (65536 bytes) FMAP: area VBLOCK_A found @ a0000 (65536 bytes) VB2:vb2_verify_fw_preamble() Verifying preamble. Phase 4 FMAP: area FW_MAIN_A found @ b0000 (2228160 bytes) VB2:vb2api_init_hash() HW crypto for hash_alg 2 not supported, using SW tlcl_extend: response is 0 tlcl_extend: response is 0 tlcl_lock_nv_write: response is 0 Slot A is selected creating vboot_handoff structure And the measurements made during boot process: PCR-2 51d3adcb927807324651c102e5e07d8085b66bae944f37d4de3d89d6118a595f SHA256 [FMAP: COREBOOT CBFS: bootblock] PCR-2 fd582fcb2af6ff4e703b2398df919f94c9c3bbcb675429a1414646d123ab141d SHA256 [FMAP: COREBOOT CBFS: fallback/romstage] PCR-0 2547cc736e951fa4919853c43ae890861a3b3264 SHA1 [GBB flags] PCR-1 a66c8c2cda246d332d0c2025b6266e1e23c89410051002f46bfad1c9265f43d0 SHA256 [GBB HWID] PCR-2 a5e02cf99b58d52493d295dca701fdefe3cfc0afa901a70475c2de20603984e7 SHA256 [FMAP: FW_MAIN_A CBFS: fallback/ramstage] PCR-3 269138dedbdc3d6d236212392fb18d29aefce116586c5f058419a214efa866a1 SHA256 [FMAP: FW_MAIN_A CBFS: bootorder] PCR-3 269138dedbdc3d6d236212392fb18d29aefce116586c5f058419a214efa866a1 SHA256 [FMAP: FW_MAIN_A CBFS: bootorder] PCR-3 269138dedbdc3d6d236212392fb18d29aefce116586c5f058419a214efa866a1 SHA256 [FMAP: FW_MAIN_A CBFS: bootorder] PCR-2 6c1d20616d91442b61de89de6bf81f0ee8e929919c9284061e00d004de893994 SHA256 [FMAP: COREBOOT CBFS: spd.bin] PCR-3 787ba3c5d060991254426794207f64eefe825f93cdebc00f24e7ca0f2acceae9 SHA256 [PSPDIR] PCR-2 ca09ef53266de8a9f95a70b28279fdab4d8d21c48d12f6f20ebba9685adc2168 SHA256 [FMAP: COREBOOT CBFS: AGESA] PCR-2 ca09ef53266de8a9f95a70b28279fdab4d8d21c48d12f6f20ebba9685adc2168 SHA256 [FMAP: COREBOOT CBFS: AGESA] PCR-2 ca09ef53266de8a9f95a70b28279fdab4d8d21c48d12f6f20ebba9685adc2168 SHA256 [FMAP: COREBOOT CBFS: AGESA] PCR-2 ca09ef53266de8a9f95a70b28279fdab4d8d21c48d12f6f20ebba9685adc2168 SHA256 [FMAP: COREBOOT CBFS: AGESA] PCR-2 ca09ef53266de8a9f95a70b28279fdab4d8d21c48d12f6f20ebba9685adc2168 SHA256 [FMAP: COREBOOT CBFS: AGESA] PCR-2 ca09ef53266de8a9f95a70b28279fdab4d8d21c48d12f6f20ebba9685adc2168 SHA256 [FMAP: COREBOOT CBFS: AGESA] PCR-2 ca09ef53266de8a9f95a70b28279fdab4d8d21c48d12f6f20ebba9685adc2168 SHA256 [FMAP: COREBOOT CBFS: AGESA] PCR-2 6f51a6e4ea6f26b2a5ae619421d0942515db9977c6136a4a6b3d2759b2616143 SHA256 [FMAP: FW_MAIN_A CBFS: fallback/dsdt.aml] PCR-3 269138dedbdc3d6d236212392fb18d29aefce116586c5f058419a214efa866a1 SHA256 [FMAP: FW_MAIN_A CBFS: bootorder] PCR-2 a6b195044628cf787c9006c3f8a520a0d3fce1df2566fa1ce0294ecc5daf0441 SHA256 [FMAP: FW_MAIN_A CBFS: fallback/payload] Some components are listed few times, because access to them is made several times. Each time component is accessed from flash, it is measured. As one can see the logs contain the PCR number that has been extended, the hash value, used hashing algorithm and then the component name and location that the measurement is corresponding to. The final PCR numbers can be checked with tpm2-tools . It is pretty hard to compile them, so there is a prepared docker container that has already the tools compiled. Refer to 3mdeb/tpm2-tools-docker. To check PCRs: docker run --privileged --rm -it 3mdeb/tpm2-tools-docker tpm2_pcrlist","title":"Apu2 vboot"},{"location":"apu2_vboot/#vboot-measured-boot-on-apu2","text":"This document describes a procedure of building a coreboot image for apu2 with vboot support and measured boot utilizing a TPM module. Procedure will work only on apu2 versions v4.9.0.6 and newer.","title":"Vboot measured boot on apu2"},{"location":"apu2_vboot/#building-coreboot-image","text":"Clone the pce-fw-builder Pull or build docker container: docker pull pcengines/pce-fw-builder Build v4.9.0.6 image: ./build.sh release v4.9.0.6 apu2 Invoke distclean: ./build.sh dev-build $PWD/release/coreboot apu2 distclean Copy the vboot miniconfig: cp $PWD/release/coreboot/configs/config.pcengines_apu2_vboot $PWD/release/coreboot/.config Create full config: ./build.sh dev-build $PWD/release/coreboot apu2 olddefconfig Build the image again: ./build.sh dev-build $PWD/release/coreboot apu2 CPUS=$(nproc) Flash the new image. The firmware image can be found in release/coreboot/build which is relative to cloned pce-fw-builder directory.","title":"Building coreboot image"},{"location":"apu2_vboot/#using-custom-keys","text":"The config file present in repository builds the binary with default vboot developer keys. If one would like to use own keys, vboot has bash scripts that simplify the key generation process. Enter previously cloned coreboot directory and change directory to vboot: cd $PWD/release/coreboot/3rdparty/vboot Compile and install the vboot library (outside docker on the host): make DESTDIR=/usr sudo make install Then invoke from $PWD/release/coreboot : 3rdparty/vboot/scripts/keygeneration/create_new_keys.sh --4k --4k-root --output keys This script will produce whole set of new random keys in the keys directory. In order to use them, follow the procedure described previously, but: Create full config: ./build.sh dev-build $PWD/release/coreboot apu2 olddefconfig Enter menuconfig: ./build.sh dev-build $PWD/release/coreboot apu2 menuconfig Enter Security -> Verified boot (vboot) -> Vboot keys. Change the directories: $(VBOOT_SOURCE)/tests/devkeys/some_key.vbpubk ----> $(top)/some_key.vbpubk Do the change for all 4 key paths, but do not change the filename (generated keys have the same names): ($(VBOOT_SOURCE)/tests/devkeys/root_key.vbpubk) Root key (public) ($(VBOOT_SOURCE)/tests/devkeys/recovery_key.vbpubk) Recovery key (public) ($(VBOOT_SOURCE)/tests/devkeys/firmware_data_key.vbprivk) Firmware key (private)($(VBOOT_SOURCE)/tests/devkeys/kernel_subkey.vbpubk) Kernel subkey (public) ($(VBOOT_SOURCE)/tests/devkeys/firmware.keyblock) Keyblock to use for the RW regions Build the image again: ./build.sh dev-build $PWD/release/coreboot apu2 CPUS=$(nproc) Flash the new image. The firmware image can be found in release/coreboot/build which is relative to cloned pce-fw-builder directory.","title":"Using custom keys"},{"location":"apu2_vboot/#advantages-of-vboot","text":"Flashmap layout. Whole flash is divided into sections describe in an FMD (FlashMap Descriptor) file (located in src/mainboard/pcengines/apu2 directory). Each section has strictly precised size. This allows to flash only certain flash regions with flashrom (requires quite fresh compilation of flashrom). Flashing a single region, for example RW_SECTION_A: flashrom -p internal -w coreboot.rom --fmap -i RW_SECTION_A Region names are defined in the FMD file. Verified boot Each boot component in firmware block A or B (depending which one is correctly booting) is verified again the keys that signed the blocks and the root key which public part lies in the recovery region. Only the firmware signed by the keys that belong to the cryptographical keychain (established during key generation) is allowed to boot. If the signatures are not matching, another firmware slot is used (also must pass verification). If everything else fails, boot from recovery. Recovery partition aka read-only is supposed to be protected by SPI flash protection mechanism as it make the Root of Trust. Note that firmware components signed by different keyset won't work. If You change the keys, flash whole firmware. Measured boot By utlizing TPM capabilities, each boot component is cryptographically measured i.e. its hash is computed and extended in TPM's PCR (Platform Configuration Register). The hash is not directly written into PCR, but extended, which means that TPM takes current PCR value, add the hash value of the component and rehashes the combined value. The final result is written to PCR. Such approach has the advantage that the final PCR values after boot process is finished are fixed. In other words, by measuring the same components, in same order, without any changes in its content we are able to obtain same PCR values. There is no other way to obtain the same result if any of the components changed, or if the measuring order has been altered. Given that, the PCR values can clearly assure that the firmware has not been tampered.","title":"Advantages of vboot"},{"location":"apu2_vboot/#how-to-check-it-works","text":"In order to verify whether vboot and TPM works, one has to compile the cbmem utility: cd $PWD/release/coreboot/util/cbmem make And copy the cbmem executable to the apu2 platform booted with vboot support. Dump the bootlog to a file: ./cbmem -c > bootconsole.log And analyze it. You should see similar messages: Phase 1 FMAP: area GBB found @ 505000 (978944 bytes) VB2:vb2_check_recovery() Recovery reason from previous boot: 0x0 / 0x0 Phase 2 Phase 3 FMAP: area GBB found @ 505000 (978944 bytes) FMAP: area VBLOCK_A found @ a0000 (65536 bytes) FMAP: area VBLOCK_A found @ a0000 (65536 bytes) VB2:vb2_verify_keyblock() Checking key block signature... FMAP: area VBLOCK_A found @ a0000 (65536 bytes) FMAP: area VBLOCK_A found @ a0000 (65536 bytes) VB2:vb2_verify_fw_preamble() Verifying preamble. Phase 4 FMAP: area FW_MAIN_A found @ b0000 (2228160 bytes) VB2:vb2api_init_hash() HW crypto for hash_alg 2 not supported, using SW tlcl_extend: response is 0 tlcl_extend: response is 0 tlcl_lock_nv_write: response is 0 Slot A is selected creating vboot_handoff structure And the measurements made during boot process: PCR-2 51d3adcb927807324651c102e5e07d8085b66bae944f37d4de3d89d6118a595f SHA256 [FMAP: COREBOOT CBFS: bootblock] PCR-2 fd582fcb2af6ff4e703b2398df919f94c9c3bbcb675429a1414646d123ab141d SHA256 [FMAP: COREBOOT CBFS: fallback/romstage] PCR-0 2547cc736e951fa4919853c43ae890861a3b3264 SHA1 [GBB flags] PCR-1 a66c8c2cda246d332d0c2025b6266e1e23c89410051002f46bfad1c9265f43d0 SHA256 [GBB HWID] PCR-2 a5e02cf99b58d52493d295dca701fdefe3cfc0afa901a70475c2de20603984e7 SHA256 [FMAP: FW_MAIN_A CBFS: fallback/ramstage] PCR-3 269138dedbdc3d6d236212392fb18d29aefce116586c5f058419a214efa866a1 SHA256 [FMAP: FW_MAIN_A CBFS: bootorder] PCR-3 269138dedbdc3d6d236212392fb18d29aefce116586c5f058419a214efa866a1 SHA256 [FMAP: FW_MAIN_A CBFS: bootorder] PCR-3 269138dedbdc3d6d236212392fb18d29aefce116586c5f058419a214efa866a1 SHA256 [FMAP: FW_MAIN_A CBFS: bootorder] PCR-2 6c1d20616d91442b61de89de6bf81f0ee8e929919c9284061e00d004de893994 SHA256 [FMAP: COREBOOT CBFS: spd.bin] PCR-3 787ba3c5d060991254426794207f64eefe825f93cdebc00f24e7ca0f2acceae9 SHA256 [PSPDIR] PCR-2 ca09ef53266de8a9f95a70b28279fdab4d8d21c48d12f6f20ebba9685adc2168 SHA256 [FMAP: COREBOOT CBFS: AGESA] PCR-2 ca09ef53266de8a9f95a70b28279fdab4d8d21c48d12f6f20ebba9685adc2168 SHA256 [FMAP: COREBOOT CBFS: AGESA] PCR-2 ca09ef53266de8a9f95a70b28279fdab4d8d21c48d12f6f20ebba9685adc2168 SHA256 [FMAP: COREBOOT CBFS: AGESA] PCR-2 ca09ef53266de8a9f95a70b28279fdab4d8d21c48d12f6f20ebba9685adc2168 SHA256 [FMAP: COREBOOT CBFS: AGESA] PCR-2 ca09ef53266de8a9f95a70b28279fdab4d8d21c48d12f6f20ebba9685adc2168 SHA256 [FMAP: COREBOOT CBFS: AGESA] PCR-2 ca09ef53266de8a9f95a70b28279fdab4d8d21c48d12f6f20ebba9685adc2168 SHA256 [FMAP: COREBOOT CBFS: AGESA] PCR-2 ca09ef53266de8a9f95a70b28279fdab4d8d21c48d12f6f20ebba9685adc2168 SHA256 [FMAP: COREBOOT CBFS: AGESA] PCR-2 6f51a6e4ea6f26b2a5ae619421d0942515db9977c6136a4a6b3d2759b2616143 SHA256 [FMAP: FW_MAIN_A CBFS: fallback/dsdt.aml] PCR-3 269138dedbdc3d6d236212392fb18d29aefce116586c5f058419a214efa866a1 SHA256 [FMAP: FW_MAIN_A CBFS: bootorder] PCR-2 a6b195044628cf787c9006c3f8a520a0d3fce1df2566fa1ce0294ecc5daf0441 SHA256 [FMAP: FW_MAIN_A CBFS: fallback/payload] Some components are listed few times, because access to them is made several times. Each time component is accessed from flash, it is measured. As one can see the logs contain the PCR number that has been extended, the hash value, used hashing algorithm and then the component name and location that the measurement is corresponding to. The final PCR numbers can be checked with tpm2-tools . It is pretty hard to compile them, so there is a prepared docker container that has already the tools compiled. Refer to 3mdeb/tpm2-tools-docker. To check PCRs: docker run --privileged --rm -it 3mdeb/tpm2-tools-docker tpm2_pcrlist","title":"How to check it works"},{"location":"apu2_vs_apu3/","text":"APU2 vs APU3 Brief walkthrough APU2 and APU3 schematics show below difference: power/reset/watchdog header changed LPC header changed to debug RXD3/TXD3 wired to PCIe x1 expansion SIM switch added use of mPCI slots explicitly specified fan control removed SIMSWAP pin added APU straps changed I'm not sure about mSATA changes, but it looks something is different internal us2.0 header added some PCIe connections removed (page 5)","title":"Apu2 vs apu3"},{"location":"apu2_vs_apu3/#apu2-vs-apu3","text":"Brief walkthrough APU2 and APU3 schematics show below difference: power/reset/watchdog header changed LPC header changed to debug RXD3/TXD3 wired to PCIe x1 expansion SIM switch added use of mPCI slots explicitly specified fan control removed SIMSWAP pin added APU straps changed I'm not sure about mSATA changes, but it looks something is different internal us2.0 header added some PCIe connections removed (page 5)","title":"APU2 vs APU3"},{"location":"apu2_vs_apu4/","text":"apu2 vs apu4 4GB DRAM additional internal USB header power/reset/watchdog header changed LPC header removed RXD3/TXD3 wired to PCIe x1 expansion SIM switch added use of mPCI slots explicitly specified fan control removed SIMSWAP pin added APU straps changed I'm not sure about mSATA changes, but it looks something is different internal USB2.0 header added some PCIe connections removed (page 5)","title":"Apu2 vs apu4"},{"location":"apu2_vs_apu4/#apu2-vs-apu4","text":"4GB DRAM additional internal USB header power/reset/watchdog header changed LPC header removed RXD3/TXD3 wired to PCIe x1 expansion SIM switch added use of mPCI slots explicitly specified fan control removed SIMSWAP pin added APU straps changed I'm not sure about mSATA changes, but it looks something is different internal USB2.0 header added some PCIe connections removed (page 5)","title":"apu2 vs apu4"},{"location":"apu_CPU_boost/","text":"APU Core Performance Boost Since coreboot v4.9.0.2 PC Engines firmware for apu2/3/4/5 has the Core Performance Boost (aka CPU boost) enabled by default. The feature automatically detects huge loads on the processor and temporarily raises the core frequency to 1400MHz. More details how to check whether boost works available in the blog post Checking frequency in the operating system Operating systems have problems with reporting the boosted frequency and certain tricks have to be performed to reveal the true frequency of the processor. Benchmarks and few utilities give the increased results, but the common frequency reading methods not. BSD Check the frequency status on the system with: # sysctl dev.cpu.0 dev.cpu.0.cx_method: C1/hlt C2/io dev.cpu.0.cx_usage_counters: 382 6500 dev.cpu.0.cx_usage: 5.55% 94.44% last 28331us dev.cpu.0.cx_lowest: C2 dev.cpu.0.cx_supported: C1/1/0 C2/2/400 dev.cpu.0.freq_levels: 1000/924 800/760 600/571 dev.cpu.0.freq: 600 dev.cpu.0.%parent: acpi0 dev.cpu.0.%pnpinfo: _HID=none _UID=0 dev.cpu.0.%location: handle=\\_PR_.P000 dev.cpu.0.%driver: cpu dev.cpu.0.%desc: ACPI CPU In order to notice the boosted frequency, one has to add: hint.p4tcc.0.disabled=1 hint.acpi_throttle.0.disabled=1 hint.acpi_perf.0.disabled=1 to boot/loader.conf and reboot the platform. After reboot, run some load generating task in the background like: # dd if=/dev/zero of=/dev/null count=4G & Then read the CPU status again: # sysctl dev.cpu.0 dev.cpu.0.cx_method: C1/hlt C2/io dev.cpu.0.cx_usage_counters: 291 3224 dev.cpu.0.cx_usage: 8.27% 91.72% last 11496us dev.cpu.0.cx_lowest: C2 dev.cpu.0.cx_supported: C1/1/0 C2/2/400 dev.cpu.0.freq_levels: 1400/-1 1200/-1 1000/-1 dev.cpu.0.freq: 1400 dev.cpu.0.%parent: acpi0 dev.cpu.0.%pnpinfo: _HID=none _UID=0 dev.cpu.0.%location: handle=\\_PR_.P000 dev.cpu.0.%driver: cpu dev.cpu.0.%desc: ACPI CPU Without running the task in background, frequency will be capped at 1400MHz: # sysctl dev.cpu.0 dev.cpu.0.cx_method: C1/hlt C2/io dev.cpu.0.cx_usage_counters: 289 2606 dev.cpu.0.cx_usage: 9.98% 90.01% last 18267us dev.cpu.0.cx_lowest: C2 dev.cpu.0.cx_supported: C1/1/0 C2/2/400 dev.cpu.0.freq_levels: 1400/-1 1200/-1 1000/-1 dev.cpu.0.freq: 1000 dev.cpu.0.%parent: acpi0 dev.cpu.0.%pnpinfo: _HID=none _UID=0 dev.cpu.0.%location: handle=\\_PR_.P000 dev.cpu.0.%driver: cpu dev.cpu.0.%desc: ACPI CPU Linux Currently there is no known method to show boosted frequency on Linux systems. Solution is work in progress.","title":"apu CPU boost"},{"location":"apu_CPU_boost/#apu-core-performance-boost","text":"Since coreboot v4.9.0.2 PC Engines firmware for apu2/3/4/5 has the Core Performance Boost (aka CPU boost) enabled by default. The feature automatically detects huge loads on the processor and temporarily raises the core frequency to 1400MHz. More details how to check whether boost works available in the blog post","title":"APU Core Performance Boost"},{"location":"apu_CPU_boost/#checking-frequency-in-the-operating-system","text":"Operating systems have problems with reporting the boosted frequency and certain tricks have to be performed to reveal the true frequency of the processor. Benchmarks and few utilities give the increased results, but the common frequency reading methods not.","title":"Checking frequency in the operating system"},{"location":"apu_CPU_boost/#bsd","text":"Check the frequency status on the system with: # sysctl dev.cpu.0 dev.cpu.0.cx_method: C1/hlt C2/io dev.cpu.0.cx_usage_counters: 382 6500 dev.cpu.0.cx_usage: 5.55% 94.44% last 28331us dev.cpu.0.cx_lowest: C2 dev.cpu.0.cx_supported: C1/1/0 C2/2/400 dev.cpu.0.freq_levels: 1000/924 800/760 600/571 dev.cpu.0.freq: 600 dev.cpu.0.%parent: acpi0 dev.cpu.0.%pnpinfo: _HID=none _UID=0 dev.cpu.0.%location: handle=\\_PR_.P000 dev.cpu.0.%driver: cpu dev.cpu.0.%desc: ACPI CPU In order to notice the boosted frequency, one has to add: hint.p4tcc.0.disabled=1 hint.acpi_throttle.0.disabled=1 hint.acpi_perf.0.disabled=1 to boot/loader.conf and reboot the platform. After reboot, run some load generating task in the background like: # dd if=/dev/zero of=/dev/null count=4G & Then read the CPU status again: # sysctl dev.cpu.0 dev.cpu.0.cx_method: C1/hlt C2/io dev.cpu.0.cx_usage_counters: 291 3224 dev.cpu.0.cx_usage: 8.27% 91.72% last 11496us dev.cpu.0.cx_lowest: C2 dev.cpu.0.cx_supported: C1/1/0 C2/2/400 dev.cpu.0.freq_levels: 1400/-1 1200/-1 1000/-1 dev.cpu.0.freq: 1400 dev.cpu.0.%parent: acpi0 dev.cpu.0.%pnpinfo: _HID=none _UID=0 dev.cpu.0.%location: handle=\\_PR_.P000 dev.cpu.0.%driver: cpu dev.cpu.0.%desc: ACPI CPU Without running the task in background, frequency will be capped at 1400MHz: # sysctl dev.cpu.0 dev.cpu.0.cx_method: C1/hlt C2/io dev.cpu.0.cx_usage_counters: 289 2606 dev.cpu.0.cx_usage: 9.98% 90.01% last 18267us dev.cpu.0.cx_lowest: C2 dev.cpu.0.cx_supported: C1/1/0 C2/2/400 dev.cpu.0.freq_levels: 1400/-1 1200/-1 1000/-1 dev.cpu.0.freq: 1000 dev.cpu.0.%parent: acpi0 dev.cpu.0.%pnpinfo: _HID=none _UID=0 dev.cpu.0.%location: handle=\\_PR_.P000 dev.cpu.0.%driver: cpu dev.cpu.0.%desc: ACPI CPU","title":"BSD"},{"location":"apu_CPU_boost/#linux","text":"Currently there is no known method to show boosted frequency on Linux systems. Solution is work in progress.","title":"Linux"},{"location":"apu_ecc/","text":"Issues with ECC enabling According to previous work on this issue ECC error injection fails due to a range of memory that is used by APUs integrated graphics being excluded from ECC support. This feature is controlled by a couple of registers, one of them is D18F5x240, which has bit EccExclEn. This bit is set by AGESA as 1 soon after memory training. Using version of AGESA that doesn't set mentioned bit results in working ECC error injection in MemTest86 V7.4 Pro on apu2 and apu4: 2018-09-25 16:59:03 - MtSupportRunAllTests - Injecting ECC error 2018-09-25 16:59:03 - inject_amd64 - new nb_arr_add = 80000000 2018-09-25 16:59:03 - inject_amd64 - new dram_ecc = 0012000F 2018-09-25 16:59:03 - MCA NB Status High=00000000 2018-09-25 16:59:03 - inject_amd64 - new nb_arr_add = 80000002 2018-09-25 16:59:03 - inject_amd64 - new dram_ecc = 0012000F 2018-09-25 16:59:03 - MCA NB Status High=00000000 2018-09-25 16:59:03 - inject_amd64 - new nb_arr_add = 80000004 2018-09-25 16:59:03 - inject_amd64 - new dram_ecc = 0012000F 2018-09-25 16:59:03 - MCA NB Status High=00000000 2018-09-25 16:59:03 - MtSupportRunAllTests - Setting random seed to 0x50415353 2018-09-25 16:59:03 - MtSupportRunAllTests - Start time: 453 ms 2018-09-25 16:59:03 - ReadMemoryRanges - Available Pages = 1035071 2018-09-25 16:59:03 - MtSupportRunAllTests - Enabling memory cache for test 2018-09-25 16:59:03 - MtSupportRunAllTests - Enabling memory cache complete 2018-09-25 16:59:03 - Start memory range test (0x0 - 0x12F000000) 2018-09-25 16:59:03 - Pre-allocating memory ranges >=16MB first... 2018-09-25 16:59:04 - All memory ranges successfully locked 2018-09-25 16:59:04 - MCA NB Status=846FC000F2080813 2018-09-25 16:59:04 - MCA NB Address=00000000CFE528E0 2018-09-25 16:59:04 - [MEM ERROR - ECC] Test: 3, Address: CFE528E0, ECC Corrected: yes, Syndrome: F2DF, Channel/Slot: N/A 2018-09-25 17:00:08 - MCA NB Status=846FC000F2080813 2018-09-25 17:00:08 - MCA NB Address=00000000CE3F46C0 2018-09-25 17:00:08 - [MEM ERROR - ECC] Test: 3, Address: CE3F46C0, ECC Corrected: yes, Syndrome: F2DF, Channel/Slot: N/A Configuration file used: TSTLIST=3,5,13 NUMPASS=2 DISABLEMP=1 ECCPOLL=1 ECCINJECT=1 AUTOMODE=1 SKIPSPLASH=1 CONSOLEMODE=0 List of tests and number of passed were stripped down to speed up research. DISABLEMP is set because of buggy multiprocessor support in UEFI. ECCPOLL enables checking for detected ECC errors after each test and ECCINJECT enables ECC error injection on start of each test. The rest of options enables automode with report generation. On apu3 with 2GB RAM ECC isn't detected at all because of SPD which doesn't report this feature. Potential workarounds AGESA specification mentions a build time option: BLDCFG_UMA_ALLOCATION_MODE Supply the UMA memory allocation mode build time customization, if any. The default mode is Auto. * UMA_NONE \u2014 no UMA memory will be allocated. * UMA_SPECIFIED \u2014 up to the requested UMA memory will be allocated. * UMA_AUTO \u2014 allocate the optimum UMA memory size for the platform. For APUs with integrated graphics, this will provide the optimum UMA allocation for the platform and for other platforms will be the same as NONE There is also a runtime option UmaMode in MemConfig , which is parameter for AmdInitPost , but it isn't clear if AGESA uses data received from host or changes it along the way before memory initialization. However, initial value of UmaMode already is UMA_NONE , and neither changing it before calling AmdInitPost nor in any callout functions doesn't change the outcome. Clearing bit EccExclEn in register D18F5x240 from coreboot after it gets set by AGESA seems to work as well. Description of this register in BKDG, 52740 Rev 3.06 informs that BIOS must quiesce all other forms of DRAM traffic when configuring this range. See MSRC001_001F[DisDramScrub]. Additional findings Somewhere between memory training and setting UMA I receive WARNING Event: 04012200 Data: 0, 0, 0, 0 . From specification: MEM_WARNING_BANK_INTERLEAVING_NOT_ENABLED I don't know if this is connected in any way to problems with ECC. Every corrected ECC error has the same syndrome - F2DF. It is caused by MemTest86 setting D18F3xBC_x8 (DRAM ECC) to 0012000F . More info about meaning of these is available in BKDG on pages 172-174 (ECC syndromes) and 456 (DRAM ECC register). Another register that is set by MemTest86 is D18F3xB8 (NB Array Address) as 8000000x , where x is 0, 2 and 4. On apu3 (4GB version) and apu5 register D18F3xB8 have some bits set on fields marked as reserved in BKDG. After clearing these bits before starting MemTest86 ECC injection started to work as expected on all platforms with ECC-capable memory.","title":"Apu ecc"},{"location":"apu_ecc/#issues-with-ecc-enabling","text":"According to previous work on this issue ECC error injection fails due to a range of memory that is used by APUs integrated graphics being excluded from ECC support. This feature is controlled by a couple of registers, one of them is D18F5x240, which has bit EccExclEn. This bit is set by AGESA as 1 soon after memory training. Using version of AGESA that doesn't set mentioned bit results in working ECC error injection in MemTest86 V7.4 Pro on apu2 and apu4: 2018-09-25 16:59:03 - MtSupportRunAllTests - Injecting ECC error 2018-09-25 16:59:03 - inject_amd64 - new nb_arr_add = 80000000 2018-09-25 16:59:03 - inject_amd64 - new dram_ecc = 0012000F 2018-09-25 16:59:03 - MCA NB Status High=00000000 2018-09-25 16:59:03 - inject_amd64 - new nb_arr_add = 80000002 2018-09-25 16:59:03 - inject_amd64 - new dram_ecc = 0012000F 2018-09-25 16:59:03 - MCA NB Status High=00000000 2018-09-25 16:59:03 - inject_amd64 - new nb_arr_add = 80000004 2018-09-25 16:59:03 - inject_amd64 - new dram_ecc = 0012000F 2018-09-25 16:59:03 - MCA NB Status High=00000000 2018-09-25 16:59:03 - MtSupportRunAllTests - Setting random seed to 0x50415353 2018-09-25 16:59:03 - MtSupportRunAllTests - Start time: 453 ms 2018-09-25 16:59:03 - ReadMemoryRanges - Available Pages = 1035071 2018-09-25 16:59:03 - MtSupportRunAllTests - Enabling memory cache for test 2018-09-25 16:59:03 - MtSupportRunAllTests - Enabling memory cache complete 2018-09-25 16:59:03 - Start memory range test (0x0 - 0x12F000000) 2018-09-25 16:59:03 - Pre-allocating memory ranges >=16MB first... 2018-09-25 16:59:04 - All memory ranges successfully locked 2018-09-25 16:59:04 - MCA NB Status=846FC000F2080813 2018-09-25 16:59:04 - MCA NB Address=00000000CFE528E0 2018-09-25 16:59:04 - [MEM ERROR - ECC] Test: 3, Address: CFE528E0, ECC Corrected: yes, Syndrome: F2DF, Channel/Slot: N/A 2018-09-25 17:00:08 - MCA NB Status=846FC000F2080813 2018-09-25 17:00:08 - MCA NB Address=00000000CE3F46C0 2018-09-25 17:00:08 - [MEM ERROR - ECC] Test: 3, Address: CE3F46C0, ECC Corrected: yes, Syndrome: F2DF, Channel/Slot: N/A Configuration file used: TSTLIST=3,5,13 NUMPASS=2 DISABLEMP=1 ECCPOLL=1 ECCINJECT=1 AUTOMODE=1 SKIPSPLASH=1 CONSOLEMODE=0 List of tests and number of passed were stripped down to speed up research. DISABLEMP is set because of buggy multiprocessor support in UEFI. ECCPOLL enables checking for detected ECC errors after each test and ECCINJECT enables ECC error injection on start of each test. The rest of options enables automode with report generation. On apu3 with 2GB RAM ECC isn't detected at all because of SPD which doesn't report this feature.","title":"Issues with ECC enabling"},{"location":"apu_ecc/#potential-workarounds","text":"AGESA specification mentions a build time option: BLDCFG_UMA_ALLOCATION_MODE Supply the UMA memory allocation mode build time customization, if any. The default mode is Auto. * UMA_NONE \u2014 no UMA memory will be allocated. * UMA_SPECIFIED \u2014 up to the requested UMA memory will be allocated. * UMA_AUTO \u2014 allocate the optimum UMA memory size for the platform. For APUs with integrated graphics, this will provide the optimum UMA allocation for the platform and for other platforms will be the same as NONE There is also a runtime option UmaMode in MemConfig , which is parameter for AmdInitPost , but it isn't clear if AGESA uses data received from host or changes it along the way before memory initialization. However, initial value of UmaMode already is UMA_NONE , and neither changing it before calling AmdInitPost nor in any callout functions doesn't change the outcome. Clearing bit EccExclEn in register D18F5x240 from coreboot after it gets set by AGESA seems to work as well. Description of this register in BKDG, 52740 Rev 3.06 informs that BIOS must quiesce all other forms of DRAM traffic when configuring this range. See MSRC001_001F[DisDramScrub].","title":"Potential workarounds"},{"location":"apu_ecc/#additional-findings","text":"Somewhere between memory training and setting UMA I receive WARNING Event: 04012200 Data: 0, 0, 0, 0 . From specification: MEM_WARNING_BANK_INTERLEAVING_NOT_ENABLED I don't know if this is connected in any way to problems with ECC. Every corrected ECC error has the same syndrome - F2DF. It is caused by MemTest86 setting D18F3xBC_x8 (DRAM ECC) to 0012000F . More info about meaning of these is available in BKDG on pages 172-174 (ECC syndromes) and 456 (DRAM ECC register). Another register that is set by MemTest86 is D18F3xB8 (NB Array Address) as 8000000x , where x is 0, 2 and 4. On apu3 (4GB version) and apu5 register D18F3xB8 have some bits set on fields marked as reserved in BKDG. After clearing these bits before starting MemTest86 ECC injection started to work as expected on all platforms with ECC-capable memory.","title":"Additional findings"},{"location":"apu_flashing_ipxe/","text":"PC Engines APUx flashing with iPXE usage Intro Name of used APUx serial console visible in PC: ttyUSB0 IP of used PXE server: 192.168.0.108 Requirements Ethernet connection to the network iPXE server has to be online and in the same network PXE boot has to be enabled in SeaBIOS options OS with installed flashrom Serial connection between APUx and PC Flashing procedure Open APUx serial console. You can use minicom to do that. Parameters of connection: Baudrate: 115200 Data bits: 8 Parity: None Stop bits: 1 sudo minicom -b 115200 -o -D /dev/<name of APUx serial console visible in PC> E.g. sudo minicom -b 115200 -o -D /dev/ttyUSB0 Turn on APUx. When following communicate appears: Press F10 key now for boot menu, N for PXE boot press N to enter to the PXE boot menu. ---------------- iPXE boot menu ---------------- ipxe shell autoboot Select ipxe shell . You have to hurry because default option is autoboot and it will be selected after few seconds. After successful running the ipxe shell the following prompt will appear iPXE> Now you have to type commands showed below: dhcp net1 set filename pxelinux.0 set next-server 192.168.0.108 chain tftp://${next-server}/${filename} The X number in netX interface can be different depending on the connector to which Ethernet is connected. If selected interface is connected to network information similar to the showed below should appear: Configuring (net1 00:0d:b9:47:bb:e1).................. ok MAC address should be displayed. If there is no MAC address that means that there is no connection to the network for that interface. IP placed next to next-server should be correct IP of used PXE server. In case http server is used use http:// instead of tftp:// After few seconds PXE server boot menu should appear: lqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqk x PXE server boot menu x tqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqu x Install x x Debian-netboot x x Voyage-netinst x x x x x x x x x x x x x x x x x x x mqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqj Press [Tab] to edit options Select Debian-netboot because it's the only OS with installed flashrom available in PXE server boot menu when instruction is being written. After that OS booting should start. Number of OSes can be increased in the future. When Legacy Console Redirection is turned on displayed characters are doubled. It's beacause iPXE is outputting data to the serial console and to the screen, which is emulated on serial console. When a prompt similar to the shown below appears: pcengines login: Type root as login. Then next prompt should appear: Password: Type root as password to finish logging process. Steps shown above can be automated using Robot Framework and this test . Now you can start flashing process. To flash firmware with flashrom usage type: APU1 flashrom -w <directory to ROM> -p internal -c \"MX25L1605A/MX25L1606E/MX25L1608E\" APU2/3/4/5 flashrom -w <directory to ROM> -p internal E.g. (APU2): flashrom -w /tmp/coreboot.rom -p internal After correct firmware flashing the following message should appear: Reading old flash chip contents... done. Erasing and writing flash chip... Erase/write done. Verifying flash... VERIFIED. Now you can reboot the platform. Sometimes after APUx flashing platform doesn't turn on after warm boot. In that situation cold boot is required. Sending ROM image to APUx device with scp usage To send ROM image to device you can use scp . cd <directory with ROM image> scp <ROM image> root@<IP of APUx to flash>:<directory to store ROM image on APUx> E.g (APU2).: cd /home/me/coreboot/build scp coreboot.rom root@192.168.0.123:/tmp Then to flash APU2 type in the serial console: cd flashrom -w /tmp/coreboot.rom -p internal Enabling PXE boot in SeaBIOS Turn on APUx. When the following prompt shows: Press F10 key now for boot menu Press F10 . Then menu similar to the showed below should appear: Select boot device: 1. Payload [setup] 2. Payload [memtest] Select 1. Payload [setup] by pressing 1 . Next menu will be showed: ### PC Engines apu2 setup v4.5.7 ### Boot order - type letter to move device to top. a USB 1 / USB 2 SS and HS b SDCARD c mSATA d SATA e mPCIe1 SATA1 and SATA2 f iPXE (disabled) r Restore boot order defaults n Network/PXE boot - Currently Disabled u USB boot - Currently Enabled l Legacy console redirection - Currently Disabled w Enable BIOS write protect - Currently Disabled x Exit setup without save s Save configuration and exit Select n Network/PXE boot - Currently Disabled by pressing n . This position should change to n Network/PXE boot - Currently Enabled . Now you can reboot platform by choosing s Save configuration and exit , so press s to do that.","title":"Apu flashing ipxe"},{"location":"apu_flashing_ipxe/#pc-engines-apux-flashing-with-ipxe-usage","text":"","title":"PC Engines APUx flashing with iPXE usage"},{"location":"apu_flashing_ipxe/#intro","text":"Name of used APUx serial console visible in PC: ttyUSB0 IP of used PXE server: 192.168.0.108","title":"Intro"},{"location":"apu_flashing_ipxe/#requirements","text":"Ethernet connection to the network iPXE server has to be online and in the same network PXE boot has to be enabled in SeaBIOS options OS with installed flashrom Serial connection between APUx and PC","title":"Requirements"},{"location":"apu_flashing_ipxe/#flashing-procedure","text":"Open APUx serial console. You can use minicom to do that. Parameters of connection: Baudrate: 115200 Data bits: 8 Parity: None Stop bits: 1 sudo minicom -b 115200 -o -D /dev/<name of APUx serial console visible in PC> E.g. sudo minicom -b 115200 -o -D /dev/ttyUSB0 Turn on APUx. When following communicate appears: Press F10 key now for boot menu, N for PXE boot press N to enter to the PXE boot menu. ---------------- iPXE boot menu ---------------- ipxe shell autoboot Select ipxe shell . You have to hurry because default option is autoboot and it will be selected after few seconds. After successful running the ipxe shell the following prompt will appear iPXE> Now you have to type commands showed below: dhcp net1 set filename pxelinux.0 set next-server 192.168.0.108 chain tftp://${next-server}/${filename} The X number in netX interface can be different depending on the connector to which Ethernet is connected. If selected interface is connected to network information similar to the showed below should appear: Configuring (net1 00:0d:b9:47:bb:e1).................. ok MAC address should be displayed. If there is no MAC address that means that there is no connection to the network for that interface. IP placed next to next-server should be correct IP of used PXE server. In case http server is used use http:// instead of tftp:// After few seconds PXE server boot menu should appear: lqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqk x PXE server boot menu x tqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqu x Install x x Debian-netboot x x Voyage-netinst x x x x x x x x x x x x x x x x x x x mqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqj Press [Tab] to edit options Select Debian-netboot because it's the only OS with installed flashrom available in PXE server boot menu when instruction is being written. After that OS booting should start. Number of OSes can be increased in the future. When Legacy Console Redirection is turned on displayed characters are doubled. It's beacause iPXE is outputting data to the serial console and to the screen, which is emulated on serial console. When a prompt similar to the shown below appears: pcengines login: Type root as login. Then next prompt should appear: Password: Type root as password to finish logging process. Steps shown above can be automated using Robot Framework and this test . Now you can start flashing process. To flash firmware with flashrom usage type:","title":"Flashing procedure"},{"location":"apu_flashing_ipxe/#apu1","text":"flashrom -w <directory to ROM> -p internal -c \"MX25L1605A/MX25L1606E/MX25L1608E\"","title":"APU1"},{"location":"apu_flashing_ipxe/#apu2345","text":"flashrom -w <directory to ROM> -p internal E.g. (APU2): flashrom -w /tmp/coreboot.rom -p internal After correct firmware flashing the following message should appear: Reading old flash chip contents... done. Erasing and writing flash chip... Erase/write done. Verifying flash... VERIFIED. Now you can reboot the platform. Sometimes after APUx flashing platform doesn't turn on after warm boot. In that situation cold boot is required.","title":"APU2/3/4/5"},{"location":"apu_flashing_ipxe/#sending-rom-image-to-apux-device-with-scp-usage","text":"To send ROM image to device you can use scp . cd <directory with ROM image> scp <ROM image> root@<IP of APUx to flash>:<directory to store ROM image on APUx> E.g (APU2).: cd /home/me/coreboot/build scp coreboot.rom root@192.168.0.123:/tmp Then to flash APU2 type in the serial console: cd flashrom -w /tmp/coreboot.rom -p internal","title":"Sending ROM image to APUx device with scp usage"},{"location":"apu_flashing_ipxe/#enabling-pxe-boot-in-seabios","text":"Turn on APUx. When the following prompt shows: Press F10 key now for boot menu Press F10 . Then menu similar to the showed below should appear: Select boot device: 1. Payload [setup] 2. Payload [memtest] Select 1. Payload [setup] by pressing 1 . Next menu will be showed: ### PC Engines apu2 setup v4.5.7 ### Boot order - type letter to move device to top. a USB 1 / USB 2 SS and HS b SDCARD c mSATA d SATA e mPCIe1 SATA1 and SATA2 f iPXE (disabled) r Restore boot order defaults n Network/PXE boot - Currently Disabled u USB boot - Currently Enabled l Legacy console redirection - Currently Disabled w Enable BIOS write protect - Currently Disabled x Exit setup without save s Save configuration and exit Select n Network/PXE boot - Currently Disabled by pressing n . This position should change to n Network/PXE boot - Currently Enabled . Now you can reboot platform by choosing s Save configuration and exit , so press s to do that.","title":"Enabling PXE boot in SeaBIOS"},{"location":"apu_flashing_with_rpi/","text":"Flashing APUx with Raspberry Pi Preparing environment and building image Details about building firmware are mentioned in README Flashing APUx using RPi2/3/zero If You have already built an image with descriptions provided earlier, it is time to connect RPi to apu. Prepare wire connections. pinout: Signal RPi Pin number APUx SPI pin header 3V power 17 1 VCC (may be omitted) GND 20 2 GND SPI0 CS0 24 3 SPICS SPI0 CLK 23 4 SPICLK SPI0 MISO 21 5 SPIDI SPI0 MOSI 19 6 SPIDO Except that before flashing we have to make sure that APUx is on and in S5 state. That means we have to connect pins 2 and 3 on J2 header before turning power on. In such case there will be no output on serial port. Configure SPI and SSH on RPi. On RPi side we can use other pins as well. There are 2xSPI, 2x3V power and 8xGND. Note that SPI requires dtoverlay=spi1-1cs in /boot/config.txt : I have Raspbian on SD card, I need additional customizations: if /dev/spidev0.0 doesn't exist, set dtparam=spi=on in boot/config.txt , reboot. I want to connect via WiFi/SSH. So I place config wpa_supplicant.conf /boot/ ( /etc/wpa_supplicant/ should work as well). enable SSH on boot (in /etc/rc.local ): /etc/init.d/ssh start To figure out RPi's IP address I use: ~/img> sudo nmap -sP 192 .168.0.255/24 [ ... ] Nmap scan report for 192 .168.0.16 Host is up ( 0 .17s latency ) . MAC Address: B8:27:EB:24:81:58 ( Raspberry Pi Foundation ) [ ... ] Be carefull, you may need to adjust IP address mask! I can login on pi user (default password: raspberry), which has sudo priviledges: ssh pi@192.168.0.16 install flashrom pi@raspberrypi:~$ sudo apt-get install flashrom read ROM image: ##### APU1 pi@raspberrypi:~$ sudo flashrom -p linux_spi:dev = /dev/spidev0.0,spispeed = 16000 -r apu.rom -c \"MX25L1605A/MX25L1606E/MX25L1608E\" ##### APU2/3/4/5: pi@raspberrypi:~$ sudo flashrom -p linux_spi:dev = /dev/spidev0.0,spispeed = 16000 -r apu.rom 3. Connecting via serial port: RS232 connection - according to the image (TX & RX crossed) Terminal command: sudo screen -L /dev/ttyUSB0 115200 ,-cstopb","title":"Apu flashing with rpi"},{"location":"apu_flashing_with_rpi/#flashing-apux-with-raspberry-pi","text":"","title":"Flashing APUx with Raspberry Pi"},{"location":"apu_flashing_with_rpi/#preparing-environment-and-building-image","text":"Details about building firmware are mentioned in README","title":"Preparing environment and building image"},{"location":"apu_flashing_with_rpi/#flashing-apux-using-rpi23zero","text":"If You have already built an image with descriptions provided earlier, it is time to connect RPi to apu. Prepare wire connections. pinout: Signal RPi Pin number APUx SPI pin header 3V power 17 1 VCC (may be omitted) GND 20 2 GND SPI0 CS0 24 3 SPICS SPI0 CLK 23 4 SPICLK SPI0 MISO 21 5 SPIDI SPI0 MOSI 19 6 SPIDO Except that before flashing we have to make sure that APUx is on and in S5 state. That means we have to connect pins 2 and 3 on J2 header before turning power on. In such case there will be no output on serial port. Configure SPI and SSH on RPi. On RPi side we can use other pins as well. There are 2xSPI, 2x3V power and 8xGND. Note that SPI requires dtoverlay=spi1-1cs in /boot/config.txt : I have Raspbian on SD card, I need additional customizations: if /dev/spidev0.0 doesn't exist, set dtparam=spi=on in boot/config.txt , reboot. I want to connect via WiFi/SSH. So I place config wpa_supplicant.conf /boot/ ( /etc/wpa_supplicant/ should work as well). enable SSH on boot (in /etc/rc.local ): /etc/init.d/ssh start To figure out RPi's IP address I use: ~/img> sudo nmap -sP 192 .168.0.255/24 [ ... ] Nmap scan report for 192 .168.0.16 Host is up ( 0 .17s latency ) . MAC Address: B8:27:EB:24:81:58 ( Raspberry Pi Foundation ) [ ... ] Be carefull, you may need to adjust IP address mask! I can login on pi user (default password: raspberry), which has sudo priviledges: ssh pi@192.168.0.16 install flashrom pi@raspberrypi:~$ sudo apt-get install flashrom read ROM image: ##### APU1 pi@raspberrypi:~$ sudo flashrom -p linux_spi:dev = /dev/spidev0.0,spispeed = 16000 -r apu.rom -c \"MX25L1605A/MX25L1606E/MX25L1608E\" ##### APU2/3/4/5: pi@raspberrypi:~$ sudo flashrom -p linux_spi:dev = /dev/spidev0.0,spispeed = 16000 -r apu.rom 3. Connecting via serial port: RS232 connection - according to the image (TX & RX crossed) Terminal command: sudo screen -L /dev/ttyUSB0 115200 ,-cstopb","title":"Flashing APUx using RPi2/3/zero"},{"location":"cbmem_building/","text":"Coreboot cbmem building Intro Instruction based on Linux Voyage Checked for ALIX.1E and APU5 platforms Root user is recommended Git is required if it's not installated type: apt-get install git -y Building and installation process Clone coreboot repository git clone https://review.coreboot.org/coreboot.git If an error similar to the showed below occurs: error: Problem with the SSL CA cert (path? access rights?) while accessing https://review.coreboot.org/coreboot.git/info/refs fatal: HTTP request failed Install ca-certificates package: apt-get install ca-certificates -y Build and install cbmem in OS cd coreboot/util/cbmem/ make make install cbmem tool should be installed in OS to display help you can type: cbmem -h","title":"Cbmem building"},{"location":"cbmem_building/#coreboot-cbmem-building","text":"","title":"Coreboot cbmem building"},{"location":"cbmem_building/#intro","text":"Instruction based on Linux Voyage Checked for ALIX.1E and APU5 platforms Root user is recommended Git is required if it's not installated type: apt-get install git -y","title":"Intro"},{"location":"cbmem_building/#building-and-installation-process","text":"Clone coreboot repository git clone https://review.coreboot.org/coreboot.git If an error similar to the showed below occurs: error: Problem with the SSL CA cert (path? access rights?) while accessing https://review.coreboot.org/coreboot.git/info/refs fatal: HTTP request failed Install ca-certificates package: apt-get install ca-certificates -y Build and install cbmem in OS cd coreboot/util/cbmem/ make make install cbmem tool should be installed in OS to display help you can type: cbmem -h","title":"Building and installation process"},{"location":"cold_reset/","text":"Performing cold reset remotely It is not possible to perform 100% cold boot without physically disconnecting power supply, some registers cannot be reset otherwise. BKDG differentiates between cold boot, cold reset and warm reset, but even within one type of reset some bits marked with \"Cold reset: 0\" are cleared and others are not. Discovered ways to perform reset Table below gives initial values, they are changed during boot sequence. Bits changing in D18F0x6C (Link Initialization Control) are set and checked by AGESA to differentiate cold boot from warm boot. Some bits (0x1003ff) in PMxC0 (S5/Reset Status) are checked by FCH initialization code, they result in additional reset when set. Reset type D18F0x6C PMxC0 Cold boot 0x000ff800 0x00000800 Reboot 0x000ffe00 0x40080400 Reset 0x000ff800 0x40010400 Power button 0x000ff800 0x40200402 FullRst 0x000ff800 0x40200400 ACPI reset 0x000ff800 0x40000400 PCI reset 0x000ffe00 0x40020400 Bits 10 and 11 in PMxC0 can't be changed by software, even though they are described as read-write in BKDG. Bits describing reset reasons can be cleared by writing 1 to them, others were not tested. Reboot Done with reboot in shell or after changing options in sortbootorder. It performs warm reset. Sets DoReset in PMxC0. Reset button Done by temporary shorting reset pin to the ground. Performs cold reset from AGESA's point of view. Sets UsrReset in PMxC0. Power button By shorting power button pin to the ground for more than 4 seconds platform enters S5 state. After second, short press the platform starts up. It is considered to be cold reset, but during FCH initialization platform will perform another reset (after which PMxC0 is set as in reboot, D18F0x6C as in cold boot). This was one of causes for doubled sign of life. During first reboot SleepReset and FourSecondPwrBtn are set in PMxC0. FullRst through IO port CF9 Bit 3 of IO port CF9 is: FullRst . Read-write. Reset: 0. 0=Assert reset signals only. 1=Place system in S5 state for 3 to 5 seconds. Bits 1 (SysRst) and 2 (RstCmd) need to be set as well. CF9 can be accessed through its shadow in ACPI space (PMxC5, at address 0xFED803C5 when MMIO is enabled). Performs cold reset and gives time for most peripheral devices to get into stable state. SleepReset is set in PMxC0. ACPI emulated reset button Done by setting bit 6 (ResetAllAcpi) of PMxC4 (Reset Command). It is described as emulating a reset button event, but it does not set UsrReset in PMxC0, while physical button does. PCI reset Also triggered through PMxC4. Reset is done after setting bit 0 (Reset), but only if bit 7 (ResetEn) was set. They need to be set with two separate writes. Performs \"soft PCI reset\" (SoftPciRst in PMxC0), which is a warm reset. Forcing cold reset from started OS After flashing new firmware it is highly recommended (sometimes even necessary) to perform a cold boot. It is not always an option for remote devices, so tests were made to find another way of forcing cold boot path in firmware. Note that this cannot guarantee that when any device on board entered an unexpected state it can be brought back to defined state without full power cycle. As these steps are most likely to be run on production software stack options like using custom kernel/driver or applying kernel parameters at boot time were not considered. Tests were made with Debian 9 and pfSense 2.4.2. FullRst was chosen as most promising one: it can be done both by IO as well as memory mapped ACPI register. It also puts platform in state closest to cold boot from all tested options by staying in S5 for some time. Debian By default it is impossible to access physical memory space without changes to the kernel, however access to IO ports is unrestricted for root user. Thus, to perform FullRst type as root: echo -ne \"\\xe\" | dd of=/dev/port bs=1 count=1 seek=$((0xcf9)) \\xe is a bitmap for FullRst, RstCmd and SysRst. After this command platform enters S5 immediately, so save your work, sync all filesystems etc. using e.g. SysRq , of course do not perform last step (reboot or shutdown), as it will be done by FullRst. We found that sometimes 5 seconds is not enough for syncing. Full sequence required for reset is: for i in s u; do echo $i | sudo tee /proc/sysrq-trigger; sleep 15; done echo -ne \"\\xe\" | dd of=/dev/port bs=1 count=1 seek=$((0xcf9)) pfSense Shell in pfSense does not support backslash in echo command arguments. It also does not allow to use subshells to convert hex to decimal. IO ports cannot be accessed, but MMIO can. printf \"\\016\" | dd of=/dev/mem bs=1 count=1 seek=4275569605 \\016 is the same as \\xe , in octal. Seek value is 0xFED803C5 written in decimal. There is no SysRq as in Linux, so manual sync and read-only remount is required, most likely it needs to be forced because of open file descriptors. It needs to be performed for all mounted filesystems, this example for forced reboot shows only root filesystem: sync && mount -u -f -r / printf \"\\016\" | dd of=/dev/mem bs=1 count=1 seek=4275569605","title":"Performing cold reset remotely"},{"location":"cold_reset/#performing-cold-reset-remotely","text":"It is not possible to perform 100% cold boot without physically disconnecting power supply, some registers cannot be reset otherwise. BKDG differentiates between cold boot, cold reset and warm reset, but even within one type of reset some bits marked with \"Cold reset: 0\" are cleared and others are not.","title":"Performing cold reset remotely"},{"location":"cold_reset/#discovered-ways-to-perform-reset","text":"Table below gives initial values, they are changed during boot sequence. Bits changing in D18F0x6C (Link Initialization Control) are set and checked by AGESA to differentiate cold boot from warm boot. Some bits (0x1003ff) in PMxC0 (S5/Reset Status) are checked by FCH initialization code, they result in additional reset when set. Reset type D18F0x6C PMxC0 Cold boot 0x000ff800 0x00000800 Reboot 0x000ffe00 0x40080400 Reset 0x000ff800 0x40010400 Power button 0x000ff800 0x40200402 FullRst 0x000ff800 0x40200400 ACPI reset 0x000ff800 0x40000400 PCI reset 0x000ffe00 0x40020400 Bits 10 and 11 in PMxC0 can't be changed by software, even though they are described as read-write in BKDG. Bits describing reset reasons can be cleared by writing 1 to them, others were not tested.","title":"Discovered ways to perform reset"},{"location":"cold_reset/#reboot","text":"Done with reboot in shell or after changing options in sortbootorder. It performs warm reset. Sets DoReset in PMxC0.","title":"Reboot"},{"location":"cold_reset/#reset-button","text":"Done by temporary shorting reset pin to the ground. Performs cold reset from AGESA's point of view. Sets UsrReset in PMxC0.","title":"Reset button"},{"location":"cold_reset/#power-button","text":"By shorting power button pin to the ground for more than 4 seconds platform enters S5 state. After second, short press the platform starts up. It is considered to be cold reset, but during FCH initialization platform will perform another reset (after which PMxC0 is set as in reboot, D18F0x6C as in cold boot). This was one of causes for doubled sign of life. During first reboot SleepReset and FourSecondPwrBtn are set in PMxC0.","title":"Power button"},{"location":"cold_reset/#fullrst-through-io-port-cf9","text":"Bit 3 of IO port CF9 is: FullRst . Read-write. Reset: 0. 0=Assert reset signals only. 1=Place system in S5 state for 3 to 5 seconds. Bits 1 (SysRst) and 2 (RstCmd) need to be set as well. CF9 can be accessed through its shadow in ACPI space (PMxC5, at address 0xFED803C5 when MMIO is enabled). Performs cold reset and gives time for most peripheral devices to get into stable state. SleepReset is set in PMxC0.","title":"FullRst through IO port CF9"},{"location":"cold_reset/#acpi-emulated-reset-button","text":"Done by setting bit 6 (ResetAllAcpi) of PMxC4 (Reset Command). It is described as emulating a reset button event, but it does not set UsrReset in PMxC0, while physical button does.","title":"ACPI emulated reset button"},{"location":"cold_reset/#pci-reset","text":"Also triggered through PMxC4. Reset is done after setting bit 0 (Reset), but only if bit 7 (ResetEn) was set. They need to be set with two separate writes. Performs \"soft PCI reset\" (SoftPciRst in PMxC0), which is a warm reset.","title":"PCI reset"},{"location":"cold_reset/#forcing-cold-reset-from-started-os","text":"After flashing new firmware it is highly recommended (sometimes even necessary) to perform a cold boot. It is not always an option for remote devices, so tests were made to find another way of forcing cold boot path in firmware. Note that this cannot guarantee that when any device on board entered an unexpected state it can be brought back to defined state without full power cycle. As these steps are most likely to be run on production software stack options like using custom kernel/driver or applying kernel parameters at boot time were not considered. Tests were made with Debian 9 and pfSense 2.4.2. FullRst was chosen as most promising one: it can be done both by IO as well as memory mapped ACPI register. It also puts platform in state closest to cold boot from all tested options by staying in S5 for some time.","title":"Forcing cold reset from started OS"},{"location":"cold_reset/#debian","text":"By default it is impossible to access physical memory space without changes to the kernel, however access to IO ports is unrestricted for root user. Thus, to perform FullRst type as root: echo -ne \"\\xe\" | dd of=/dev/port bs=1 count=1 seek=$((0xcf9)) \\xe is a bitmap for FullRst, RstCmd and SysRst. After this command platform enters S5 immediately, so save your work, sync all filesystems etc. using e.g. SysRq , of course do not perform last step (reboot or shutdown), as it will be done by FullRst. We found that sometimes 5 seconds is not enough for syncing. Full sequence required for reset is: for i in s u; do echo $i | sudo tee /proc/sysrq-trigger; sleep 15; done echo -ne \"\\xe\" | dd of=/dev/port bs=1 count=1 seek=$((0xcf9))","title":"Debian"},{"location":"cold_reset/#pfsense","text":"Shell in pfSense does not support backslash in echo command arguments. It also does not allow to use subshells to convert hex to decimal. IO ports cannot be accessed, but MMIO can. printf \"\\016\" | dd of=/dev/mem bs=1 count=1 seek=4275569605 \\016 is the same as \\xe , in octal. Seek value is 0xFED803C5 written in decimal. There is no SysRq as in Linux, so manual sync and read-only remount is required, most likely it needs to be forced because of open file descriptors. It needs to be performed for all mounted filesystems, this example for forced reboot shows only root filesystem: sync && mount -u -f -r / printf \"\\016\" | dd of=/dev/mem bs=1 count=1 seek=4275569605","title":"pfSense"},{"location":"firmware_flashing/","text":"Firmware version check To check firmware version you can use: dmidecode -s bios-version In case dmidecode is not installed use following command: For Debian-based distributions: apt-get install dmidecode For FreeBSD: pkg install -y dmidecode APUx firmware flashing To flash firmware image to APUx SPI install (or use system with already installed) flashrom . For Debian-based distributions you can install flashrom by simply: sudo apt-get install flashrom For FreeBSD you can install flashrom by: pkg install -y flashrom You can also use minimal distributions with already installed flashrom like TinyCoreLinux . coreboot.rom flashing APU1 flashrom -w coreboot.rom -p internal -c \"MX25L1605A/MX25L1606E/MX25L1608E\" APU2/3/4/5/6 flashrom -w coreboot.rom -p internal IMPORTANT To update the firmware and keep the runtime configuration unchanged please use the following command: flashrom -p internal -w apuX_v4.14.0.2.rom --fmap -i COREBOOT The persistent runtime configuration works only when migrating from versions v4.14.0.1 and later. The feature is not yet supported on apu1. Flashrom version needs to be v1.1 or newer. A full power cycle is required after flashing. If it is not possible (e.g. remote firmware upgrade), when flashing coreboot v4.9.0.4 or newer a full reset can be forced with the following commands after using flashrom . For older firmware versions please refer to cold_reset.md . Linux setpci -s 18 .0 6c.L = 10 :10 FreeBSD pciconf -w pci0:24:0 0x6c 0x580ffe10 After that reboot as usual. Platform will turn off for 3-5 seconds. Note that there are parts of the platform which cannot be reset with this approach. A full power cycle is strongly suggested when possible. Motherboard mismatch warning When you update firmware and try to flash image to apu board, motherboard mismatch warning can be yielded. It is known issue related to SMBIOS table entries. Since v4.6.7 in mainline and v4.0.15 in legacy, part number entry is in shorter (correct) form. Therefore, if you update to those version (or newer) a warning will appear. To flash BIOS correctly, just add -p internal:boardmismatch=force flag. Entire flashing command should look like this: flashrom -w coreboot.rom -p internal:boardmismatch = force Developer tricks To automate firmware update while developing copy ssh keys to target machine: cat ~/.ssh/id_rsa.pub | ssh root@192.168.0.101 'cat >> .ssh/authorized_keys' Then you can use below command to flash APU2 recently built changes: APU2_IP = 192 .168.0.101 && ssh root@ $APU2_IP remountrw && \\ scp build/coreboot.rom root@ $APU2_IP :/root && \\ ssh root@ $APU2_IP flashrom -w /root/coreboot.rom -p internal \\ && ssh root@ $APU2_IP reboot Flashrom known problems If flashrom tells you /dev/mem mmap failed: Operation not permitted : Most common at the time of writing is a Linux kernel option, CONFIG_IO_STRICT_DEVMEM, that prevents even the root user from accessing hardware from user-space. Try again after rebooting with iomem=relaxed in your kernel command line. Some systems with incorrect memory reservations (e.g. E820 map) may have the same problem even with CONFIG_STRICT_DEVMEM. In that case iomem=relaxed in the kernel command line may help too. You can set iomem=relaxed via Grub by appending to file /etc/default/grub this line: GRUB_CMDLINE_LINUX = \"iomem=relaxed\" Then run following commad: grub-mkconfig -o /boot/grub/grub.cfg Finally reboot APU firmware updater for OPNsense You can use a script to update the firmware on an OPNsense firewall. Login via SSH to your OPNsense firewall. Copy the script apu_fw_updater_opnsense.sh where you want it. Make the script executable using chmod +x apu_fw_updater_opnsense.sh . Set the correct type, e.g. TYPE=\"apu2\" . Set the desired version, e.g. VERSION=\"4.12.0.4\" . Execute the script ./apu_fw_updater_opnsense.sh .","title":"Firmware flashing"},{"location":"firmware_flashing/#firmware-version-check","text":"To check firmware version you can use: dmidecode -s bios-version In case dmidecode is not installed use following command:","title":"Firmware version check"},{"location":"firmware_flashing/#for-debian-based-distributions","text":"apt-get install dmidecode","title":"For Debian-based distributions:"},{"location":"firmware_flashing/#for-freebsd","text":"pkg install -y dmidecode","title":"For FreeBSD:"},{"location":"firmware_flashing/#apux-firmware-flashing","text":"To flash firmware image to APUx SPI install (or use system with already installed) flashrom . For Debian-based distributions you can install flashrom by simply: sudo apt-get install flashrom For FreeBSD you can install flashrom by: pkg install -y flashrom You can also use minimal distributions with already installed flashrom like TinyCoreLinux .","title":"APUx firmware flashing"},{"location":"firmware_flashing/#corebootrom-flashing","text":"","title":"coreboot.rom flashing"},{"location":"firmware_flashing/#apu1","text":"flashrom -w coreboot.rom -p internal -c \"MX25L1605A/MX25L1606E/MX25L1608E\"","title":"APU1"},{"location":"firmware_flashing/#apu23456","text":"flashrom -w coreboot.rom -p internal IMPORTANT To update the firmware and keep the runtime configuration unchanged please use the following command: flashrom -p internal -w apuX_v4.14.0.2.rom --fmap -i COREBOOT The persistent runtime configuration works only when migrating from versions v4.14.0.1 and later. The feature is not yet supported on apu1. Flashrom version needs to be v1.1 or newer. A full power cycle is required after flashing. If it is not possible (e.g. remote firmware upgrade), when flashing coreboot v4.9.0.4 or newer a full reset can be forced with the following commands after using flashrom . For older firmware versions please refer to cold_reset.md .","title":"APU2/3/4/5/6"},{"location":"firmware_flashing/#linux","text":"setpci -s 18 .0 6c.L = 10 :10","title":"Linux"},{"location":"firmware_flashing/#freebsd","text":"pciconf -w pci0:24:0 0x6c 0x580ffe10 After that reboot as usual. Platform will turn off for 3-5 seconds. Note that there are parts of the platform which cannot be reset with this approach. A full power cycle is strongly suggested when possible.","title":"FreeBSD"},{"location":"firmware_flashing/#motherboard-mismatch-warning","text":"When you update firmware and try to flash image to apu board, motherboard mismatch warning can be yielded. It is known issue related to SMBIOS table entries. Since v4.6.7 in mainline and v4.0.15 in legacy, part number entry is in shorter (correct) form. Therefore, if you update to those version (or newer) a warning will appear. To flash BIOS correctly, just add -p internal:boardmismatch=force flag. Entire flashing command should look like this: flashrom -w coreboot.rom -p internal:boardmismatch = force","title":"Motherboard mismatch warning"},{"location":"firmware_flashing/#developer-tricks","text":"To automate firmware update while developing copy ssh keys to target machine: cat ~/.ssh/id_rsa.pub | ssh root@192.168.0.101 'cat >> .ssh/authorized_keys' Then you can use below command to flash APU2 recently built changes: APU2_IP = 192 .168.0.101 && ssh root@ $APU2_IP remountrw && \\ scp build/coreboot.rom root@ $APU2_IP :/root && \\ ssh root@ $APU2_IP flashrom -w /root/coreboot.rom -p internal \\ && ssh root@ $APU2_IP reboot","title":"Developer tricks"},{"location":"firmware_flashing/#flashrom-known-problems","text":"If flashrom tells you /dev/mem mmap failed: Operation not permitted : Most common at the time of writing is a Linux kernel option, CONFIG_IO_STRICT_DEVMEM, that prevents even the root user from accessing hardware from user-space. Try again after rebooting with iomem=relaxed in your kernel command line. Some systems with incorrect memory reservations (e.g. E820 map) may have the same problem even with CONFIG_STRICT_DEVMEM. In that case iomem=relaxed in the kernel command line may help too. You can set iomem=relaxed via Grub by appending to file /etc/default/grub this line: GRUB_CMDLINE_LINUX = \"iomem=relaxed\" Then run following commad: grub-mkconfig -o /boot/grub/grub.cfg Finally reboot","title":"Flashrom known problems"},{"location":"firmware_flashing/#apu-firmware-updater-for-opnsense","text":"You can use a script to update the firmware on an OPNsense firewall. Login via SSH to your OPNsense firewall. Copy the script apu_fw_updater_opnsense.sh where you want it. Make the script executable using chmod +x apu_fw_updater_opnsense.sh . Set the correct type, e.g. TYPE=\"apu2\" . Set the desired version, e.g. VERSION=\"4.12.0.4\" . Execute the script ./apu_fw_updater_opnsense.sh .","title":"APU firmware updater for OPNsense"},{"location":"flashrom_building/","text":"Flashrom building Intro Instruction based on Linux Voyage Checked for ALIX.1E platform Root user is recommended Instructions is based on the informations from official flashrom website. For more details visit https://www.flashrom.org/Downloads. Building process Install all required packages. apt-get update Then: apt-get install git -y \\ build-essential -y \\ libpci-dev -y \\ libusb-dev -y \\ libusb-1.0-0-dev -y \\ libftdi-dev -y Clone flashrom repository. git clone https://review.coreboot.org/flashrom.git If an error similar to the showed below occurs: error: Problem with the SSL CA cert (path? access rights?) while accessing https://review.coreboot.org/flashrom.git/info/refs fatal: HTTP request failed Install ca-certificates package: apt-get install ca-certificates -y Enter to the downloaded directory and build flashrom. cd flashrom make You can install it in OS by typing: make install Flashing firmware with flashrom usage flashrom -w <ROM directory> -p internal E.g.: flashrom -w coreboot.rom -p internal","title":"Flashrom building"},{"location":"flashrom_building/#flashrom-building","text":"","title":"Flashrom building"},{"location":"flashrom_building/#intro","text":"Instruction based on Linux Voyage Checked for ALIX.1E platform Root user is recommended Instructions is based on the informations from official flashrom website. For more details visit https://www.flashrom.org/Downloads.","title":"Intro"},{"location":"flashrom_building/#building-process","text":"Install all required packages. apt-get update Then: apt-get install git -y \\ build-essential -y \\ libpci-dev -y \\ libusb-dev -y \\ libusb-1.0-0-dev -y \\ libftdi-dev -y Clone flashrom repository. git clone https://review.coreboot.org/flashrom.git If an error similar to the showed below occurs: error: Problem with the SSL CA cert (path? access rights?) while accessing https://review.coreboot.org/flashrom.git/info/refs fatal: HTTP request failed Install ca-certificates package: apt-get install ca-certificates -y Enter to the downloaded directory and build flashrom. cd flashrom make You can install it in OS by typing: make install","title":"Building process"},{"location":"flashrom_building/#flashing-firmware-with-flashrom-usage","text":"flashrom -w <ROM directory> -p internal E.g.: flashrom -w coreboot.rom -p internal","title":"Flashing firmware with flashrom usage"},{"location":"generating_coreboot_support_logs/","text":"Generating coreboot support logs and sending them for verification purposes Intro PLATFORM_IP used as example is 192.168.0.100 PLATFORM_SERIAL_DEVICE used as example is /dev/ttyUSB0 Requirements OS with cbmem and dmesg installed on the target board ( cbmem installation instruction ) Coreboot gerrit account: https://review.coreboot.org/ Possibility to login to root user on the target board via SSH or enabled coreboot boot logs redirection to the serial console Git (type on target device apt-get install git -y to install git on it) Internet connection Common steps for every log generation process Build coreboot ROM . It's important to not delete the ROM image, because script used to generate support logs requires that image. Default directory of built ROM image is coreboot/build/ . Flash your device with flashrom . If you have flashrom installed on your OS you can jump to Flashing firmware with flashrom section of instruction linked above. Enter to the coreboot directory. It's important to run script from that directory, because it's root directory for coreboot scripts. If you try to run script from another directory there is a good chance that an error will be displayed and you will be prompted to change the directory to the correct one. Choose one of the methods shown in sections below and generate coreboot support logs. board_status.sh is responsible for required logs collecting. It's placed in coreboot/util/board_status directory. But don't enter there. You have to stay in coreboot directory. Sending logs for verification is descibred in Generating logs and sending them for verification section. Generating logs with SSH usage Run board_status.sh script with -r option: ./util/board_status/board_status.sh -r <PLATFORM_IP> Eg.: ./util/board_status/board_status.sh -r 192.168.0.100 You will be requested to enter root user password many times. It is uncomfortable for a longer period of time. To avoid this requirement follow those steps After finishing that process information where logs were saved may be shown. Example output: output files are in /tmp/coreboot_board_status.XM0Q6Hn6/pcengines/alix2d/4.6-1329-g5bceca1c530c/2017-09-05T08_27_51Z Generating logs and sending them for verification To generate logs and then send them to coreboot supported boards repository add -u option: ./util/board_status/board_status.sh -r <PLATFORM_IP> -u Eg.: ./util/board_status/board_status.sh -r 192.168.0.100 -u Logs will be sent to the https://review.coreboot.org/cgit/board-status.git/ repository automatically. If you have no SSH key added correctly to coreboot gerrit you will be prompted to enter your user name and HTTP password. To generate temporary HTTP password enter to the settings of your coreboot gerrit account , select HTTP Password section and click on Generate Password button. Generated password will appear next to the Password cell. You can use that password to upload support logs with board_status.sh script. Generating logs with serial console There is a possibility to get logs with serial port: sudo ./util/board_status/board_status.sh -s <PLATFORM_SERIAL_DEVICE> Eg.: sudo ./util/board_status/board_status.sh -s /dev/ttyUSB0 That method is not as comfortable as SSH. Sometimes problems with logs formatting may occur. What is more you have to press Enter when you log to the OS, because first phase of logs collecting ends when grub starts. Second phase of logs collecting start after pressing Enter . Generating logs using earlier built ROM image If you have ROM image built earlier you can set custom directory to ROM image (default directory is coreboot/build/ ). To do that use -i option: ./util/board_status/board_status.sh -i <DIRECTORY_TO_ROM_IMAGE> -r <PLATFORM_IP> Eg.: ./util/board_status/board_status.sh -i /tmp/coreboot.rom -r 192.168.0.100 Enabling the possibility to SSH login without entering user password On master device: Generate public/private rsa key pair: ssh-keygen -t rsa Send generated public id via SSH: ssh-copy-id root@<PLATFORM_IP> Eg.: ssh-copy-id root@192.168.0.100 and enter the correct user password. If the following error message appears: bash: .ssh/authorized_keys: No such file or directory That means you have to create .ssh folder. To do this type: cd mkdir .ssh If there were no errors you should be able to connect to your target device via SSH without entering user password. Eg.: arek@kal:~$ ssh root@192.168.0.100 Linux voyage 3.10.11 #2 SMP Thu Sep 7 11:36:30 UTC 2017 i586 The programs included with the Debian GNU/Linux system are free software; the exact distribution terms for each program are described in the individual files in /usr/share/doc/*/copyright. Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent permitted by applicable law. __ __ \\ \\/ /___ __ __ ___ ___ ___ Useful Commands: \\ // _ \\\\ \\/ /,-_ |/ _ |/ -_) remountrw - mount disk as read-write \\/ \\___/ \\ / \\___,\\_ |\\___| remountro - mount disk as read-only _/_/ _'_| remove.docs - remove all docs and manpages { V o y a g e } - L i n u x < http://linux.voyage.hk > Version: 0.9.2 (Build Date 20131219) Last login: Tue Sep 12 10:16:21 2017 from 192.168.0.108 root@voyage:~#","title":"Generating coreboot support logs"},{"location":"generating_coreboot_support_logs/#generating-coreboot-support-logs-and-sending-them-for-verification-purposes","text":"","title":"Generating coreboot support logs and sending them for verification purposes"},{"location":"generating_coreboot_support_logs/#intro","text":"PLATFORM_IP used as example is 192.168.0.100 PLATFORM_SERIAL_DEVICE used as example is /dev/ttyUSB0","title":"Intro"},{"location":"generating_coreboot_support_logs/#requirements","text":"OS with cbmem and dmesg installed on the target board ( cbmem installation instruction ) Coreboot gerrit account: https://review.coreboot.org/ Possibility to login to root user on the target board via SSH or enabled coreboot boot logs redirection to the serial console Git (type on target device apt-get install git -y to install git on it) Internet connection","title":"Requirements"},{"location":"generating_coreboot_support_logs/#common-steps-for-every-log-generation-process","text":"Build coreboot ROM . It's important to not delete the ROM image, because script used to generate support logs requires that image. Default directory of built ROM image is coreboot/build/ . Flash your device with flashrom . If you have flashrom installed on your OS you can jump to Flashing firmware with flashrom section of instruction linked above. Enter to the coreboot directory. It's important to run script from that directory, because it's root directory for coreboot scripts. If you try to run script from another directory there is a good chance that an error will be displayed and you will be prompted to change the directory to the correct one. Choose one of the methods shown in sections below and generate coreboot support logs. board_status.sh is responsible for required logs collecting. It's placed in coreboot/util/board_status directory. But don't enter there. You have to stay in coreboot directory. Sending logs for verification is descibred in Generating logs and sending them for verification section.","title":"Common steps for every log generation process"},{"location":"generating_coreboot_support_logs/#generating-logs-with-ssh-usage","text":"Run board_status.sh script with -r option: ./util/board_status/board_status.sh -r <PLATFORM_IP> Eg.: ./util/board_status/board_status.sh -r 192.168.0.100 You will be requested to enter root user password many times. It is uncomfortable for a longer period of time. To avoid this requirement follow those steps After finishing that process information where logs were saved may be shown. Example output: output files are in /tmp/coreboot_board_status.XM0Q6Hn6/pcengines/alix2d/4.6-1329-g5bceca1c530c/2017-09-05T08_27_51Z Generating logs and sending them for verification To generate logs and then send them to coreboot supported boards repository add -u option: ./util/board_status/board_status.sh -r <PLATFORM_IP> -u Eg.: ./util/board_status/board_status.sh -r 192.168.0.100 -u Logs will be sent to the https://review.coreboot.org/cgit/board-status.git/ repository automatically. If you have no SSH key added correctly to coreboot gerrit you will be prompted to enter your user name and HTTP password. To generate temporary HTTP password enter to the settings of your coreboot gerrit account , select HTTP Password section and click on Generate Password button. Generated password will appear next to the Password cell. You can use that password to upload support logs with board_status.sh script.","title":"Generating logs with SSH usage"},{"location":"generating_coreboot_support_logs/#generating-logs-with-serial-console","text":"There is a possibility to get logs with serial port: sudo ./util/board_status/board_status.sh -s <PLATFORM_SERIAL_DEVICE> Eg.: sudo ./util/board_status/board_status.sh -s /dev/ttyUSB0 That method is not as comfortable as SSH. Sometimes problems with logs formatting may occur. What is more you have to press Enter when you log to the OS, because first phase of logs collecting ends when grub starts. Second phase of logs collecting start after pressing Enter .","title":"Generating logs with serial console"},{"location":"generating_coreboot_support_logs/#generating-logs-using-earlier-built-rom-image","text":"If you have ROM image built earlier you can set custom directory to ROM image (default directory is coreboot/build/ ). To do that use -i option: ./util/board_status/board_status.sh -i <DIRECTORY_TO_ROM_IMAGE> -r <PLATFORM_IP> Eg.: ./util/board_status/board_status.sh -i /tmp/coreboot.rom -r 192.168.0.100","title":"Generating logs using earlier built ROM image"},{"location":"generating_coreboot_support_logs/#enabling-the-possibility-to-ssh-login-without-entering-user-password","text":"On master device: Generate public/private rsa key pair: ssh-keygen -t rsa Send generated public id via SSH: ssh-copy-id root@<PLATFORM_IP> Eg.: ssh-copy-id root@192.168.0.100 and enter the correct user password. If the following error message appears: bash: .ssh/authorized_keys: No such file or directory That means you have to create .ssh folder. To do this type: cd mkdir .ssh If there were no errors you should be able to connect to your target device via SSH without entering user password. Eg.: arek@kal:~$ ssh root@192.168.0.100 Linux voyage 3.10.11 #2 SMP Thu Sep 7 11:36:30 UTC 2017 i586 The programs included with the Debian GNU/Linux system are free software; the exact distribution terms for each program are described in the individual files in /usr/share/doc/*/copyright. Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent permitted by applicable law. __ __ \\ \\/ /___ __ __ ___ ___ ___ Useful Commands: \\ // _ \\\\ \\/ /,-_ |/ _ |/ -_) remountrw - mount disk as read-write \\/ \\___/ \\ / \\___,\\_ |\\___| remountro - mount disk as read-only _/_/ _'_| remove.docs - remove all docs and manpages { V o y a g e } - L i n u x < http://linux.voyage.hk > Version: 0.9.2 (Build Date 20131219) Last login: Tue Sep 12 10:16:21 2017 from 192.168.0.108 root@voyage:~#","title":"Enabling the possibility to SSH login without entering user password"},{"location":"gpios/","text":"APU GPIO tutorial PC Engines apu2 platform series have many features that are being controlled by GPIOs, in particular: mPCIe resets WLAN disable on mPCIe slots SIM swaps LEDs S1 switch In order to make it possible to modify/read their state, an OS driver is required. In Linux there is a pinctrl_amd module which is responsible for GPIO controller handling. The driver required special ACPI device definition for GPIO controller to work. Since 4.10.0.1 version, the ACPI support was added and enabled GPIO interface via sysfc in Linux systems. LEDs Linux has a special driver called gpio-leds which interacts with GPIO controller pinctrl driver to utilize a fancy sysfs interface for LED handling. All 3 front leds have been assigned to this driver and as a result are exposing following interface: $ ls /sys/class/leds/ apu2:green:led1 apu2:green:led2 apu2:green:led3 The name of the platform in the leds filename changes according to platform. So apu3 will have like apu3:green:ledX Each of these LEDs expose following interface: $ ls /sys/class/leds/apu2\\:green\\:ledX brightness device max_brightness power subsystem trigger uevent The most interesting are brightness and trigger : brightness - as the name says, it can control the LED brightness. GPIO controller only supports binary output (0 or 1) so the led can only be turned on or off turn the led on: echo 1 > brightness turn the led off: echo 0 > brightness get current led state: cat brightness trigger - is a string which defines the system activity that will cause the LED to be on or off. There are various triggers like: disk-activity, kbd-capslock, mmc0, heartbeat . Each of them can light the led up on certain event like disk activity, SD activity, keyboard special key etc. to set a trigger: echo kbd-capslock > trigger to unset a trigger: echo none > trigger By default LED3 has been set as a heartbeat . heartbeat requires additional module to be loaded: ledtrig-heartbeat . In order to load the module by default add the ledtrig-heartbeat to /etc/modules-load.d/modules.conf . S1 switch button The small button near the SD card slot is called a S1 button. With the ACPI it has been configured to work with gpio-keys module which handles a interrupt GPIO keys/keyboards. S1 switch has following attributes: active state low edge triggered pull-up by default interrupt line 7 debounce time interval: 100ms The driver is also set to use the S1 switch as EV_KEY event type and the key code to emit BTN_1 (257). In order to determine whether the interrupt work for the S1 switch one can check the initial interrupts statistics with cat /proc/interrupts : CPU0 CPU1 CPU2 CPU3 ... 7: 0 0 0 1 IR-IO-APIC 7-fasteoi pinctrl_amd ... 58: 0 0 0 0 amd_gpio 89 switch1 ... After pressing the button few times: CPU0 CPU1 CPU2 CPU3 ... 7: 0 0 0 17 IR-IO-APIC 7-fasteoi pinctrl_amd ... 58: 0 0 0 16 amd_gpio 89 switch1 ... The button can be further used in user own applications. Raw GPIO control Other GPIO signals that do not have a dedicated river have to be controlled manually. In order to control a GPIO, a simple sysfs interface is introduced. $ ls /sys/class/gpio/ export gpiochip320 unexport As one can see there is a gpiochip320 which corresponds to GPIO controller of the SoC. The 320 number according to documentation corresponds to the first GPIO number that can be controlled by this chip. The exact number of controllable GPIOs for this chip can be retrieved with: $ cat /sys/class/gpio/gpiochip320/ngpio 192 As one can see this driver supports 192 GPIOs that can be controlled by this chip giving a range of 320-511 GPIO numbers. In order to control a GPIO one has to export the GPIO to sysfs first: $ echo 391 > /sys/class/gpio/export Note that only GPIOs from range 320-512 are supported. Writing other values will cause -bash: echo: write error: Invalid argument . If the operation was successful a GPIO will appear: $ ls /sys/class/gpio/ export gpio391 gpiochip320 unexport In fact we have exported a GPIO71 of the SoC, the 320 offset must be subtracted. Each GPIO can export following interface: $ ls /sys/class/gpio/gpio391 active_low device direction edge power subsystem uevent value active_low - indicates whether this pin is an active low signal (for input only) direction - can be either in or out edge - for inputs, whether pin should be active on rising, falling, both , none edge value - state of the pin In order to change the state of the GPIO: # ensure pin is in output mode $ echo out > direction # check current state $ cat value 1 # change the state $ echo 0 > value $ cat value 0 Change pin direction: # set to input $ echo in > direction # set to output $ echo out > direction Set pin to active low: $ echo 1 > active_low GPIO mappings PC Engines apu series has many GPIOs and they differ between board versions. In order to not disrupt platform operation, only the following GPIOs should be exported : APU2: 386 - mPCIe1 reset 387 - mPCIe2 reset 391 - mPCIe1 WLAN disable 392 - mPCIe2 WLAN disable APU3/APU4: 386 - mPCIe3 reset 387 - mPCIe2 reset 391 - mPCIe3 WLAN disable 392 - mPCIe2 WLAN disable 410 - SIM swap APU5: 386 - mPCIe3 reset 387 - mPCIe2 reset 391 - mPCIe3 WLAN disable 392 - mPCIe2 WLAN disable 410 - SIM swap Important: when exporting, pin changes its state to input and low state. In BIOS these pins are configured as output high. Be sure to configure them to output first before using them. Known issues Since coreboot release v4.10.0.0 there is conflict with apuled driver in FreeBSD. It is because BIOS reserves resources for GPIOs with ACPI controller support. As a result, FreeBSD cannot reserve the memory for native driver anymore. Entire issue with details is described here . The workaround was found by alexpro user and is simply adding environment variable debug.acpi.avoid=\"\\_SB_.PCI0.GPIO\" to loader.conf . It doesn't affect any other ACPI functionality then GPIOs. LED entries in sysfs in Linux are duplicated due to presence of leds_apu module. Blacklisting leds_apu module will get rid of the duplicates. See issue","title":"Gpios"},{"location":"gpios/#apu-gpio-tutorial","text":"PC Engines apu2 platform series have many features that are being controlled by GPIOs, in particular: mPCIe resets WLAN disable on mPCIe slots SIM swaps LEDs S1 switch In order to make it possible to modify/read their state, an OS driver is required. In Linux there is a pinctrl_amd module which is responsible for GPIO controller handling. The driver required special ACPI device definition for GPIO controller to work. Since 4.10.0.1 version, the ACPI support was added and enabled GPIO interface via sysfc in Linux systems.","title":"APU GPIO tutorial"},{"location":"gpios/#leds","text":"Linux has a special driver called gpio-leds which interacts with GPIO controller pinctrl driver to utilize a fancy sysfs interface for LED handling. All 3 front leds have been assigned to this driver and as a result are exposing following interface: $ ls /sys/class/leds/ apu2:green:led1 apu2:green:led2 apu2:green:led3 The name of the platform in the leds filename changes according to platform. So apu3 will have like apu3:green:ledX Each of these LEDs expose following interface: $ ls /sys/class/leds/apu2\\:green\\:ledX brightness device max_brightness power subsystem trigger uevent The most interesting are brightness and trigger : brightness - as the name says, it can control the LED brightness. GPIO controller only supports binary output (0 or 1) so the led can only be turned on or off turn the led on: echo 1 > brightness turn the led off: echo 0 > brightness get current led state: cat brightness trigger - is a string which defines the system activity that will cause the LED to be on or off. There are various triggers like: disk-activity, kbd-capslock, mmc0, heartbeat . Each of them can light the led up on certain event like disk activity, SD activity, keyboard special key etc. to set a trigger: echo kbd-capslock > trigger to unset a trigger: echo none > trigger By default LED3 has been set as a heartbeat . heartbeat requires additional module to be loaded: ledtrig-heartbeat . In order to load the module by default add the ledtrig-heartbeat to /etc/modules-load.d/modules.conf .","title":"LEDs"},{"location":"gpios/#s1-switch-button","text":"The small button near the SD card slot is called a S1 button. With the ACPI it has been configured to work with gpio-keys module which handles a interrupt GPIO keys/keyboards. S1 switch has following attributes: active state low edge triggered pull-up by default interrupt line 7 debounce time interval: 100ms The driver is also set to use the S1 switch as EV_KEY event type and the key code to emit BTN_1 (257). In order to determine whether the interrupt work for the S1 switch one can check the initial interrupts statistics with cat /proc/interrupts : CPU0 CPU1 CPU2 CPU3 ... 7: 0 0 0 1 IR-IO-APIC 7-fasteoi pinctrl_amd ... 58: 0 0 0 0 amd_gpio 89 switch1 ... After pressing the button few times: CPU0 CPU1 CPU2 CPU3 ... 7: 0 0 0 17 IR-IO-APIC 7-fasteoi pinctrl_amd ... 58: 0 0 0 16 amd_gpio 89 switch1 ... The button can be further used in user own applications.","title":"S1 switch button"},{"location":"gpios/#raw-gpio-control","text":"Other GPIO signals that do not have a dedicated river have to be controlled manually. In order to control a GPIO, a simple sysfs interface is introduced. $ ls /sys/class/gpio/ export gpiochip320 unexport As one can see there is a gpiochip320 which corresponds to GPIO controller of the SoC. The 320 number according to documentation corresponds to the first GPIO number that can be controlled by this chip. The exact number of controllable GPIOs for this chip can be retrieved with: $ cat /sys/class/gpio/gpiochip320/ngpio 192 As one can see this driver supports 192 GPIOs that can be controlled by this chip giving a range of 320-511 GPIO numbers. In order to control a GPIO one has to export the GPIO to sysfs first: $ echo 391 > /sys/class/gpio/export Note that only GPIOs from range 320-512 are supported. Writing other values will cause -bash: echo: write error: Invalid argument . If the operation was successful a GPIO will appear: $ ls /sys/class/gpio/ export gpio391 gpiochip320 unexport In fact we have exported a GPIO71 of the SoC, the 320 offset must be subtracted. Each GPIO can export following interface: $ ls /sys/class/gpio/gpio391 active_low device direction edge power subsystem uevent value active_low - indicates whether this pin is an active low signal (for input only) direction - can be either in or out edge - for inputs, whether pin should be active on rising, falling, both , none edge value - state of the pin In order to change the state of the GPIO: # ensure pin is in output mode $ echo out > direction # check current state $ cat value 1 # change the state $ echo 0 > value $ cat value 0 Change pin direction: # set to input $ echo in > direction # set to output $ echo out > direction Set pin to active low: $ echo 1 > active_low","title":"Raw GPIO control"},{"location":"gpios/#gpio-mappings","text":"PC Engines apu series has many GPIOs and they differ between board versions. In order to not disrupt platform operation, only the following GPIOs should be exported : APU2: 386 - mPCIe1 reset 387 - mPCIe2 reset 391 - mPCIe1 WLAN disable 392 - mPCIe2 WLAN disable APU3/APU4: 386 - mPCIe3 reset 387 - mPCIe2 reset 391 - mPCIe3 WLAN disable 392 - mPCIe2 WLAN disable 410 - SIM swap APU5: 386 - mPCIe3 reset 387 - mPCIe2 reset 391 - mPCIe3 WLAN disable 392 - mPCIe2 WLAN disable 410 - SIM swap Important: when exporting, pin changes its state to input and low state. In BIOS these pins are configured as output high. Be sure to configure them to output first before using them.","title":"GPIO mappings"},{"location":"gpios/#known-issues","text":"Since coreboot release v4.10.0.0 there is conflict with apuled driver in FreeBSD. It is because BIOS reserves resources for GPIOs with ACPI controller support. As a result, FreeBSD cannot reserve the memory for native driver anymore. Entire issue with details is described here . The workaround was found by alexpro user and is simply adding environment variable debug.acpi.avoid=\"\\_SB_.PCI0.GPIO\" to loader.conf . It doesn't affect any other ACPI functionality then GPIOs. LED entries in sysfs in Linux are duplicated due to presence of leds_apu module. Blacklisting leds_apu module will get rid of the duplicates. See issue","title":"Known issues"},{"location":"ipxe_compile/","text":"iPXE - compilation, configuration and including in firmware NOTE: this procedure applies to legacy releases older than v4.0.14 Compilation Prepare build environment , if you haven't done so yet Build firmware , if you haven't done so yet Clone iPXE repository: git clone git@github.com:pcengines/ipxe.git Configure and run build in container: docker run -v ${PWD}/../src/coreboot:/coreboot -v ${PWD}/../src/ipxe:/ipxe -t -i pc-engines/apu2b cd /ipxe wget https://raw.githubusercontent.com/pcengines/apu2-documentation/master/ipxe/general.h -O src/config/local/general.h wget https://raw.githubusercontent.com/pcengines/apu2-documentation/master/ipxe/shell.ipxe -O src/shell.ipxe wget downloads iPXE configuration that maximize feature set that is exposed. Supported features: net proto: IPV4, IPV6, STP download proto: TFTP, HTTP, HTTPS, FTP, SLAM, NFS image: NBI, ELF, MULTIBOOT, PXE, SCRIPT, BZIMAGE, COMBOOT, SDI, PNM, PNG For more details please check general.h . make bin/8086157b.rom EMBED=./shell.ipxe Note that ${PWD}/../src/ipxe is absolute path to repository cloned in point 3. As a result you will have bin/8086157b.rom Including in firmware image To include iPXE ROM in coreboot.rom please use cbfstool . To add iPXE ROM to existing image inside container: cd / ./coreboot/build/cbfstool ./coreboot/build/coreboot.rom add -f /ipxe/src/bin/8086157b.rom -n genroms/pxe.rom -t raw If you already have genroms/pxe.rom , please remove it and then add new version: ./coreboot/build/cbfstool ./coreboot/build/coreboot.rom remove -n genroms/pxe.rom","title":"Ipxe compile"},{"location":"ipxe_compile/#ipxe-compilation-configuration-and-including-in-firmware","text":"NOTE: this procedure applies to legacy releases older than v4.0.14","title":"iPXE - compilation, configuration and including in firmware"},{"location":"ipxe_compile/#compilation","text":"Prepare build environment , if you haven't done so yet Build firmware , if you haven't done so yet Clone iPXE repository: git clone git@github.com:pcengines/ipxe.git Configure and run build in container: docker run -v ${PWD}/../src/coreboot:/coreboot -v ${PWD}/../src/ipxe:/ipxe -t -i pc-engines/apu2b cd /ipxe wget https://raw.githubusercontent.com/pcengines/apu2-documentation/master/ipxe/general.h -O src/config/local/general.h wget https://raw.githubusercontent.com/pcengines/apu2-documentation/master/ipxe/shell.ipxe -O src/shell.ipxe wget downloads iPXE configuration that maximize feature set that is exposed. Supported features: net proto: IPV4, IPV6, STP download proto: TFTP, HTTP, HTTPS, FTP, SLAM, NFS image: NBI, ELF, MULTIBOOT, PXE, SCRIPT, BZIMAGE, COMBOOT, SDI, PNM, PNG For more details please check general.h . make bin/8086157b.rom EMBED=./shell.ipxe Note that ${PWD}/../src/ipxe is absolute path to repository cloned in point 3. As a result you will have bin/8086157b.rom","title":"Compilation"},{"location":"ipxe_compile/#including-in-firmware-image","text":"To include iPXE ROM in coreboot.rom please use cbfstool . To add iPXE ROM to existing image inside container: cd / ./coreboot/build/cbfstool ./coreboot/build/coreboot.rom add -f /ipxe/src/bin/8086157b.rom -n genroms/pxe.rom -t raw If you already have genroms/pxe.rom , please remove it and then add new version: ./coreboot/build/cbfstool ./coreboot/build/coreboot.rom remove -n genroms/pxe.rom","title":"Including in firmware image"},{"location":"microcode_patching/","text":"Microcode patching on PC Engines apu2/3/4/5 With v4.8.0.7 release we have implemented an experimental feature of microcode patching. Inspired by community we decided to add such feature to the PC Engines firmware. The first implementation did not work as expected unfortunately. The procedure patched only BSP core leaving APs unpatched and AGESA was overwriting the patch with its own microcode in one of initialization phases. Thus we have redesigned the feature to overwrite the microcode patch. User guide To build the firmware from scratch and add microcode patch follow the steps: Clone the pce-fw-builder Pull or build docker container: docker pull pcengines/pce-fw-builder or for legacy: docker pull pcengines/pce-fw-builder-legacy Build v4.8.0.7 image (v4.0.22 for legacy): ./build.sh release v4.8.0.7 {apu2|apu3|apu4|apu5} Download the microcode patch and place it in release/coreboot which is relative to cloned pce-fw-builder directory. Make changes to menuconfig: ./build.sh dev-build $PWD/release/coreboot {apu2|apu3|apu4|apu5} menuconfig In the Chipset submenu find Include CPU microcode in CBFS and choose Add microcode patch for AMD fam16h (EXPERIMENTAL) option. Then in the Chipset submenu fill the Microcode binary path and filename field with cpu00730F01_ver07030106_2018-02-09_88EDFAA0.bin which was downloaded in previous step. If the binary has been renamed, please fill the renamed binary here. Path is relative to coreboot root directory. When finished, save the config file. Build the image again: ./build.sh dev-build $PWD/release/coreboot {apu2|apu3|apu4|apu5} CPUS=$(nproc) Flash the new image. The firmware image can be found in release/coreboot/build which is relative to cloned pce-fw-builder directory. Summary By default the microcode patch level is 0x07030105 according to dmesg reports on Linux system. So v4.8.0.7 release binary will show: microcode: CPU0: patch_level=0x07030105 microcode: CPU1: patch_level=0x07030105 microcode: CPU2: patch_level=0x07030105 microcode: CPU3: patch_level=0x07030105 After successfully building and flashing the image, dmesg should show: microcode: CPU0: patch_level=0x07030106 microcode: CPU1: patch_level=0x07030106 microcode: CPU2: patch_level=0x07030106 microcode: CPU3: patch_level=0x07030106 Also when checking the vulnerability status with spectre-meltdown-checker one can notice that following fields have changed: With microcode patch: * PRED_CMD MSR is available: YES * CPU indicates IBPB capability: YES (IBPB_SUPPORT feature bit) ... * IBPB enabled and active: YES Without microcode patch: * PRED_CMD MSR is available: NO * CPU indicates IBPB capability: NO ... * IBPB enabled and active: NO Load msr kernel module before launching the script.","title":"Microcode patching"},{"location":"microcode_patching/#microcode-patching-on-pc-engines-apu2345","text":"With v4.8.0.7 release we have implemented an experimental feature of microcode patching. Inspired by community we decided to add such feature to the PC Engines firmware. The first implementation did not work as expected unfortunately. The procedure patched only BSP core leaving APs unpatched and AGESA was overwriting the patch with its own microcode in one of initialization phases. Thus we have redesigned the feature to overwrite the microcode patch.","title":"Microcode patching on PC Engines apu2/3/4/5"},{"location":"microcode_patching/#user-guide","text":"To build the firmware from scratch and add microcode patch follow the steps: Clone the pce-fw-builder Pull or build docker container: docker pull pcengines/pce-fw-builder or for legacy: docker pull pcengines/pce-fw-builder-legacy Build v4.8.0.7 image (v4.0.22 for legacy): ./build.sh release v4.8.0.7 {apu2|apu3|apu4|apu5} Download the microcode patch and place it in release/coreboot which is relative to cloned pce-fw-builder directory. Make changes to menuconfig: ./build.sh dev-build $PWD/release/coreboot {apu2|apu3|apu4|apu5} menuconfig In the Chipset submenu find Include CPU microcode in CBFS and choose Add microcode patch for AMD fam16h (EXPERIMENTAL) option. Then in the Chipset submenu fill the Microcode binary path and filename field with cpu00730F01_ver07030106_2018-02-09_88EDFAA0.bin which was downloaded in previous step. If the binary has been renamed, please fill the renamed binary here. Path is relative to coreboot root directory. When finished, save the config file. Build the image again: ./build.sh dev-build $PWD/release/coreboot {apu2|apu3|apu4|apu5} CPUS=$(nproc) Flash the new image. The firmware image can be found in release/coreboot/build which is relative to cloned pce-fw-builder directory.","title":"User guide"},{"location":"microcode_patching/#summary","text":"By default the microcode patch level is 0x07030105 according to dmesg reports on Linux system. So v4.8.0.7 release binary will show: microcode: CPU0: patch_level=0x07030105 microcode: CPU1: patch_level=0x07030105 microcode: CPU2: patch_level=0x07030105 microcode: CPU3: patch_level=0x07030105 After successfully building and flashing the image, dmesg should show: microcode: CPU0: patch_level=0x07030106 microcode: CPU1: patch_level=0x07030106 microcode: CPU2: patch_level=0x07030106 microcode: CPU3: patch_level=0x07030106 Also when checking the vulnerability status with spectre-meltdown-checker one can notice that following fields have changed: With microcode patch: * PRED_CMD MSR is available: YES * CPU indicates IBPB capability: YES (IBPB_SUPPORT feature bit) ... * IBPB enabled and active: YES Without microcode patch: * PRED_CMD MSR is available: NO * CPU indicates IBPB capability: NO ... * IBPB enabled and active: NO Load msr kernel module before launching the script.","title":"Summary"},{"location":"mpcie_modules/","text":"List of supported mPCIe modules This document contains a list of supported WiFi and LTE modules in mini PCI Express card form factor. Document intends to present limitations of the modules and quirks necessary for their flawless operation. The list is currently limited only to tested and verified modules LTE modules Quectel EP06 This LTE module has certain problems with detection in the operating systems. The module uses a USB interface to communicate with the processor and OS. Due to the availability of USB 2.0 and USB 3.0 interfaces in the module, it often gets enumerated incorrectly. The presence of USB 3.0 lanes causes the module to use the USB 3.0 protocol instead of the USB 2.0 protocol. The mPCIe slots on apu boards have only USB 2.0 signals routed to the connectors. In place of the USB 3.0 signals, apu boards have either PCIe signals or SATA signals for WiFi and mSATA modules respectively. The design of the modules is intended to support majority of the modules, but it will not always be compatible with all possible modules, please take it into consideration. Symptoms of the wrong detection: only 1 ttyUSB node created by OS no ttyUSB nodes created by OS errors in USB enumeration for the module in dmesg Solutions: Contact PC Engines for a module firmware update with USB 3.0 protocol disabled if You have problems with module detection. Cover USB 3.0 signals on the module with tape to block signal connection as shown in the picture: Black pins mean that they have to be covered with tape. The 6 black pins on the top side are USB3.0 signals. Two pins on the bottom side are I2C/SMBus pins which also should be covered with tape. The module design requires pull-ups on the mainboard side, but they are not present on apu. Compatible slots: Platform mPCIe1 mPCIe2 mSATA apu2 \u2714 \u2714 \u2716 apu3 \u2716 \u2714 \u2714 \u00b9 apu4 \u2716 \u2714 \u2714 \u00b9 (1) Do not forget to enable EHCI0 controller in sortbootorder For each port's capabilities please refer to mPCIe port capabilities HUAWEI ME909u This module works fairly well with all apu boards. Compatible slots: Platform mPCIe1 mPCIe2 mSATA apu2 \u2714 \u2714 \u2716 apu3 \u2716 \u2714 \u2714 \u00b9 apu4 \u2716 \u2714 \u2714 \u00b9 (1) Do not forget to enable EHCI0 controller in sortbootorder HUAWEI ME906s M.2 There is an option to use the M.2 Key B to Mini PCIE PCI-E Adapter Converter for 3G/4G/5G and connect Huawei ME906s M.2 4G to compatible mPCIe slot. This adapter includes routing the SIM signals so APU SIM slot may be used without problems. Kudos to Jamie Lentin (@lentinj) for checking this. Compatible slots: Platform mPCIe1 mPCIe2 mSATA apu2 \u2714 \u2714 \u2716 apu3 \u2716 \u2714 \u2714 \u00b9 apu4 \u2716 \u2714 \u2714 \u00b9 (1) Do not forget to enable EHCI0 controller in sortbootorder WiFi modules WLE200NX This module works fairly well with all apu boards. The module may have issues with interrupts. Related issues: coreboot #206 coreboot #285 coreboot #323 Compatible slots: Platform mPCIe1 mPCIe2 mSATA apu2 \u2714 \u2714 \u2716 apu3 \u2714 \u2716 \u2716 apu4 \u2714 \u2716 \u2716 Quirks: The real culprit of interrupt routing problems is the ath9k kernel module responsible for WLE200NX operation. The module has no robust interrupt implementation and tries to remap legacy INTx interrupt with IOMMU which is not possible due to technical reasons. The correct solution is to force ath9k kernel module to use MSI interrupts which can be remapped. This can be done with: echo \"options ath9k use_msi=1\" | sudo tee -a /etc/modprobe.d/ath9k.conf When the module is loaded, it initializes interrupts coming from WiFi devices to be a MSI type. MSI interrupts are correctly remapped by kernel with IOMMU, thus the issue is not present. Other solutions with kernel command line options: amd_iommu=off - disables the use of IOMMU in kernel. intremap=off - disables security feature of IOMMU called interrupt remapping. WLE600VX This module works fairly well with all apu boards. Tested by PC Engines and apu users. Compatible slots: Platform mPCIe1 mPCIe2 mSATA apu2 \u2714 \u2714 \u2716 apu3 \u2714 \u2716 \u2716 apu4 \u2714 \u2716 \u2716 Quirks: Sometimes the module may have problems with OS communication on mainline releases. In such case providing amd_iommu=off to kernel command line may help. WLE900VX This module works fairly well with all apu boards. Compatible slots: Platform mPCIe1 mPCIe2 mSATA apu2 \u2714 \u2714 \u2716 apu3 \u2714 \u2716 \u2716 apu4 \u2714 \u2716 \u2716 Quirks: Sometimes the module may have problems with OS communication on mainline releases. In such case providing amd_iommu=off to kernel command line may help. WLE1216V5-20 Correct detection of this module is a little tricky and hardware related. Due to different PCI Express reset circuit on apu boards, apu2 has problems with this particular module detection. Most likely due to different reset timing caused by different PE_RST circuitry on apu2, the module does not come out of reset in time during PCI enumeration and thus is not detected in BIOS and operating system. Quirks: On apu2 in mPCIe2 slot module works only after a soft reboot with legacy firmware, however during the tests we have encountered kernel panics. On the other hand users did not experience kernel panics and are able to use the module after reboot. The apu2 board revision plays a huge role in the mentioned problems. on apu3 and apu4 the module works with any firmware and does not require reboot Platform mPCIe1 mPCIe2 mSATA apu2 \u2716 \u2714 \u00b9 \u2716 apu3 \u2714 \u2716 \u2716 apu4 \u2714 \u2716 \u2716 (1) Refer to quirks, it is known to not work stably on all apu2 board revisions Ethernet controllers Dual Ethernet Controller Realtek RTL8111 Compatible slots Platform mPCIe1 mPCIe2 mSATA apu2 \u2714 \u2714 \u00b9 \u2716 apu3 \u2714 \u2716 \u2716 apu4 \u2714 \u2716 \u2716 (1) If RTL8111 is attached to mPCIe2 slot then option force mPCIe2 slot Clk in Payload menu must be enabled This model works well with apu1 boards. However, on apu2, apu3 and apu4 platforms following steps should be done to correctly enable it: On apu2 board (apu1, apu3 and apu4 boards aren't affected) make sure to enable option force mPCIe2 slot Clk in Payload menu if you attached module to mPCIe2 slot. This menu is available during boot process by pressing F10 button. In OS now, you should be able to see your Ethernet controller under PCI devices. Manually download and install missing Realtek firmware. Even if Ethernet controller is recognized by OS it won't work correctly without it. Installation can be done, for example in Debian OS, by performing those steps: Edit /etc/apt/sources.list file. It should contain additional two lines: deb http://ftp.pl.debian.org/debian stretch main non-free deb-src http://ftp.pl.debian.org/debian stretch main non-free Update apt-get: sudo apt-get update Install Realtek firmware sudo apt-get install firmware-realtek SATA controllers ASMedia ASM1061 Module is NOT SUPPORTED by PC Engines apu platforms. ASM1061 was tested with Delock 95233 mPCIe 2xSATA module. Compatible slots Due to apu boards construction, it is possible to test that module only under apu2 mPCIe2 slot. Capacitors placed near the mPCIe1 slot prevent connecting the SATA cables to the module. Therefore, module was tested only in mPCIe2 slot. After multiple tests performed, it turned out that ASM1061 module is not supported by PC Engines apu2 platform. Tests results Carried out tests and their results are presented in debug documentation . Detection problem is described more precisely there. Also, possible reasons of ASM1061 behavior are presented. Anyway, in every case and configuration that module doesn't work properly. Other hardware fixes A good source of hardware fixes information of Your board is the PC Engines site . If You think Your problem may be related to issues listed here, contact PC Engines for details. If You have not found a solution either after reading this document or contacting PC Engines, feel free to open GitHub issue. apu2 Set of changes for apu2: Version apu2d: Reduce leakage current between V3 and V3A power rails (can cause problems with SD cards). Add options for better compatibility with LTE modem modules. Version apu2c: Integrate blue wire patches (EMI, power-up circuit) into PCB fab. apu3 Set of changes for apu3: Version apu3c: Improve compatibility with LTE modem modules: Disconnect SMB_DAT / SMB_CLK signals (1.8V level on Quectel). Improve compatibility with LTE modem modules: No stuff diodes D4 / D17, option resistor bypass (extremely low VIL on Huawei modems, sensitive to incoming EMI). Optional SIM presence indicator / SIM card detect. Disable non-functional NCT5104D watchdog timer. Increase 3.3V current limit to allow for two simultaneous LTE modems. Some DFM changes. Version apu3b: Fixed USB header J13 pinout. Version apu3a: The pinout on USB header J13 is wrong, do not use. apu4 Set of changes for apu4: Version apu4c: Minimize leakage from V3A to V3 rail (SD card compatibility) Fix USB header J12 pinout. Change SIM switch to FXLA2203, FXLA2204 went EOL. New 2GB version apu4c2, single SIM socket. Optional 10 pin LPC header to allow for future TPM option.","title":"Mpcie modules"},{"location":"mpcie_modules/#list-of-supported-mpcie-modules","text":"This document contains a list of supported WiFi and LTE modules in mini PCI Express card form factor. Document intends to present limitations of the modules and quirks necessary for their flawless operation. The list is currently limited only to tested and verified modules","title":"List of supported mPCIe modules"},{"location":"mpcie_modules/#lte-modules","text":"","title":"LTE modules"},{"location":"mpcie_modules/#quectel-ep06","text":"This LTE module has certain problems with detection in the operating systems. The module uses a USB interface to communicate with the processor and OS. Due to the availability of USB 2.0 and USB 3.0 interfaces in the module, it often gets enumerated incorrectly. The presence of USB 3.0 lanes causes the module to use the USB 3.0 protocol instead of the USB 2.0 protocol. The mPCIe slots on apu boards have only USB 2.0 signals routed to the connectors. In place of the USB 3.0 signals, apu boards have either PCIe signals or SATA signals for WiFi and mSATA modules respectively. The design of the modules is intended to support majority of the modules, but it will not always be compatible with all possible modules, please take it into consideration. Symptoms of the wrong detection: only 1 ttyUSB node created by OS no ttyUSB nodes created by OS errors in USB enumeration for the module in dmesg Solutions: Contact PC Engines for a module firmware update with USB 3.0 protocol disabled if You have problems with module detection. Cover USB 3.0 signals on the module with tape to block signal connection as shown in the picture: Black pins mean that they have to be covered with tape. The 6 black pins on the top side are USB3.0 signals. Two pins on the bottom side are I2C/SMBus pins which also should be covered with tape. The module design requires pull-ups on the mainboard side, but they are not present on apu. Compatible slots: Platform mPCIe1 mPCIe2 mSATA apu2 \u2714 \u2714 \u2716 apu3 \u2716 \u2714 \u2714 \u00b9 apu4 \u2716 \u2714 \u2714 \u00b9 (1) Do not forget to enable EHCI0 controller in sortbootorder For each port's capabilities please refer to mPCIe port capabilities","title":"Quectel EP06"},{"location":"mpcie_modules/#huawei-me909u","text":"This module works fairly well with all apu boards. Compatible slots: Platform mPCIe1 mPCIe2 mSATA apu2 \u2714 \u2714 \u2716 apu3 \u2716 \u2714 \u2714 \u00b9 apu4 \u2716 \u2714 \u2714 \u00b9 (1) Do not forget to enable EHCI0 controller in sortbootorder","title":"HUAWEI ME909u"},{"location":"mpcie_modules/#huawei-me906s-m2","text":"There is an option to use the M.2 Key B to Mini PCIE PCI-E Adapter Converter for 3G/4G/5G and connect Huawei ME906s M.2 4G to compatible mPCIe slot. This adapter includes routing the SIM signals so APU SIM slot may be used without problems. Kudos to Jamie Lentin (@lentinj) for checking this. Compatible slots: Platform mPCIe1 mPCIe2 mSATA apu2 \u2714 \u2714 \u2716 apu3 \u2716 \u2714 \u2714 \u00b9 apu4 \u2716 \u2714 \u2714 \u00b9 (1) Do not forget to enable EHCI0 controller in sortbootorder","title":"HUAWEI ME906s M.2"},{"location":"mpcie_modules/#wifi-modules","text":"","title":"WiFi modules"},{"location":"mpcie_modules/#wle200nx","text":"This module works fairly well with all apu boards. The module may have issues with interrupts. Related issues: coreboot #206 coreboot #285 coreboot #323 Compatible slots: Platform mPCIe1 mPCIe2 mSATA apu2 \u2714 \u2714 \u2716 apu3 \u2714 \u2716 \u2716 apu4 \u2714 \u2716 \u2716 Quirks: The real culprit of interrupt routing problems is the ath9k kernel module responsible for WLE200NX operation. The module has no robust interrupt implementation and tries to remap legacy INTx interrupt with IOMMU which is not possible due to technical reasons. The correct solution is to force ath9k kernel module to use MSI interrupts which can be remapped. This can be done with: echo \"options ath9k use_msi=1\" | sudo tee -a /etc/modprobe.d/ath9k.conf When the module is loaded, it initializes interrupts coming from WiFi devices to be a MSI type. MSI interrupts are correctly remapped by kernel with IOMMU, thus the issue is not present. Other solutions with kernel command line options: amd_iommu=off - disables the use of IOMMU in kernel. intremap=off - disables security feature of IOMMU called interrupt remapping.","title":"WLE200NX"},{"location":"mpcie_modules/#wle600vx","text":"This module works fairly well with all apu boards. Tested by PC Engines and apu users. Compatible slots: Platform mPCIe1 mPCIe2 mSATA apu2 \u2714 \u2714 \u2716 apu3 \u2714 \u2716 \u2716 apu4 \u2714 \u2716 \u2716 Quirks: Sometimes the module may have problems with OS communication on mainline releases. In such case providing amd_iommu=off to kernel command line may help.","title":"WLE600VX"},{"location":"mpcie_modules/#wle900vx","text":"This module works fairly well with all apu boards. Compatible slots: Platform mPCIe1 mPCIe2 mSATA apu2 \u2714 \u2714 \u2716 apu3 \u2714 \u2716 \u2716 apu4 \u2714 \u2716 \u2716 Quirks: Sometimes the module may have problems with OS communication on mainline releases. In such case providing amd_iommu=off to kernel command line may help.","title":"WLE900VX"},{"location":"mpcie_modules/#wle1216v5-20","text":"Correct detection of this module is a little tricky and hardware related. Due to different PCI Express reset circuit on apu boards, apu2 has problems with this particular module detection. Most likely due to different reset timing caused by different PE_RST circuitry on apu2, the module does not come out of reset in time during PCI enumeration and thus is not detected in BIOS and operating system. Quirks: On apu2 in mPCIe2 slot module works only after a soft reboot with legacy firmware, however during the tests we have encountered kernel panics. On the other hand users did not experience kernel panics and are able to use the module after reboot. The apu2 board revision plays a huge role in the mentioned problems. on apu3 and apu4 the module works with any firmware and does not require reboot Platform mPCIe1 mPCIe2 mSATA apu2 \u2716 \u2714 \u00b9 \u2716 apu3 \u2714 \u2716 \u2716 apu4 \u2714 \u2716 \u2716 (1) Refer to quirks, it is known to not work stably on all apu2 board revisions","title":"WLE1216V5-20"},{"location":"mpcie_modules/#ethernet-controllers","text":"","title":"Ethernet controllers"},{"location":"mpcie_modules/#dual-ethernet-controller-realtek-rtl8111","text":"Compatible slots Platform mPCIe1 mPCIe2 mSATA apu2 \u2714 \u2714 \u00b9 \u2716 apu3 \u2714 \u2716 \u2716 apu4 \u2714 \u2716 \u2716 (1) If RTL8111 is attached to mPCIe2 slot then option force mPCIe2 slot Clk in Payload menu must be enabled This model works well with apu1 boards. However, on apu2, apu3 and apu4 platforms following steps should be done to correctly enable it: On apu2 board (apu1, apu3 and apu4 boards aren't affected) make sure to enable option force mPCIe2 slot Clk in Payload menu if you attached module to mPCIe2 slot. This menu is available during boot process by pressing F10 button. In OS now, you should be able to see your Ethernet controller under PCI devices. Manually download and install missing Realtek firmware. Even if Ethernet controller is recognized by OS it won't work correctly without it. Installation can be done, for example in Debian OS, by performing those steps: Edit /etc/apt/sources.list file. It should contain additional two lines: deb http://ftp.pl.debian.org/debian stretch main non-free deb-src http://ftp.pl.debian.org/debian stretch main non-free Update apt-get: sudo apt-get update Install Realtek firmware sudo apt-get install firmware-realtek","title":"Dual Ethernet Controller Realtek RTL8111"},{"location":"mpcie_modules/#sata-controllers","text":"","title":"SATA controllers"},{"location":"mpcie_modules/#asmedia-asm1061","text":"Module is NOT SUPPORTED by PC Engines apu platforms. ASM1061 was tested with Delock 95233 mPCIe 2xSATA module. Compatible slots Due to apu boards construction, it is possible to test that module only under apu2 mPCIe2 slot. Capacitors placed near the mPCIe1 slot prevent connecting the SATA cables to the module. Therefore, module was tested only in mPCIe2 slot. After multiple tests performed, it turned out that ASM1061 module is not supported by PC Engines apu2 platform. Tests results Carried out tests and their results are presented in debug documentation . Detection problem is described more precisely there. Also, possible reasons of ASM1061 behavior are presented. Anyway, in every case and configuration that module doesn't work properly.","title":"ASMedia ASM1061"},{"location":"mpcie_modules/#other-hardware-fixes","text":"A good source of hardware fixes information of Your board is the PC Engines site . If You think Your problem may be related to issues listed here, contact PC Engines for details. If You have not found a solution either after reading this document or contacting PC Engines, feel free to open GitHub issue.","title":"Other hardware fixes"},{"location":"mpcie_modules/#apu2","text":"Set of changes for apu2: Version apu2d: Reduce leakage current between V3 and V3A power rails (can cause problems with SD cards). Add options for better compatibility with LTE modem modules. Version apu2c: Integrate blue wire patches (EMI, power-up circuit) into PCB fab.","title":"apu2"},{"location":"mpcie_modules/#apu3","text":"Set of changes for apu3: Version apu3c: Improve compatibility with LTE modem modules: Disconnect SMB_DAT / SMB_CLK signals (1.8V level on Quectel). Improve compatibility with LTE modem modules: No stuff diodes D4 / D17, option resistor bypass (extremely low VIL on Huawei modems, sensitive to incoming EMI). Optional SIM presence indicator / SIM card detect. Disable non-functional NCT5104D watchdog timer. Increase 3.3V current limit to allow for two simultaneous LTE modems. Some DFM changes. Version apu3b: Fixed USB header J13 pinout. Version apu3a: The pinout on USB header J13 is wrong, do not use.","title":"apu3"},{"location":"mpcie_modules/#apu4","text":"Set of changes for apu4: Version apu4c: Minimize leakage from V3A to V3 rail (SD card compatibility) Fix USB header J12 pinout. Change SIM switch to FXLA2203, FXLA2204 went EOL. New 2GB version apu4c2, single SIM socket. Optional 10 pin LPC header to allow for future TPM option.","title":"apu4"},{"location":"order_of_PCI_addresses/","text":"Order of PCI addresses Standard PCI addressing Initial coreboot port for APU2 was made with badly implemented PCIe engines definition passed to AGESA. It's done in the way that mPCIe cards get lower address than Network interface controllers (NICs). It causes weird and unwanted behavior like shifting addresses of NICs when a mPCIe device is added. Unfortunately it can\u2019t be changed without consequences, because of many years of APU existence on the market. If it had been changed, many APU owners would be surprised by e.g. change of interfaces names. sortbootorder To address this issue, we added a runtime option in sortbootorder which reverses the order of PCIe engines assignment in a way that: NICs occupy the lowest PCIe device numbers which make their enumeration persistent regardless of the WiFi module presence the WoL capable NIC is the first PCIe device in iPXE and in the operating system the mPCIe slots occupy the highest PCIe device numbers in following order: 3x NIC, mPCIe1, mPCIe2. In such case faulty detected WiFi in mPCIe2 slot will not affect interface renaming for mPCIe1 slot WiFi card. By default, this option is disabled which means nothing changes (compared to the state maintained for past 4 years) without intentional change of this setting. How to change To reverse order of PCI addresses: enter the sortbootorder in the SeaBIOS menu while booting by choosing payload [setup] enable the Reverse order of PCI addresses option by pressing g key save and exit sortbootorder by pressing s .","title":"order of PCI addresses"},{"location":"order_of_PCI_addresses/#order-of-pci-addresses","text":"","title":"Order of PCI addresses"},{"location":"order_of_PCI_addresses/#standard-pci-addressing","text":"Initial coreboot port for APU2 was made with badly implemented PCIe engines definition passed to AGESA. It's done in the way that mPCIe cards get lower address than Network interface controllers (NICs). It causes weird and unwanted behavior like shifting addresses of NICs when a mPCIe device is added. Unfortunately it can\u2019t be changed without consequences, because of many years of APU existence on the market. If it had been changed, many APU owners would be surprised by e.g. change of interfaces names.","title":"Standard PCI addressing"},{"location":"order_of_PCI_addresses/#sortbootorder","text":"To address this issue, we added a runtime option in sortbootorder which reverses the order of PCIe engines assignment in a way that: NICs occupy the lowest PCIe device numbers which make their enumeration persistent regardless of the WiFi module presence the WoL capable NIC is the first PCIe device in iPXE and in the operating system the mPCIe slots occupy the highest PCIe device numbers in following order: 3x NIC, mPCIe1, mPCIe2. In such case faulty detected WiFi in mPCIe2 slot will not affect interface renaming for mPCIe1 slot WiFi card. By default, this option is disabled which means nothing changes (compared to the state maintained for past 4 years) without intentional change of this setting.","title":"sortbootorder"},{"location":"order_of_PCI_addresses/#how-to-change","text":"To reverse order of PCI addresses: enter the sortbootorder in the SeaBIOS menu while booting by choosing payload [setup] enable the Reverse order of PCI addresses option by pressing g key save and exit sortbootorder by pressing s .","title":"How to change"},{"location":"os-status/","text":"Tested operating systems OS status Some operating system have problems running with different storage medias. These table shows currently tested systems on BIOS v4.9.0.x with corresponding medias: OS SD card SATA disk mSATA disk USB stick Voyage X1 OK OK OK*2 Debian OK OK OK OK*2 OPNsense OK OK OK OK*2 pfSense OK OK* OK OK*2 *- works well with BIOS v4.6.8 or later in mainline and all legacy releases; for v4.6.7 and older mainline versions issues with installation and system functionality (installation break, unwanted reboots), can be fixed by adding a hint hint.ahci.0.msi=\"0\" , for more information see this document *2 - all apu boards have problems with USB 3.x stick detection in BIOS, system is working properly, but after reboot/warmboot/coldboot USB stick may not appear in BIOS boot menu (depends on the stick, well working sticks are mentioned in this document ) X1 - Voyage Linux is bootable on SD card and works well in read-only mode, remounting as read-write and writing changes to SD sometimes results in kernel panic which often leads to non-operable system Voyage Linux 0.11: Linux voyage 4.1.6-voyage #1 SMP Thu Jun 2 17:53:20 HKT 2016 x86_64 GNU/Linux Linux Debian: Linux debian 4.9.0-4-amd64 #1 SMP Debian 4.9.65-3+deb9u1 (2017-12-23) x86_64 GNU/Linux pfSense: FreeBSD pfSense.localdomain 11.1-RELEASE-p4 FreeBSD 11.1-RELEASE-p4 #5 r313908+79c92265a31(RELENG_2_4): Mon Nov 20 08:18:22 CST 2017 root@buildbot2.netgate.com:/builder/ce-242/tmp/obj/builder/ce-242/tmp/FreeBSD-src/sys/pfSense amd64 OPNsense: OPNsense-19.1-OpenSSL-serial-amd64.img.bz2 Tested mediasos- SD card: CID: 0353445343313647806cb1100a011a00 CSD: 400e00325b59000076b27f800a404000 DSR: 0x404 FW Rev: 0x0 HW Rev: 0x8 Manufacturer ID: 0x000003 Name: SC16G OCR: 00200000 OEM ID: 0x5344 SCR: 0235844300000000 Serial: 0x6cb1100a SSR: 0000000004000000040090000f050a0000000000000100000000000000000000 0000000000000000000000000000000000000000000000000000000000000000 HDD: Model Family: Seagate Laptop SSHD Device Model: ST1000LM014-SSHD-8GB Serial Number: W380YWQN LU WWN Device Id: 5 000c50 06e82fb73 Firmware Version: LVD3 User Capacity: 1,000,204,886,016 bytes [1.00 TB] Sector Sizes: 512 bytes logical, 4096 bytes physical Rotation Rate: 5400 rpm Form Factor: 2.5 inches Device is: In smartctl database [for details use: -P show] ATA Version is: ACS-2, ACS-3 T13/2161-D revision 3b SATA Version is: SATA 3.1, 6.0 Gb/s (current: 6.0 Gb/s) Local Time is: Wed Feb 7 11:06:32 2018 GMT SMART support is: Available - device has SMART capability. SMART support is: Enabled mSATA SSD: Device Model: SATA SSD Serial Number: A1AE076419DF00167089 Firmware Version: S9FM02.8 User Capacity: 16,013,942,784 bytes [16.0 GB] Sector Size: 512 bytes logical/physical Rotation Rate: Solid State Device Form Factor: mSATA Device is: Not in smartctl database [for details use: -P showall] ATA Version is: ACS-3 (minor revision not indicated) SATA Version is: SATA 3.1, 6.0 Gb/s (current: 6.0 Gb/s) Local Time is: Wed Feb 21 13:24:02 2018 CET SMART support is: Available - device has SMART capability. SMART support is: Enabled USB sticks parameters are presented in this document: USB tests","title":"Os status"},{"location":"os-status/#tested-operating-systems","text":"","title":"Tested operating systems"},{"location":"os-status/#os-status","text":"Some operating system have problems running with different storage medias. These table shows currently tested systems on BIOS v4.9.0.x with corresponding medias: OS SD card SATA disk mSATA disk USB stick Voyage X1 OK OK OK*2 Debian OK OK OK OK*2 OPNsense OK OK OK OK*2 pfSense OK OK* OK OK*2 *- works well with BIOS v4.6.8 or later in mainline and all legacy releases; for v4.6.7 and older mainline versions issues with installation and system functionality (installation break, unwanted reboots), can be fixed by adding a hint hint.ahci.0.msi=\"0\" , for more information see this document *2 - all apu boards have problems with USB 3.x stick detection in BIOS, system is working properly, but after reboot/warmboot/coldboot USB stick may not appear in BIOS boot menu (depends on the stick, well working sticks are mentioned in this document ) X1 - Voyage Linux is bootable on SD card and works well in read-only mode, remounting as read-write and writing changes to SD sometimes results in kernel panic which often leads to non-operable system Voyage Linux 0.11: Linux voyage 4.1.6-voyage #1 SMP Thu Jun 2 17:53:20 HKT 2016 x86_64 GNU/Linux Linux Debian: Linux debian 4.9.0-4-amd64 #1 SMP Debian 4.9.65-3+deb9u1 (2017-12-23) x86_64 GNU/Linux pfSense: FreeBSD pfSense.localdomain 11.1-RELEASE-p4 FreeBSD 11.1-RELEASE-p4 #5 r313908+79c92265a31(RELENG_2_4): Mon Nov 20 08:18:22 CST 2017 root@buildbot2.netgate.com:/builder/ce-242/tmp/obj/builder/ce-242/tmp/FreeBSD-src/sys/pfSense amd64 OPNsense: OPNsense-19.1-OpenSSL-serial-amd64.img.bz2","title":"OS status"},{"location":"os-status/#tested-mediasos-","text":"SD card: CID: 0353445343313647806cb1100a011a00 CSD: 400e00325b59000076b27f800a404000 DSR: 0x404 FW Rev: 0x0 HW Rev: 0x8 Manufacturer ID: 0x000003 Name: SC16G OCR: 00200000 OEM ID: 0x5344 SCR: 0235844300000000 Serial: 0x6cb1100a SSR: 0000000004000000040090000f050a0000000000000100000000000000000000 0000000000000000000000000000000000000000000000000000000000000000 HDD: Model Family: Seagate Laptop SSHD Device Model: ST1000LM014-SSHD-8GB Serial Number: W380YWQN LU WWN Device Id: 5 000c50 06e82fb73 Firmware Version: LVD3 User Capacity: 1,000,204,886,016 bytes [1.00 TB] Sector Sizes: 512 bytes logical, 4096 bytes physical Rotation Rate: 5400 rpm Form Factor: 2.5 inches Device is: In smartctl database [for details use: -P show] ATA Version is: ACS-2, ACS-3 T13/2161-D revision 3b SATA Version is: SATA 3.1, 6.0 Gb/s (current: 6.0 Gb/s) Local Time is: Wed Feb 7 11:06:32 2018 GMT SMART support is: Available - device has SMART capability. SMART support is: Enabled mSATA SSD: Device Model: SATA SSD Serial Number: A1AE076419DF00167089 Firmware Version: S9FM02.8 User Capacity: 16,013,942,784 bytes [16.0 GB] Sector Size: 512 bytes logical/physical Rotation Rate: Solid State Device Form Factor: mSATA Device is: Not in smartctl database [for details use: -P showall] ATA Version is: ACS-3 (minor revision not indicated) SATA Version is: SATA 3.1, 6.0 Gb/s (current: 6.0 Gb/s) Local Time is: Wed Feb 21 13:24:02 2018 CET SMART support is: Available - device has SMART capability. SMART support is: Enabled USB sticks parameters are presented in this document: USB tests","title":"Tested mediasos-"},{"location":"os_boot_serial_console/","text":"Enabling OS boot serial console and setting connection parameters Intro Instructions is written for Voyage Linux, but steps shown here should work for another Linux distributions Used serial connection parameters: baudrate : 115200, data bits : 8, parity : none, stop bits : 1 Used text editor is nano , but it can be any another text editor e.g. vi Root user is recommended Enabling sending OS boot logs via serial console Often sending OS boot logs via serial console is disabled as default setting. To enable that function menu.lst file has to be edited. To do that follow the steps below. Login to Linux Voyage. Default login/password: root / voyage . After logging to Voyage Linux filesystem is mounted as read-only . To change that type: remountrw Open menu.lst file with any text editor. E.g: nano /boot/grub/menu.lst Find the settings of configuration from grub menu which you choose. The structure should look like: title Debian GNU/Linux, kernel 3.10.11 root (hd0,0) kernel /boot/vmlinuz-3.10.11 root=UUID=f45cf8c7-311e-47d6-88d0-a3a8861f37be ro initrd /boot/initrd.img-3.10.11 Add to the kernel line following options: vga=normal console=tty0 console=ttyS0,115200n8 After that step settings of selected configuration should look like: title Debian GNU/Linux, kernel 3.10.11 root (hd0,0) kernel /boot/vmlinuz-3.10.11 root=UUID=f45cf8c7-311e-47d6-88d0-a3a8861f37be ro console=ttyS0,115200n8 initrd /boot/initrd.img-3.10.11 Save the changes and close the file. For nano it's Ctrl+O to save the file and Ctrl+X to exit from file. Now you can reboot the system and check that OS boot logs appear in serial console: reboot Changing serial console connection parameters Login to Linux Voyage. Default login/password: root / voyage . After logging to Voyage Linux filesystem is mounted as read-only . To change that type: remountrw Turn on serial redirection in the GRUB. To do that open grub.conf file with any text editor. There can be no grub.conf file in your OS. Opening text editor with correctly chosen directory and file name will create it automatically: nano /boot/grub/grub.conf Then add lines shown below to the file: serial --unit=1 --speed=19200 terminal --timeout=8 console serial Save the changes and exit from the file (for nano : Ctrl+O next Ctrl+X ). Enable serial output from the Linux kernel. That step is descibed above . Turn on logging in via the serial console. Edit file named inittab : nano /etc/inittab Find uncommented line which looks similar to the shown below: T0:23:respawn:/sbin/getty -L ttyS0 115200 The last parameter is responsible for the set baudrate. In the example that value is set to 115200 . You can change it to the wanted baudrate. There can be more uncommented lines as indicated. Save the changes and exit from the file. Now you can reboot system and check that serial console baudrate was correctly changed: reboot If you are using serial console to perform steps from this instruction take a note that you should change connection parameters in used serial terminal (e.g. minicom ) too. Because characters won't be shown correctly after reboot .","title":"Os boot serial console"},{"location":"os_boot_serial_console/#enabling-os-boot-serial-console-and-setting-connection-parameters","text":"","title":"Enabling OS boot serial console and setting connection parameters"},{"location":"os_boot_serial_console/#intro","text":"Instructions is written for Voyage Linux, but steps shown here should work for another Linux distributions Used serial connection parameters: baudrate : 115200, data bits : 8, parity : none, stop bits : 1 Used text editor is nano , but it can be any another text editor e.g. vi Root user is recommended","title":"Intro"},{"location":"os_boot_serial_console/#enabling-sending-os-boot-logs-via-serial-console","text":"Often sending OS boot logs via serial console is disabled as default setting. To enable that function menu.lst file has to be edited. To do that follow the steps below. Login to Linux Voyage. Default login/password: root / voyage . After logging to Voyage Linux filesystem is mounted as read-only . To change that type: remountrw Open menu.lst file with any text editor. E.g: nano /boot/grub/menu.lst Find the settings of configuration from grub menu which you choose. The structure should look like: title Debian GNU/Linux, kernel 3.10.11 root (hd0,0) kernel /boot/vmlinuz-3.10.11 root=UUID=f45cf8c7-311e-47d6-88d0-a3a8861f37be ro initrd /boot/initrd.img-3.10.11 Add to the kernel line following options: vga=normal console=tty0 console=ttyS0,115200n8 After that step settings of selected configuration should look like: title Debian GNU/Linux, kernel 3.10.11 root (hd0,0) kernel /boot/vmlinuz-3.10.11 root=UUID=f45cf8c7-311e-47d6-88d0-a3a8861f37be ro console=ttyS0,115200n8 initrd /boot/initrd.img-3.10.11 Save the changes and close the file. For nano it's Ctrl+O to save the file and Ctrl+X to exit from file. Now you can reboot the system and check that OS boot logs appear in serial console: reboot","title":"Enabling sending OS boot logs via serial console"},{"location":"os_boot_serial_console/#changing-serial-console-connection-parameters","text":"Login to Linux Voyage. Default login/password: root / voyage . After logging to Voyage Linux filesystem is mounted as read-only . To change that type: remountrw Turn on serial redirection in the GRUB. To do that open grub.conf file with any text editor. There can be no grub.conf file in your OS. Opening text editor with correctly chosen directory and file name will create it automatically: nano /boot/grub/grub.conf Then add lines shown below to the file: serial --unit=1 --speed=19200 terminal --timeout=8 console serial Save the changes and exit from the file (for nano : Ctrl+O next Ctrl+X ). Enable serial output from the Linux kernel. That step is descibed above . Turn on logging in via the serial console. Edit file named inittab : nano /etc/inittab Find uncommented line which looks similar to the shown below: T0:23:respawn:/sbin/getty -L ttyS0 115200 The last parameter is responsible for the set baudrate. In the example that value is set to 115200 . You can change it to the wanted baudrate. There can be more uncommented lines as indicated. Save the changes and exit from the file. Now you can reboot system and check that serial console baudrate was correctly changed: reboot If you are using serial console to perform steps from this instruction take a note that you should change connection parameters in used serial terminal (e.g. minicom ) too. Because characters won't be shown correctly after reboot .","title":"Changing serial console connection parameters"},{"location":"pfSense-install-guide/","text":"pfSense Installation Guide Contents pfSense Installation Guide Contents pfSense Image Booting installer Installation pfSense Image In order to install pfSense on apu2/3/5 platforms from USB, obtain following Image from official mirror and follow the official Writing Disk Images guide for Windows, Linux, UNIX or MAC OS X. Booting installer Plug the USB stick prepared earlier to apu and boot from it. Only for BIOS v4.6.7 or older, when main installer menu pops up do the following: Interrupt the installer by pressing ESC and type following commands: set hint.ahci.0.msi=\"0\" boot BIOS versions v4.6.7 and older need to have MSI disabled, due to signal races causing disk write commands timeouts. Installer should load the kernel now and begin installation process. Installation Proceed with the installation choosing the options that fit you. At the end of installation, only BIOS v4.6.7 or older to prevent system hangs or reboots after few hours uptime, open the shell to customize the system: Edit /boot/device.hints and append hint.ahci.0.msi=\"0\"","title":"pfSense install guide"},{"location":"pfSense-install-guide/#pfsense-installation-guide","text":"","title":"pfSense Installation Guide"},{"location":"pfSense-install-guide/#contents","text":"pfSense Installation Guide Contents pfSense Image Booting installer Installation","title":"Contents"},{"location":"pfSense-install-guide/#pfsense-image","text":"In order to install pfSense on apu2/3/5 platforms from USB, obtain following Image from official mirror and follow the official Writing Disk Images guide for Windows, Linux, UNIX or MAC OS X.","title":"pfSense Image"},{"location":"pfSense-install-guide/#booting-installer","text":"Plug the USB stick prepared earlier to apu and boot from it. Only for BIOS v4.6.7 or older, when main installer menu pops up do the following: Interrupt the installer by pressing ESC and type following commands: set hint.ahci.0.msi=\"0\" boot BIOS versions v4.6.7 and older need to have MSI disabled, due to signal races causing disk write commands timeouts. Installer should load the kernel now and begin installation process.","title":"Booting installer"},{"location":"pfSense-install-guide/#installation","text":"Proceed with the installation choosing the options that fit you. At the end of installation, only BIOS v4.6.7 or older to prevent system hangs or reboots after few hours uptime, open the shell to customize the system: Edit /boot/device.hints and append hint.ahci.0.msi=\"0\"","title":"Installation"},{"location":"pfsense_installerconfig/","text":"Unattanded installation PFSense rc.local After booting from USB stick installer rc.local is executed. Changes have to be applied to this file to eliminate interactive dialog options. Add environment variable defining terminal type: #!/bin/sh # $FreeBSD$ export TERM = vt100 Comment out console type input: # Serial or other console echo echo \"Welcome to pfSense!\" echo echo \"Please choose the appropriate terminal type for you system.\" echo \"Common console types are:\" echo \" ansi Standard ANSI terminal\" echo \" vt100 VT100 or compatible terminal\" echo \" xterm xterm terminal emulator (or compatible)\" echo \" cons25w cons25w terminal\" echo echo -n \"Console type [vt100]: \" #read TERM #TERM=${TERM:-vt100} Add reboot command after installerconfig finishes: if [ -f /etc/installerconfig ] ; then bsdinstall script /etc/installerconfig reboot fi installerconfig installerconfig script is called if exists. If doesn't exist manual installation is performed. #!/bin/bash # Unattended installation part ... # After installation you can launch new system shell and change configuration ... # When work is exit exit This file must be located in /etc/ directory. /etc/installerconfig script will install pfSense and replace all configuration files that we want to change before first boot. Examples Example file, installerconfig , is located in scripts/ directory. Problems During extracting distribution files phase installation sometimes hangs up. I've waited for 15 minutes and nothing happend. My solution was to reset platform.","title":"Pfsense installerconfig"},{"location":"pfsense_installerconfig/#unattanded-installation-pfsense","text":"","title":"Unattanded installation PFSense"},{"location":"pfsense_installerconfig/#rclocal","text":"After booting from USB stick installer rc.local is executed. Changes have to be applied to this file to eliminate interactive dialog options. Add environment variable defining terminal type: #!/bin/sh # $FreeBSD$ export TERM = vt100 Comment out console type input: # Serial or other console echo echo \"Welcome to pfSense!\" echo echo \"Please choose the appropriate terminal type for you system.\" echo \"Common console types are:\" echo \" ansi Standard ANSI terminal\" echo \" vt100 VT100 or compatible terminal\" echo \" xterm xterm terminal emulator (or compatible)\" echo \" cons25w cons25w terminal\" echo echo -n \"Console type [vt100]: \" #read TERM #TERM=${TERM:-vt100} Add reboot command after installerconfig finishes: if [ -f /etc/installerconfig ] ; then bsdinstall script /etc/installerconfig reboot fi","title":"rc.local"},{"location":"pfsense_installerconfig/#installerconfig","text":"installerconfig script is called if exists. If doesn't exist manual installation is performed. #!/bin/bash # Unattended installation part ... # After installation you can launch new system shell and change configuration ... # When work is exit exit This file must be located in /etc/ directory. /etc/installerconfig script will install pfSense and replace all configuration files that we want to change before first boot.","title":"installerconfig"},{"location":"pfsense_installerconfig/#examples","text":"Example file, installerconfig , is located in scripts/ directory.","title":"Examples"},{"location":"pfsense_installerconfig/#problems","text":"During extracting distribution files phase installation sometimes hangs up. I've waited for 15 minutes and nothing happend. My solution was to reset platform.","title":"Problems"},{"location":"pxelinux-cfg/","text":"Pxelinux on apu platforms iPXE serial console Since we have rebased to SeaBIOS 1.11.0, which implements full serial console support, we do not need sgabios and serial console in iPXE anymore. However some pxe configurations seem to have problems with displaying and interacting the pxe boot menu. iPXE scripting and pxelinux When trying to boot by chain loading iPXE scripts (e.g. menu.ipxe) there are no problems with display and switching between options. Unfortunately when trying to boot Debian netinst via pxelinux provided with image, the bootmenu is not printed correctly (weird signs appear). Furthermore, when trying to switch between options, only the currently selected row is refreshed, which causes the screen to shift and makes it completely unreadable. Pxelinux configuration In order to get rid of issues mentioned above, special configuration is needed. Since SeaBIOS 1.11.0 is redirecting screen output to console, it behaves like a video console. This is the main reason of the problems. As a workaround video console has to be disabled on pxelinux and serial port has to be enabled to act as a console. These parameters allows to achieve such effect: CONSOLE flag_val If flag_val is 0, disable output to the normal video console. If flag_val is 1, enable output to the video console (this is the default). Some BIOSes try to forward this to the serial console which can make a total mess of things, so this option lets you disable the video console on these systems. SERIAL port [baudrate [flowcontrol]] Enable a serial port to act as the console. \"port\" is a number (0 = /dev/ttyS0 = COM1, etc.) or an I/O port address (e.g. 0x3F8). If \"baudrate\" is omitted, the baud rate defaults to 9600 bps. The serial parameters are hardcoded to 8 bits, no parity and 1 stop bit. These parameters must be placed in pxelinux.cfg . Example of correct pxelinux.cfg : # D-I config version 2.0 # search path for the c32 support libraries (libcom32, libutil etc.) serial 0 115200 console 0 path debian-installer/i386/boot-screens/ include debian-installer/i386/boot-screens/menu.cfg default debian-installer/i386/boot-screens/vesamenu.c32 prompt 0 timeout 300 serial parameter has to be the first parameter in config file. console parameter has be set then to 0 to disable video console.","title":"Pxelinux cfg"},{"location":"pxelinux-cfg/#pxelinux-on-apu-platforms","text":"","title":"Pxelinux on apu platforms"},{"location":"pxelinux-cfg/#ipxe-serial-console","text":"Since we have rebased to SeaBIOS 1.11.0, which implements full serial console support, we do not need sgabios and serial console in iPXE anymore. However some pxe configurations seem to have problems with displaying and interacting the pxe boot menu.","title":"iPXE serial console"},{"location":"pxelinux-cfg/#ipxe-scripting-and-pxelinux","text":"When trying to boot by chain loading iPXE scripts (e.g. menu.ipxe) there are no problems with display and switching between options. Unfortunately when trying to boot Debian netinst via pxelinux provided with image, the bootmenu is not printed correctly (weird signs appear). Furthermore, when trying to switch between options, only the currently selected row is refreshed, which causes the screen to shift and makes it completely unreadable.","title":"iPXE scripting and pxelinux"},{"location":"pxelinux-cfg/#pxelinux-configuration","text":"In order to get rid of issues mentioned above, special configuration is needed. Since SeaBIOS 1.11.0 is redirecting screen output to console, it behaves like a video console. This is the main reason of the problems. As a workaround video console has to be disabled on pxelinux and serial port has to be enabled to act as a console. These parameters allows to achieve such effect: CONSOLE flag_val If flag_val is 0, disable output to the normal video console. If flag_val is 1, enable output to the video console (this is the default). Some BIOSes try to forward this to the serial console which can make a total mess of things, so this option lets you disable the video console on these systems. SERIAL port [baudrate [flowcontrol]] Enable a serial port to act as the console. \"port\" is a number (0 = /dev/ttyS0 = COM1, etc.) or an I/O port address (e.g. 0x3F8). If \"baudrate\" is omitted, the baud rate defaults to 9600 bps. The serial parameters are hardcoded to 8 bits, no parity and 1 stop bit. These parameters must be placed in pxelinux.cfg . Example of correct pxelinux.cfg : # D-I config version 2.0 # search path for the c32 support libraries (libcom32, libutil etc.) serial 0 115200 console 0 path debian-installer/i386/boot-screens/ include debian-installer/i386/boot-screens/menu.cfg default debian-installer/i386/boot-screens/vesamenu.c32 prompt 0 timeout 300 serial parameter has to be the first parameter in config file. console parameter has be set then to 0 to disable video console.","title":"Pxelinux configuration"},{"location":"release_process/","text":"Intro Following document describes release process for new versions of firmware for PC Engines APU2, APU3, APU4 and APU5 platform. It is intended for developers who want to create fully featured binaries and test those with various versions of sortbootorder, SeaBIOS, memtest86+ or iPXE. For releases v4.0.17 and v4.6.10 or newer please use pce-fw-builder Please note that flashing without recovery procedure is not recommended and we are not responsible for any damage that inexperienced person can do to the system. Use repo tool to initialize set of repositories mkdir apu2_fw_rel cd apu2_fw_rel repo init -u git@github.com:pcengines/release_manifests.git -b refs/tags/<tag_release> # or repo init -u git@github.com:pcengines/release_manifests.git -b <branch_name> repo sync --force-sync where: * <tag_release> - is the release version number (e.g. v4.6.4 ) * <branch_name> - is the release branch (i.e. coreboot-4.0.x for legacy, and coreboot-4.6.x for mainline You can look-up changes, available branches and release tags on this github repository . Build container This is to avoid impact of system on build results: docker build -t pcengines/apu2 apu2/apu2-documentation This step could be omitted, if there was build done before (container already exists). Build release Assuming you initialized the repo with mainline release: ./apu2/apu2-documentation/scripts/apu2_fw_rel.sh build-ml If config file was not created yet, the menuconfig will pop up. Please choose: Mainboard -> Mainboard vendor -> PC Engines Mainboard -> Mainboard model -> APU2 or Mainboard -> Mainboard model -> APU3 or Mainboard -> Mainboard model -> APU4 or Mainboard -> Mainboard model -> APU5 All other pieces will be set according to recent release configuration. coreboot image will start to build after exiting menu. For legacy release you can use this command: ./apu2/apu2-documentation/scripts/apu2_fw_rel.sh build There are also additional commands like: # menuconfig ./apu2/apu2-documentation/scripts/apu2_fw_rel.sh build-ml menuconfig # or for legacy ./apu2/apu2-documentation/scripts/apu2_fw_rel.sh build menuconfig # distclean ./apu2/apu2-documentation/scripts/apu2_fw_rel.sh build-ml distclean # or for legacy ./apu2/apu2-documentation/scripts/apu2_fw_rel.sh build distclean # rm -rf .config* ./apu2/apu2-documentation/scripts/apu2_fw_rel.sh build-ml cfgclean # or for legacy ./apu2/apu2-documentation/scripts/apu2_fw_rel.sh build cfgclean # custom make parameters ./apu2/apu2-documentation/scripts/apu2_fw_rel.sh build-ml custom <param> # or for legacy ./apu2/apu2-documentation/scripts/apu2_fw_rel.sh build custom <param> After successful build, you can flash target device. Flash release Note that below script assume that you have ssh enabled connection with target device and destination OS or other distro that have working flashrom available in PATH . Without keys added you will see question about password couple times during flashing. ./apu2/apu2-documentation/scripts/apu2_fw_rel.sh flash <user>@<ip_address> For forcing the flash (board identification mismatch): ./apu2/apu2-documentation/scripts/apu2_fw_rel.sh flash-force <user>@<ip_address> Best way is to use root as <user> because it can have no problem with low level access. Please do not hesitate with providing feedback or contributing fixes. Known issues using repo with coreboot show errors like: fatal: Not a git repository (or any parent up to mount point /coreboot) Stopping at filesystem boundary (GIT_DISCOVERY_ACROSS_FILESYSTEM not set). Since it use git commands to create build timestamp. flashing doesn't work [21:51:53] pietrushnic:apu2_fw_rel $ ../apu2-documentation/scripts/apu2_fw_rel.sh flash pcengines@192.168.0.103 flash pcengines@192.168.0.103 The authenticity of host '192.168.0.103 (192.168.0.103)' can't be established. (...) Are you sure you want to continue connecting (yes/no)? yes Warning: Permanently added '192.168.0.103' (ECDSA) to the list of known hosts. bash: remountrw: command not found coreboot.rom 100% 8192KB 8.0MB/s 00:00 sudo: no tty present and no askpass program specified sudo: no tty present and no askpass program specified scripts finish with error If you see something like this: dirname: missing operand Try 'dirname --help' for more information. dirname: missing operand Try 'dirname --help' for more information. docker: Error response from daemon: Invalid volume spec \":\": Invalid volume specification: ':'. See 'docker run --help'. Try to run: eval $(ssh-agent) ssh-add","title":"Release process"},{"location":"release_process/#intro","text":"Following document describes release process for new versions of firmware for PC Engines APU2, APU3, APU4 and APU5 platform. It is intended for developers who want to create fully featured binaries and test those with various versions of sortbootorder, SeaBIOS, memtest86+ or iPXE. For releases v4.0.17 and v4.6.10 or newer please use pce-fw-builder Please note that flashing without recovery procedure is not recommended and we are not responsible for any damage that inexperienced person can do to the system.","title":"Intro"},{"location":"release_process/#use-repo-tool-to-initialize-set-of-repositories","text":"mkdir apu2_fw_rel cd apu2_fw_rel repo init -u git@github.com:pcengines/release_manifests.git -b refs/tags/<tag_release> # or repo init -u git@github.com:pcengines/release_manifests.git -b <branch_name> repo sync --force-sync where: * <tag_release> - is the release version number (e.g. v4.6.4 ) * <branch_name> - is the release branch (i.e. coreboot-4.0.x for legacy, and coreboot-4.6.x for mainline You can look-up changes, available branches and release tags on this github repository .","title":"Use repo tool to initialize set of repositories"},{"location":"release_process/#build-container","text":"This is to avoid impact of system on build results: docker build -t pcengines/apu2 apu2/apu2-documentation This step could be omitted, if there was build done before (container already exists).","title":"Build container"},{"location":"release_process/#build-release","text":"Assuming you initialized the repo with mainline release: ./apu2/apu2-documentation/scripts/apu2_fw_rel.sh build-ml If config file was not created yet, the menuconfig will pop up. Please choose: Mainboard -> Mainboard vendor -> PC Engines Mainboard -> Mainboard model -> APU2 or Mainboard -> Mainboard model -> APU3 or Mainboard -> Mainboard model -> APU4 or Mainboard -> Mainboard model -> APU5 All other pieces will be set according to recent release configuration. coreboot image will start to build after exiting menu. For legacy release you can use this command: ./apu2/apu2-documentation/scripts/apu2_fw_rel.sh build There are also additional commands like: # menuconfig ./apu2/apu2-documentation/scripts/apu2_fw_rel.sh build-ml menuconfig # or for legacy ./apu2/apu2-documentation/scripts/apu2_fw_rel.sh build menuconfig # distclean ./apu2/apu2-documentation/scripts/apu2_fw_rel.sh build-ml distclean # or for legacy ./apu2/apu2-documentation/scripts/apu2_fw_rel.sh build distclean # rm -rf .config* ./apu2/apu2-documentation/scripts/apu2_fw_rel.sh build-ml cfgclean # or for legacy ./apu2/apu2-documentation/scripts/apu2_fw_rel.sh build cfgclean # custom make parameters ./apu2/apu2-documentation/scripts/apu2_fw_rel.sh build-ml custom <param> # or for legacy ./apu2/apu2-documentation/scripts/apu2_fw_rel.sh build custom <param> After successful build, you can flash target device.","title":"Build release"},{"location":"release_process/#flash-release","text":"Note that below script assume that you have ssh enabled connection with target device and destination OS or other distro that have working flashrom available in PATH . Without keys added you will see question about password couple times during flashing. ./apu2/apu2-documentation/scripts/apu2_fw_rel.sh flash <user>@<ip_address> For forcing the flash (board identification mismatch): ./apu2/apu2-documentation/scripts/apu2_fw_rel.sh flash-force <user>@<ip_address> Best way is to use root as <user> because it can have no problem with low level access. Please do not hesitate with providing feedback or contributing fixes.","title":"Flash release"},{"location":"release_process/#known-issues","text":"","title":"Known issues"},{"location":"release_process/#using-repo-with-coreboot-show-errors-like","text":"fatal: Not a git repository (or any parent up to mount point /coreboot) Stopping at filesystem boundary (GIT_DISCOVERY_ACROSS_FILESYSTEM not set). Since it use git commands to create build timestamp.","title":"using repo with coreboot show errors like:"},{"location":"release_process/#flashing-doesnt-work","text":"[21:51:53] pietrushnic:apu2_fw_rel $ ../apu2-documentation/scripts/apu2_fw_rel.sh flash pcengines@192.168.0.103 flash pcengines@192.168.0.103 The authenticity of host '192.168.0.103 (192.168.0.103)' can't be established. (...) Are you sure you want to continue connecting (yes/no)? yes Warning: Permanently added '192.168.0.103' (ECDSA) to the list of known hosts. bash: remountrw: command not found coreboot.rom 100% 8192KB 8.0MB/s 00:00 sudo: no tty present and no askpass program specified sudo: no tty present and no askpass program specified","title":"flashing doesn't work"},{"location":"release_process/#scripts-finish-with-error","text":"If you see something like this: dirname: missing operand Try 'dirname --help' for more information. dirname: missing operand Try 'dirname --help' for more information. docker: Error response from daemon: Invalid volume spec \":\": Invalid volume specification: ':'. See 'docker run --help'. Try to run: eval $(ssh-agent) ssh-add","title":"scripts finish with error"},{"location":"sd_card_performance_test/","text":"SD card performance test Tests can be executed using iozone: apt-get install iozone3 An example use of iozone: iozone -e -a -s 4g -r 16M -i 0 -i 1 -s 4g - file size = 4GB -r 16m - record size = 16MB (maximum) -i 0 - write/rewrite test -i 1 - read/reread test In order to receive valid results (especially in read tests) file size needs to be big enough. For APU2 it was 4GB. This value can vary, depending on platform. It is related to system buffer.","title":"Sd card performance test"},{"location":"sd_card_performance_test/#sd-card-performance-test","text":"Tests can be executed using iozone: apt-get install iozone3 An example use of iozone: iozone -e -a -s 4g -r 16M -i 0 -i 1 -s 4g - file size = 4GB -r 16m - record size = 16MB (maximum) -i 0 - write/rewrite test -i 1 - read/reread test In order to receive valid results (especially in read tests) file size needs to be big enough. For APU2 it was 4GB. This value can vary, depending on platform. It is related to system buffer.","title":"SD card performance test"},{"location":"serial_console/","text":"Serial console output in coreboot Along with v4.8.0.6 and v4.0.21 we introduced possibility to enable COM2 as the main serial port for serial console output in coreboot and SeaBIOS. Because this is not enabled in runtime configuration, separate binary must be built in order to get the output on COM2. Since releae v4.8.0.7 and v4.0.22 output redirection to COM2 became possible via runtime configuration. Supported sortbootorder and SeaBIOS versions are v4.6.12 and rel-1.11.0.7 respectively. For details see COM2 runtime configuration Building coreboot firmware with console on COM2 Building image capable of printing output on COM2 is relatively easy. Users guide To build the firmware from scratch and change the output to COM2 follow the steps: Clone the pce-fw-builder Pull or build docker container: docker pull pcengines/pce-fw-builder or for legacy: docker pull pcengines/pce-fw-builder-legacy Build v4.8.0.6 image (v4.0.21 for legacy): ./build.sh release v4.8.0.6 {apu2|apu3|apu4} Make changes to menuconfig: ./build.sh dev-build $PWD/release/coreboot {apu2|apu3|apu4} menuconfig In order to change serial port, go to Console menu and change Index for UART port to use for console to 1 . You will see that comment below *** Serial port base address = 0x3f8 *** will change to *** Serial port base address = 0x2f8 *** (this comment is not displayed in legacy). Then go to Payload menu and type the changed serial port base address ( 0x2f8 ) to SeaBIOS sercon-port base address field. Now save new config. For legacy it may not build the firmware with expected changes. One has to do a distclean first, copy the config and make the changes again: ./build.sh dev-build $PWD/release/coreboot {apu2|apu3|apu4} distclean cp $PWD/release/coreboot/configs/pcengines_{apu2|apu3|apu4}.config $PWD/release/coreboot/.config ./build.sh dev-build $PWD/release/coreboot {apu2|apu3|apu4} menuconfig Build the image again: ./build.sh dev-build $PWD/release/coreboot {apu2|apu3|apu4} CPUS=$(nproc) Flash the new image with serial output on COM2. The firmware image can be found in release/coreboot which is relative to cloned pce-fw-builder directory. Developers guide Make default config for platform and then run menuconfig: cp configs/config.pcengines_apux .config make olddefconfig make menuconfig make olddefconfig step is valid only on mainline. For legacy releases, omit this step In order to change serial port, go to Console menu and change Index for UART port to use for console to 1 . You will see that comment below *** Serial port base address = 0x3f8 *** will change to *** Serial port base address = 0x2f8 *** (this comment is not displayed in legacy). Then go to Payload menu and type the changed serial port base address ( 0x2f8 ) to SeaBIOS sercon-port base address field. Now save new config. COM2 runtime configuration Since v4.8.0.7 and v4.0.22, sortbootorder has a new option to enable output redirection to COM2. After entering sortbootorder menu, one could notice additional COM2 redirection among other options: u USB boot - Currently Enabled t Serial console - Currently Enabled k Redirect console output to COM2 - Currently Disabled o UART C - Currently Enabled p UART D - Currently Enabled Pressing k and savign changes will cause switching output to COM2. The change affects coreboot, SeaBIOS, sortbootorder and iPXE. Unfortunately redirection doesn't work for memtest86+. Memtest86+ has no possibility to redirect console to other port than specified during build process. If one wishes to have full support for COM2, follow Users guide to build firmware from scratch. NOTE: when building firmware from scratch for COM2 as described in Users guide , there will be no going back to COM1, even when COM2 redirection is disabled in sortbootorder. One will have to flash firmware with COM1 as main serial port (release bianry for example). Summary By default main console is COM1 with base address of 0x3f8 . This is the base address of ttyS0 typically. After changing the output to COM2, do not forget to adjust kernel cmdline in Your OSes to set console to ttyS1 (base address 0x2f8 ). The baud rate remains the same (115200). The serial console disable feature in sortbootorder works also for COM2. So if one does not desire to have output in firmware, it can be simply turned off (and turned back again with S1 button). COM2 redirection runtime configuration works properly with all payloads except memtest86+. Serial port configuration for memtest86+ is determined during build and it cannot be changed by any means in firmware.","title":"Serial console"},{"location":"serial_console/#serial-console-output-in-coreboot","text":"Along with v4.8.0.6 and v4.0.21 we introduced possibility to enable COM2 as the main serial port for serial console output in coreboot and SeaBIOS. Because this is not enabled in runtime configuration, separate binary must be built in order to get the output on COM2. Since releae v4.8.0.7 and v4.0.22 output redirection to COM2 became possible via runtime configuration. Supported sortbootorder and SeaBIOS versions are v4.6.12 and rel-1.11.0.7 respectively. For details see COM2 runtime configuration","title":"Serial console output in coreboot"},{"location":"serial_console/#building-coreboot-firmware-with-console-on-com2","text":"Building image capable of printing output on COM2 is relatively easy.","title":"Building coreboot firmware with console on COM2"},{"location":"serial_console/#users-guide","text":"To build the firmware from scratch and change the output to COM2 follow the steps: Clone the pce-fw-builder Pull or build docker container: docker pull pcengines/pce-fw-builder or for legacy: docker pull pcengines/pce-fw-builder-legacy Build v4.8.0.6 image (v4.0.21 for legacy): ./build.sh release v4.8.0.6 {apu2|apu3|apu4} Make changes to menuconfig: ./build.sh dev-build $PWD/release/coreboot {apu2|apu3|apu4} menuconfig In order to change serial port, go to Console menu and change Index for UART port to use for console to 1 . You will see that comment below *** Serial port base address = 0x3f8 *** will change to *** Serial port base address = 0x2f8 *** (this comment is not displayed in legacy). Then go to Payload menu and type the changed serial port base address ( 0x2f8 ) to SeaBIOS sercon-port base address field. Now save new config. For legacy it may not build the firmware with expected changes. One has to do a distclean first, copy the config and make the changes again: ./build.sh dev-build $PWD/release/coreboot {apu2|apu3|apu4} distclean cp $PWD/release/coreboot/configs/pcengines_{apu2|apu3|apu4}.config $PWD/release/coreboot/.config ./build.sh dev-build $PWD/release/coreboot {apu2|apu3|apu4} menuconfig Build the image again: ./build.sh dev-build $PWD/release/coreboot {apu2|apu3|apu4} CPUS=$(nproc) Flash the new image with serial output on COM2. The firmware image can be found in release/coreboot which is relative to cloned pce-fw-builder directory.","title":"Users guide"},{"location":"serial_console/#developers-guide","text":"Make default config for platform and then run menuconfig: cp configs/config.pcengines_apux .config make olddefconfig make menuconfig make olddefconfig step is valid only on mainline. For legacy releases, omit this step In order to change serial port, go to Console menu and change Index for UART port to use for console to 1 . You will see that comment below *** Serial port base address = 0x3f8 *** will change to *** Serial port base address = 0x2f8 *** (this comment is not displayed in legacy). Then go to Payload menu and type the changed serial port base address ( 0x2f8 ) to SeaBIOS sercon-port base address field. Now save new config.","title":"Developers guide"},{"location":"serial_console/#com2-runtime-configuration","text":"Since v4.8.0.7 and v4.0.22, sortbootorder has a new option to enable output redirection to COM2. After entering sortbootorder menu, one could notice additional COM2 redirection among other options: u USB boot - Currently Enabled t Serial console - Currently Enabled k Redirect console output to COM2 - Currently Disabled o UART C - Currently Enabled p UART D - Currently Enabled Pressing k and savign changes will cause switching output to COM2. The change affects coreboot, SeaBIOS, sortbootorder and iPXE. Unfortunately redirection doesn't work for memtest86+. Memtest86+ has no possibility to redirect console to other port than specified during build process. If one wishes to have full support for COM2, follow Users guide to build firmware from scratch. NOTE: when building firmware from scratch for COM2 as described in Users guide , there will be no going back to COM1, even when COM2 redirection is disabled in sortbootorder. One will have to flash firmware with COM1 as main serial port (release bianry for example).","title":"COM2 runtime configuration"},{"location":"serial_console/#summary","text":"By default main console is COM1 with base address of 0x3f8 . This is the base address of ttyS0 typically. After changing the output to COM2, do not forget to adjust kernel cmdline in Your OSes to set console to ttyS1 (base address 0x2f8 ). The baud rate remains the same (115200). The serial console disable feature in sortbootorder works also for COM2. So if one does not desire to have output in firmware, it can be simply turned off (and turned back again with S1 button). COM2 redirection runtime configuration works properly with all payloads except memtest86+. Serial port configuration for memtest86+ is determined during build and it cannot be changed by any means in firmware.","title":"Summary"},{"location":"supported_coreboot_build/","text":"Building firmware supported by coreboot Intro Tested on Ubuntu 16.04 LTS CPU with 4 threads is used in instruction as an example Example PLATFORM_IP of PC Engines platform is 192.168.0.102 Git is required (type sudo apt-get install git -y to install git) Coreboot ROM building process Build environment container . Clone coreboot repository: git clone https://review.coreboot.org/coreboot.git And download submodules: cd coreboot git submodule update --init --checkout Changing files in downloaded directory is not required and it may cause that built coreboot ROM will be labeled as dirty . This is an undesirable situation. Run docker container: docker run --rm -v ${PWD}:/workdir -t -i pc-engines/apu2 bash Build crossgcc: > It's required only on first run. cd /workdir/coreboot make crossgcc-i386 CPUS=4 In place of 4 in CPUS=4 type number of threads you want to use. Configure your build: If previously you've built a ROM for another platform you should clean configuration. You make it so by typing: make distclean Configure your build parameters: make menuconfig Menu with build options should be shown. Select correct options: * For ALIX.1 series: Mainboard ---> Mainboard vendor ---> PC Engines Mainboard ---> Mainboard model ---> ALIX.1C Mainboard ---> ROM chip size ---> 1024 KB (1 MB) * For ALIX.2, ALIX.3 series: Mainboard ---> Mainboard vendor ---> PC Engines Mainboard ---> Mainboard model ---> ALIX.2D2 or 2D3 Mainboard ---> ROM chip size ---> 1024 KB (1 MB) * For ALIX.6 series Mainboard ---> Mainboard vendor ---> PC Engines Mainboard ---> Mainboard model ---> ALIX.6 Mainboard ---> ROM chip size ---> 1024 KB (1 MB) * For APU1 series: Mainboard ---> Mainboard vendor ---> PC Engines Mainboard ---> Mainboard model ---> APU1 * For APU2 series Mainboard ---> Mainboard vendor ---> PC Engines Mainboard ---> Mainboard model ---> APU2 To enable creating coreboot boot timestamps table select: General setup ---> [ ]Create a table of timestamps collected during boot Then press Y key to enable that function. If enabled, * should appear: [*]Create a table of timestamps collected during boot Build coreboot ROM file: make CPUS=4 > In place of 4 in CPUS=4 type number of threads you want to use. Built ROM should be in build directory and it may be named coreboot.rom . You can now send it to the target device. E.g. with scp usage: scp build/coreboot.rom root@192.168.0.102:/tmp","title":"Supported coreboot build"},{"location":"supported_coreboot_build/#building-firmware-supported-by-coreboot","text":"","title":"Building firmware supported by coreboot"},{"location":"supported_coreboot_build/#intro","text":"Tested on Ubuntu 16.04 LTS CPU with 4 threads is used in instruction as an example Example PLATFORM_IP of PC Engines platform is 192.168.0.102 Git is required (type sudo apt-get install git -y to install git)","title":"Intro"},{"location":"supported_coreboot_build/#coreboot-rom-building-process","text":"Build environment container . Clone coreboot repository: git clone https://review.coreboot.org/coreboot.git And download submodules: cd coreboot git submodule update --init --checkout Changing files in downloaded directory is not required and it may cause that built coreboot ROM will be labeled as dirty . This is an undesirable situation. Run docker container: docker run --rm -v ${PWD}:/workdir -t -i pc-engines/apu2 bash Build crossgcc: > It's required only on first run. cd /workdir/coreboot make crossgcc-i386 CPUS=4 In place of 4 in CPUS=4 type number of threads you want to use. Configure your build: If previously you've built a ROM for another platform you should clean configuration. You make it so by typing: make distclean Configure your build parameters: make menuconfig Menu with build options should be shown. Select correct options: * For ALIX.1 series: Mainboard ---> Mainboard vendor ---> PC Engines Mainboard ---> Mainboard model ---> ALIX.1C Mainboard ---> ROM chip size ---> 1024 KB (1 MB) * For ALIX.2, ALIX.3 series: Mainboard ---> Mainboard vendor ---> PC Engines Mainboard ---> Mainboard model ---> ALIX.2D2 or 2D3 Mainboard ---> ROM chip size ---> 1024 KB (1 MB) * For ALIX.6 series Mainboard ---> Mainboard vendor ---> PC Engines Mainboard ---> Mainboard model ---> ALIX.6 Mainboard ---> ROM chip size ---> 1024 KB (1 MB) * For APU1 series: Mainboard ---> Mainboard vendor ---> PC Engines Mainboard ---> Mainboard model ---> APU1 * For APU2 series Mainboard ---> Mainboard vendor ---> PC Engines Mainboard ---> Mainboard model ---> APU2 To enable creating coreboot boot timestamps table select: General setup ---> [ ]Create a table of timestamps collected during boot Then press Y key to enable that function. If enabled, * should appear: [*]Create a table of timestamps collected during boot Build coreboot ROM file: make CPUS=4 > In place of 4 in CPUS=4 type number of threads you want to use. Built ROM should be in build directory and it may be named coreboot.rom . You can now send it to the target device. E.g. with scp usage: scp build/coreboot.rom root@192.168.0.102:/tmp","title":"Coreboot ROM building process"},{"location":"theory-of-operation/","text":"apu features - theory of operation Boot menu It lets selecting boot device (first options) and enter another menus to extended coreboot/seaBIOS features. To enter boot menu press F10 key during boot process. Example view of boot menu SeaBIOS (version rel-1.12.1.1-0-g55d345f) Press F10 key now for boot menu, N for PXE boot Select boot device: 1. USB MSC Drive Kingston DataTraveler 3.0 PMAP 2. USB MSC Drive Kingston DataTraveler 3.0 PMAP 3. SD card SB16G 15193MiB 4. AHCI/0: SanDisk SSD i110 16GB ATA-9 Hard-Disk (14566 MiBytes) 5. iPXE 6. Payload [setup] 7. Payload [memtest] t. TPM Configuration Payload menu It lets using some coreboot/seaBIOS features. To enter payload menu choose Payload [setup] option in boot menu. Example view of payload menu ### PC Engines apu2 setup v4.6.13 ### Boot order - type letter to move device to top. a USB 1 / USB 2 SS and HS b SDCARD c mSATA d SATA e mPCIe1 SATA1 and SATA2 f iPXE r Restore boot order defaults n Network/PXE boot - Currently Enabled u USB boot - Currently Enabled t Serial console - Currently Enabled k Redirect console output to COM2 - Currently Disabled o UART C - Currently Enabled p UART D - Currently Enabled m Force mPCIe2 slot CLK (GPP3 PCIe) - Currently Disabled h EHCI0 controller - Currently Enabled l Core Performance Boost - Currently Enabled w Enable BIOS write protect - Currently Disabled x Exit setup without save s Save configuration and exit Hidden security registers menu It lets writing and reading serial number to security registers of the SPI flash chip. To enter hidden menu type shift + z in payload menu. PC Engines apu firmware features Reading/Writing Serial number to SPI flash This feature lets user write and/or read serial number which is contained in hidden security register. To use it first, go to security registers menu. NOTE: When writing new serial number, only 9 first characters are taken, even if user gives more. Watch Video showing how Reading/Writing Serial number to SPI flash feature works. Setting bootorder priority In boot menu user can freely change bootorder. Watch Video showing how to change bootorder in Boot menu. Enable/Disable Network/PXE boot and press n for iPXE boot string This feature lets user Enable/Disable booting from PXE. If it is Enabled then during boot process user can access PXE boot string with n button. Also appropriate boot device should be available in boot menu (e.g. iPXE ). Watch Video showing how to enable/disable PXE boot and how to open PXE boot string. Enable/Disable USB boot This feature let user Enable/Disable booting from USB device. Watch Video showing how to enable/disable USB boot. Disable serial console and enable with S1 button To Disable serial console type t in payload menu. If it is disabled no data will be displayed in serial output. After changing state to Disabled restoring console can be done only via S1 button. Watch video showing how to disable serial console with payload menu option and then enable it with S1 button. Redirect console output to COM2 Console output is available via COM1 in default. This feature let user redirect console output to COM2. NOTE: Changing this option from Disabled to Enabled (or the opposite way) will cause losing current output in terminal. The advice is to open new connection in another terminal window on another COM. Watch video showing how to redirect console output to COM2. NOTE: In above example serial connection is redirect to telnet. First, it is opened on 13541 port (COM1). After enabling redirect console to COM2, output is no longer available. New telnet connection is opened on 13542 port (COM2) and console output is available there. Enable/Disable CPU boost This feature lets user Enable/Disable CPU performance boost. To verify if it works, memory test can be done (in boot menu choose payload[memtest] ). NOTE: Notice how memory transfer speed changes depending on CPU boost enable/disable. Watch video showing how to enable/disable CPU performance boost and verify it. Enable/Disable UARTC/UARTD This feature lets user enable/disable superIO UARTx on GPIO header. Watch Video showing how to enable/disable UARTC/UARTD. Enable/Disable mPCIe2 clk If mPCIe2 clk is enabled then GPP3 PCIe clock (which is attached to apu2 mPCIe2 slot) is always on. It is used when extension card is attached to mPCIe2 slot. If no extension card is attached it is advised to set to Disable . Watch Video showing how to enable/disable mPCIe2 clk. Enable/Disable EHCI0 controller This feature lets user enable/disable EHCI0 controller. Watch Video showing how to enable/disable EHCI0 controller. Restore default sortbootorder settings If user wants to bring back default settings in sortbootorder, it can be restored by typing r in payload menu. It will reset enable/disable features and boot order to defaults. Watch video showing how to restore settings to its default values. Press F10 button to enter boot menu and boot menu 6s timeout During boot performance, press F10 button to enter boot menu. NOTE: After power on user has 6 seconds to enter boot menu. If no button is pressed then automatically boot is performed. Watch Video showing how to enter boot menu via F10 button and boot menu 6s timeout feature. Screen refresh during memory test performance To perform memory test choose Payload [memtest] option in boot menu. During memory test user can refresh screen if the output in terminal is not available. It happens when serial connection is opened during test performance. Screen refresh can be done by typing l or L . Watch Video showing how screen refresh during memory test works. TPM SHA1 and SHA256 banks enable/disable PC Engines apu2 supports TPM module. This feature lets user choose which PCR banks are active. Watch video showing how to enable/disable SHAx banks in TPM menu.","title":"apu features - theory of operation"},{"location":"theory-of-operation/#apu-features-theory-of-operation","text":"","title":"apu features - theory of operation"},{"location":"theory-of-operation/#boot-menu","text":"It lets selecting boot device (first options) and enter another menus to extended coreboot/seaBIOS features. To enter boot menu press F10 key during boot process.","title":"Boot menu"},{"location":"theory-of-operation/#example-view-of-boot-menu","text":"SeaBIOS (version rel-1.12.1.1-0-g55d345f) Press F10 key now for boot menu, N for PXE boot Select boot device: 1. USB MSC Drive Kingston DataTraveler 3.0 PMAP 2. USB MSC Drive Kingston DataTraveler 3.0 PMAP 3. SD card SB16G 15193MiB 4. AHCI/0: SanDisk SSD i110 16GB ATA-9 Hard-Disk (14566 MiBytes) 5. iPXE 6. Payload [setup] 7. Payload [memtest] t. TPM Configuration","title":"Example view of boot menu"},{"location":"theory-of-operation/#payload-menu","text":"It lets using some coreboot/seaBIOS features. To enter payload menu choose Payload [setup] option in boot menu.","title":"Payload menu"},{"location":"theory-of-operation/#example-view-of-payload-menu","text":"### PC Engines apu2 setup v4.6.13 ### Boot order - type letter to move device to top. a USB 1 / USB 2 SS and HS b SDCARD c mSATA d SATA e mPCIe1 SATA1 and SATA2 f iPXE r Restore boot order defaults n Network/PXE boot - Currently Enabled u USB boot - Currently Enabled t Serial console - Currently Enabled k Redirect console output to COM2 - Currently Disabled o UART C - Currently Enabled p UART D - Currently Enabled m Force mPCIe2 slot CLK (GPP3 PCIe) - Currently Disabled h EHCI0 controller - Currently Enabled l Core Performance Boost - Currently Enabled w Enable BIOS write protect - Currently Disabled x Exit setup without save s Save configuration and exit","title":"Example view of payload menu"},{"location":"theory-of-operation/#hidden-security-registers-menu","text":"It lets writing and reading serial number to security registers of the SPI flash chip. To enter hidden menu type shift + z in payload menu.","title":"Hidden security registers menu"},{"location":"theory-of-operation/#pc-engines-apu-firmware-features","text":"Reading/Writing Serial number to SPI flash This feature lets user write and/or read serial number which is contained in hidden security register. To use it first, go to security registers menu. NOTE: When writing new serial number, only 9 first characters are taken, even if user gives more. Watch Video showing how Reading/Writing Serial number to SPI flash feature works. Setting bootorder priority In boot menu user can freely change bootorder. Watch Video showing how to change bootorder in Boot menu. Enable/Disable Network/PXE boot and press n for iPXE boot string This feature lets user Enable/Disable booting from PXE. If it is Enabled then during boot process user can access PXE boot string with n button. Also appropriate boot device should be available in boot menu (e.g. iPXE ). Watch Video showing how to enable/disable PXE boot and how to open PXE boot string. Enable/Disable USB boot This feature let user Enable/Disable booting from USB device. Watch Video showing how to enable/disable USB boot. Disable serial console and enable with S1 button To Disable serial console type t in payload menu. If it is disabled no data will be displayed in serial output. After changing state to Disabled restoring console can be done only via S1 button. Watch video showing how to disable serial console with payload menu option and then enable it with S1 button. Redirect console output to COM2 Console output is available via COM1 in default. This feature let user redirect console output to COM2. NOTE: Changing this option from Disabled to Enabled (or the opposite way) will cause losing current output in terminal. The advice is to open new connection in another terminal window on another COM. Watch video showing how to redirect console output to COM2. NOTE: In above example serial connection is redirect to telnet. First, it is opened on 13541 port (COM1). After enabling redirect console to COM2, output is no longer available. New telnet connection is opened on 13542 port (COM2) and console output is available there. Enable/Disable CPU boost This feature lets user Enable/Disable CPU performance boost. To verify if it works, memory test can be done (in boot menu choose payload[memtest] ). NOTE: Notice how memory transfer speed changes depending on CPU boost enable/disable. Watch video showing how to enable/disable CPU performance boost and verify it. Enable/Disable UARTC/UARTD This feature lets user enable/disable superIO UARTx on GPIO header. Watch Video showing how to enable/disable UARTC/UARTD. Enable/Disable mPCIe2 clk If mPCIe2 clk is enabled then GPP3 PCIe clock (which is attached to apu2 mPCIe2 slot) is always on. It is used when extension card is attached to mPCIe2 slot. If no extension card is attached it is advised to set to Disable . Watch Video showing how to enable/disable mPCIe2 clk. Enable/Disable EHCI0 controller This feature lets user enable/disable EHCI0 controller. Watch Video showing how to enable/disable EHCI0 controller. Restore default sortbootorder settings If user wants to bring back default settings in sortbootorder, it can be restored by typing r in payload menu. It will reset enable/disable features and boot order to defaults. Watch video showing how to restore settings to its default values. Press F10 button to enter boot menu and boot menu 6s timeout During boot performance, press F10 button to enter boot menu. NOTE: After power on user has 6 seconds to enter boot menu. If no button is pressed then automatically boot is performed. Watch Video showing how to enter boot menu via F10 button and boot menu 6s timeout feature. Screen refresh during memory test performance To perform memory test choose Payload [memtest] option in boot menu. During memory test user can refresh screen if the output in terminal is not available. It happens when serial connection is opened during test performance. Screen refresh can be done by typing l or L . Watch Video showing how screen refresh during memory test works. TPM SHA1 and SHA256 banks enable/disable PC Engines apu2 supports TPM module. This feature lets user choose which PCR banks are active. Watch video showing how to enable/disable SHAx banks in TPM menu.","title":"PC Engines apu firmware features"},{"location":"tianocore_build/","text":"Coreboot with tianocore payload on apu2 This document describes how to build coreboot image with tianocore payload for PC Engines apu2 platform. Payload is supported since v4.9.0.7 release. Building coreboot image Clone the pce-fw-builder Pull or build docker container: docker pull pcengines/pce-fw-builder Build v4.9.0.7 image: ./build.sh release v4.9.0.7 apu2 Invoke distclean: ./build.sh dev-build $PWD/release/coreboot apu2 distclean Copy config file for target platform cp $PWD/release/coreboot/configs/config.pcengines_apu2 $PWD/release/coreboot/.config Create full config: ./build.sh dev-build $PWD/release/coreboot apu2 olddefconfig Invoke menuconfig: ./build.sh dev-build $PWD/release/coreboot apu2 menuconfig In menuconfig go to Payload menu and next: In Add a payload choose Tianocore coreboot payload package Deselect PXE ROM Select Tianocore build type release In Secondary Payloads disable all options Make sure that Tianocore revision is set to origin/coreboot-4.7.x-uefi in the Insert a commit\u2019s SHA-1 or a branch name line. Rest options in Payload menu leave default Save settings and leave menuconfig Screenshot from correctly filled Payloads menu: Build coreboot image ./build.sh dev-build $PWD/release/coreboot apu2 CPUS=$(nproc) After successful build coreboot image file is in release/coreboot/build directory. Coreboot + tianocore working example To enter Boot Manager Menu press F2 or down arrow after the message shows up. There is 3s timeout which will proceed directly to booting if no key (or Enter ) was pressed. In Boot Manager user can see what bootable device are visible and what is boot order. UEFI Shell is shown also and in default settings it is always last boot option. Selecting the highlighted option will lead to boot process from selected device. NOTE: It may happen that even if device is seen in boot menu, tianocore could not boot from it. It is because OS on the selected device uses legacy mode and therefore it is not UEFI-aware system. In Boot Maintenance Manager user has access to change some basic options, such as boot order or console options. However, it is not recommended to change serial console options, due to possibility of connection lost. Following example is showing how expected output should looks like and how to move in UEFI shell menu. It was tested on apu4 platform, to which bootable USB stick was attached. As you can see, USB is a primary device in boot order menu. Hence, it always boot from it. To enter UEFI Shell, you need to choose it manually from Boot Manager.","title":"Tianocore build"},{"location":"tianocore_build/#coreboot-with-tianocore-payload-on-apu2","text":"This document describes how to build coreboot image with tianocore payload for PC Engines apu2 platform. Payload is supported since v4.9.0.7 release.","title":"Coreboot with tianocore payload on apu2"},{"location":"tianocore_build/#building-coreboot-image","text":"Clone the pce-fw-builder Pull or build docker container: docker pull pcengines/pce-fw-builder Build v4.9.0.7 image: ./build.sh release v4.9.0.7 apu2 Invoke distclean: ./build.sh dev-build $PWD/release/coreboot apu2 distclean Copy config file for target platform cp $PWD/release/coreboot/configs/config.pcengines_apu2 $PWD/release/coreboot/.config Create full config: ./build.sh dev-build $PWD/release/coreboot apu2 olddefconfig Invoke menuconfig: ./build.sh dev-build $PWD/release/coreboot apu2 menuconfig In menuconfig go to Payload menu and next: In Add a payload choose Tianocore coreboot payload package Deselect PXE ROM Select Tianocore build type release In Secondary Payloads disable all options Make sure that Tianocore revision is set to origin/coreboot-4.7.x-uefi in the Insert a commit\u2019s SHA-1 or a branch name line. Rest options in Payload menu leave default Save settings and leave menuconfig","title":"Building coreboot image"},{"location":"tianocore_build/#screenshot-from-correctly-filled-payloads-menu","text":"Build coreboot image ./build.sh dev-build $PWD/release/coreboot apu2 CPUS=$(nproc) After successful build coreboot image file is in release/coreboot/build directory.","title":"Screenshot from correctly filled Payloads menu:"},{"location":"tianocore_build/#coreboot-tianocore-working-example","text":"To enter Boot Manager Menu press F2 or down arrow after the message shows up. There is 3s timeout which will proceed directly to booting if no key (or Enter ) was pressed. In Boot Manager user can see what bootable device are visible and what is boot order. UEFI Shell is shown also and in default settings it is always last boot option. Selecting the highlighted option will lead to boot process from selected device. NOTE: It may happen that even if device is seen in boot menu, tianocore could not boot from it. It is because OS on the selected device uses legacy mode and therefore it is not UEFI-aware system. In Boot Maintenance Manager user has access to change some basic options, such as boot order or console options. However, it is not recommended to change serial console options, due to possibility of connection lost. Following example is showing how expected output should looks like and how to move in UEFI shell menu. It was tested on apu4 platform, to which bootable USB stick was attached. As you can see, USB is a primary device in boot order menu. Hence, it always boot from it. To enter UEFI Shell, you need to choose it manually from Boot Manager.","title":"Coreboot + tianocore working example"},{"location":"tpm_menu/","text":"SeaBIOS TPM configuration menu Since SeaBIOS rel-1.12.0.1 TPM 2.0 module from PC Engines is supported on apu2 and apu1 platforms (and apu5 where the chip may be soldered down depending on BOM option) in the payload as a configuration menu. When entering the boot menu on serial console via F10 key, one may notice an additional option when TPM module is connected to LPC header: SeaBIOS (version rel-1.12.0.1-15-g8993894) Press F10 key now for boot menu Select boot device: 1. USB MSC Drive Kingston DataTraveler 3.0 PMAP 2. SD card SB16G 15193MiB 3. AHCI/0: SanDisk SSD i110 16GB ATA-9 Hard-Disk (14566 MiBytes) 4. Payload [setup] 5. Payload [memtest] t. TPM Configuration TPM Configuration option appears when TPM is connected and initialized and can be entered via t key. TPM Configuration menu TPM Configuration menu consists of two options beginning from rel-1.12.1.1 SeaBIOS release : 1. Clear TPM 2. Change active PCR banks If no change is desired or if this menu was reached by mistake, press ESC to reboot the machine. Clear TPM option Clearing TPM is a reset operation for TPM which does the following: resets TPM to the default state clears TPM ownership clears the TPM stored keys, passwords and certificates Taking ownership of TPM will be possible in OS after clearing. This option may be useful when the state of firmware changes and TPM cannot release its secrets due to different Platform Configuration Registers (PCR) or the OS is unbootable if the disk is encrypted and configured to auto-decrypt with TPM. Choosing the clear option with 1 key will cause to print the TPM configuration menu again without any confirmation of success. The option is available since SeaBIOS rel-1.12.0.1. Change active PCR banks This option is available since SeaBIOS rel-1.12.1.1. What this option does is to enable certain PCR banks according to user choice. TPM2.0 chips, comparing to TPM1.2, have two different PCR banks able to store digests of different algorithms: SHA1 and SHA256. TPM1.2 modules have only SHA1 banks for PCRs. To enable or disable the banks choose option 2 in the TPM configuration menu by typing 2 key: Toggle active PCR banks by pressing number key 1: SHA1 (enabled) 2: SHA256 (enabled) ESC: return to previous menu without changes A : activate selection Both banks should be enabled by default. To change the state of one type of bank types the number referring to the desired bank to toggle the state. For example to disable SHA1 banks, type 1 : Toggle active PCR banks by pressing number key 1: SHA1 2: SHA256 (enabled) ESC: return to previous menu without changes A : activate selection The (enabled) string should disappear, but the state has not yet been applied to the TPM. Now, one has two choices: abort the changes by pressing ESC key, the SeaBIOS will return to the first TPM menu or apply the changes by pressing A key, the SeaBIOS will have to reboot the platform to make changes to TPM. uppercase or lowercase does not matter When pressed ESC key and then entered the PCR bank configuration again, one should see that nothing has changed: Toggle active PCR banks by pressing number key 1: SHA1 (enabled) 2: SHA256 (enabled) ESC: return to previous menu without changes A : activate selection But when A key was pressed, the platform reboots. After reboot one may verify if the changes were applied correctly by entering the TPM configuration and then PCR banks configuration: t. TPM Configuration 1. Clear TPM 2. Change active PCR banks If no change is desired or if this menu was reached by mistake, press ESC to reboot the machine. Toggle active PCR banks by pressing number key 1: SHA1 2: SHA256 (enabled) ESC: return to previous menu without changes A : activate selection Note that at least one type of banks has to be enabled when toggling both bank types to be disabled, the A : activate selection option disappears and does not allow to apply invalid changes: Toggle active PCR banks by pressing number key 1: SHA1 2: SHA256 ESC: return to previous menu without changes In such case, one can only return to the previous menu by pressing ESC key. To reenable the PCR banks follow the same procedure as with disabling, but apply changes when (enabled) string is printed alongside desired type of banks to be enabled. Verification In order to verify whether the PCR banks were actually disabled, one may run tpm2_pcrlist command from tpm2-tools . The dependencies involved in building tpm2-tools are rather complex so it is advised to use a dockerized environment for tpm2-tools which 3mdeb has developed for convenient use of the tool. The source is available on 3mdeb GitHub . Example execution of tpm2-tools tpm_pcrlist command with disabled SHA1 banks: sha1: sha256: 0 : 0xD27CC12614B5F4FF85ED109495E320FB1E5495EB28D507E952D51091E7AE2A72 1 : 0x9CEF4FA7928AD1428CE025EA36BE8C26B4350C6CB50F5D8AAE97AE89E4156EE9 2 : 0xB38B591AF21E993E34333858293D2AC82FDF6E2D169B1415BF981A4BE0FFD283 3 : 0xD27CC12614B5F4FF85ED109495E320FB1E5495EB28D507E952D51091E7AE2A72 4 : 0xEEA509AA8A7554B7B4040C44A580660923246633B3593D0547D4FD52841971E0 5 : 0xD27CC12614B5F4FF85ED109495E320FB1E5495EB28D507E952D51091E7AE2A72 6 : 0xD27CC12614B5F4FF85ED109495E320FB1E5495EB28D507E952D51091E7AE2A72 7 : 0xD27CC12614B5F4FF85ED109495E320FB1E5495EB28D507E952D51091E7AE2A72 8 : 0x0000000000000000000000000000000000000000000000000000000000000000 9 : 0x0000000000000000000000000000000000000000000000000000000000000000 10: 0x0000000000000000000000000000000000000000000000000000000000000000 11: 0x0000000000000000000000000000000000000000000000000000000000000000 12: 0x0000000000000000000000000000000000000000000000000000000000000000 13: 0x0000000000000000000000000000000000000000000000000000000000000000 14: 0x0000000000000000000000000000000000000000000000000000000000000000 15: 0x0000000000000000000000000000000000000000000000000000000000000000 16: 0x0000000000000000000000000000000000000000000000000000000000000000 17: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF 18: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF 19: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF 20: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF 21: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF 22: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF 23: 0x0000000000000000000000000000000000000000000000000000000000000000 Notice that SHA1 PCRs were not printed due to their unavailability. Currently SeaBIOS fills following PCRs: 1, 2 and 4. The rest of the banks is filled with default values. The same applies to SHA1 PCRs. This will change in the future with the introduction of the measured boot. The TPM configuration menu is planned to be extended in the future. For other TPM features and utilisation, one may use tpm2-tools .","title":"Tpm menu"},{"location":"tpm_menu/#seabios-tpm-configuration-menu","text":"Since SeaBIOS rel-1.12.0.1 TPM 2.0 module from PC Engines is supported on apu2 and apu1 platforms (and apu5 where the chip may be soldered down depending on BOM option) in the payload as a configuration menu. When entering the boot menu on serial console via F10 key, one may notice an additional option when TPM module is connected to LPC header: SeaBIOS (version rel-1.12.0.1-15-g8993894) Press F10 key now for boot menu Select boot device: 1. USB MSC Drive Kingston DataTraveler 3.0 PMAP 2. SD card SB16G 15193MiB 3. AHCI/0: SanDisk SSD i110 16GB ATA-9 Hard-Disk (14566 MiBytes) 4. Payload [setup] 5. Payload [memtest] t. TPM Configuration TPM Configuration option appears when TPM is connected and initialized and can be entered via t key.","title":"SeaBIOS TPM configuration menu"},{"location":"tpm_menu/#tpm-configuration-menu","text":"TPM Configuration menu consists of two options beginning from rel-1.12.1.1 SeaBIOS release : 1. Clear TPM 2. Change active PCR banks If no change is desired or if this menu was reached by mistake, press ESC to reboot the machine.","title":"TPM Configuration menu"},{"location":"tpm_menu/#clear-tpm-option","text":"Clearing TPM is a reset operation for TPM which does the following: resets TPM to the default state clears TPM ownership clears the TPM stored keys, passwords and certificates Taking ownership of TPM will be possible in OS after clearing. This option may be useful when the state of firmware changes and TPM cannot release its secrets due to different Platform Configuration Registers (PCR) or the OS is unbootable if the disk is encrypted and configured to auto-decrypt with TPM. Choosing the clear option with 1 key will cause to print the TPM configuration menu again without any confirmation of success. The option is available since SeaBIOS rel-1.12.0.1.","title":"Clear TPM option"},{"location":"tpm_menu/#change-active-pcr-banks","text":"This option is available since SeaBIOS rel-1.12.1.1. What this option does is to enable certain PCR banks according to user choice. TPM2.0 chips, comparing to TPM1.2, have two different PCR banks able to store digests of different algorithms: SHA1 and SHA256. TPM1.2 modules have only SHA1 banks for PCRs. To enable or disable the banks choose option 2 in the TPM configuration menu by typing 2 key: Toggle active PCR banks by pressing number key 1: SHA1 (enabled) 2: SHA256 (enabled) ESC: return to previous menu without changes A : activate selection Both banks should be enabled by default. To change the state of one type of bank types the number referring to the desired bank to toggle the state. For example to disable SHA1 banks, type 1 : Toggle active PCR banks by pressing number key 1: SHA1 2: SHA256 (enabled) ESC: return to previous menu without changes A : activate selection The (enabled) string should disappear, but the state has not yet been applied to the TPM. Now, one has two choices: abort the changes by pressing ESC key, the SeaBIOS will return to the first TPM menu or apply the changes by pressing A key, the SeaBIOS will have to reboot the platform to make changes to TPM. uppercase or lowercase does not matter When pressed ESC key and then entered the PCR bank configuration again, one should see that nothing has changed: Toggle active PCR banks by pressing number key 1: SHA1 (enabled) 2: SHA256 (enabled) ESC: return to previous menu without changes A : activate selection But when A key was pressed, the platform reboots. After reboot one may verify if the changes were applied correctly by entering the TPM configuration and then PCR banks configuration: t. TPM Configuration 1. Clear TPM 2. Change active PCR banks If no change is desired or if this menu was reached by mistake, press ESC to reboot the machine. Toggle active PCR banks by pressing number key 1: SHA1 2: SHA256 (enabled) ESC: return to previous menu without changes A : activate selection Note that at least one type of banks has to be enabled when toggling both bank types to be disabled, the A : activate selection option disappears and does not allow to apply invalid changes: Toggle active PCR banks by pressing number key 1: SHA1 2: SHA256 ESC: return to previous menu without changes In such case, one can only return to the previous menu by pressing ESC key. To reenable the PCR banks follow the same procedure as with disabling, but apply changes when (enabled) string is printed alongside desired type of banks to be enabled.","title":"Change active PCR banks"},{"location":"tpm_menu/#verification","text":"In order to verify whether the PCR banks were actually disabled, one may run tpm2_pcrlist command from tpm2-tools . The dependencies involved in building tpm2-tools are rather complex so it is advised to use a dockerized environment for tpm2-tools which 3mdeb has developed for convenient use of the tool. The source is available on 3mdeb GitHub . Example execution of tpm2-tools tpm_pcrlist command with disabled SHA1 banks: sha1: sha256: 0 : 0xD27CC12614B5F4FF85ED109495E320FB1E5495EB28D507E952D51091E7AE2A72 1 : 0x9CEF4FA7928AD1428CE025EA36BE8C26B4350C6CB50F5D8AAE97AE89E4156EE9 2 : 0xB38B591AF21E993E34333858293D2AC82FDF6E2D169B1415BF981A4BE0FFD283 3 : 0xD27CC12614B5F4FF85ED109495E320FB1E5495EB28D507E952D51091E7AE2A72 4 : 0xEEA509AA8A7554B7B4040C44A580660923246633B3593D0547D4FD52841971E0 5 : 0xD27CC12614B5F4FF85ED109495E320FB1E5495EB28D507E952D51091E7AE2A72 6 : 0xD27CC12614B5F4FF85ED109495E320FB1E5495EB28D507E952D51091E7AE2A72 7 : 0xD27CC12614B5F4FF85ED109495E320FB1E5495EB28D507E952D51091E7AE2A72 8 : 0x0000000000000000000000000000000000000000000000000000000000000000 9 : 0x0000000000000000000000000000000000000000000000000000000000000000 10: 0x0000000000000000000000000000000000000000000000000000000000000000 11: 0x0000000000000000000000000000000000000000000000000000000000000000 12: 0x0000000000000000000000000000000000000000000000000000000000000000 13: 0x0000000000000000000000000000000000000000000000000000000000000000 14: 0x0000000000000000000000000000000000000000000000000000000000000000 15: 0x0000000000000000000000000000000000000000000000000000000000000000 16: 0x0000000000000000000000000000000000000000000000000000000000000000 17: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF 18: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF 19: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF 20: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF 21: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF 22: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF 23: 0x0000000000000000000000000000000000000000000000000000000000000000 Notice that SHA1 PCRs were not printed due to their unavailability. Currently SeaBIOS fills following PCRs: 1, 2 and 4. The rest of the banks is filled with default values. The same applies to SHA1 PCRs. This will change in the future with the introduction of the measured boot. The TPM configuration menu is planned to be extended in the future. For other TPM features and utilisation, one may use tpm2-tools .","title":"Verification"},{"location":"tpm_pin_mapping/","text":"Pin mapping APU3/4 TPM1a 1 ( LFRAME ) 11 2 ( LAD3 ) 9 3 ( LAD2 ) 7 4 ( LAD1 ) 5 5 ( LAD0 ) 3 6 ( GND ) 2, 4, 6, 8, 10, 12, 17 7 ( LPCRST ) 13 8 ( LPCCLK1 ) 1 9 ( V3 ) 18 TPM1a At least one pin of no. 2, 4, 6, 8, 10, 12 and 17 should be connected to GND and pin no. 18 should be connected to V3 . Pins no. 14, 15, 16, 19 and 20 stay unconnected. APU3/4 Pin no. 6 should be connected to GND and pin no. 9 should be connected to V3 . Important! It should be noticed, that the LPC debug holes on apu board are much smaller, so regular pin header will not fit there.","title":"Pin mapping"},{"location":"tpm_pin_mapping/#pin-mapping","text":"APU3/4 TPM1a 1 ( LFRAME ) 11 2 ( LAD3 ) 9 3 ( LAD2 ) 7 4 ( LAD1 ) 5 5 ( LAD0 ) 3 6 ( GND ) 2, 4, 6, 8, 10, 12, 17 7 ( LPCRST ) 13 8 ( LPCCLK1 ) 1 9 ( V3 ) 18","title":"Pin mapping"},{"location":"tpm_pin_mapping/#tpm1a","text":"At least one pin of no. 2, 4, 6, 8, 10, 12 and 17 should be connected to GND and pin no. 18 should be connected to V3 . Pins no. 14, 15, 16, 19 and 20 stay unconnected.","title":"TPM1a"},{"location":"tpm_pin_mapping/#apu34","text":"Pin no. 6 should be connected to GND and pin no. 9 should be connected to V3 .","title":"APU3/4"},{"location":"tpm_pin_mapping/#important","text":"It should be noticed, that the LPC debug holes on apu board are much smaller, so regular pin header will not fit there.","title":"Important!"},{"location":"voyage_image_building_alix/","text":"Building Voyage Linux image for PC Engines ALIX platforms Intro Example DIRECTORY_TO_CF_CARD_DEVICE used in following instructions: /dev/sdc Voyage Linux image downloaded from http://pcengines.ch website has no flashrom and cbmem installed Voyage Linux kernel of image downloaded from http://pcengines.ch website has CONFIG_CPU_FREQ option not set, which could be required for coreboot 4.7.x Linux Voyage default login/password: root/voyage Linux Voyage default serial console baudrate: 38400 Requirements Compact Flash with a minimum of 1 GB of memory Compact Flash card reader Flashing CF card with Voyage Linux image from http://pcengines.ch Download Voyage Linux image for Alix platforms . Unmount all mounted in OS partitions of used CF card: sudo umount <DIRECTORY_TO_CF_CARD_DEVICE>* Eg.: sudo umount /dev/sdc* Unzip downloaded file and Flash your CF flash with unzipped image: unzip -p voyage-0.9.2.img | pv | sudo dd of=<DIRECTORY_TO_CF_CARD_DEVICE> bs=16M Eg.: unzip -p voyage-0.9.2.img | pv | sudo dd of=/dev/sdc bs=16M After succesful CF card flashing information similar to shown below may appear: 60+1 records in 60+1 records out 1014644736 bytes (1.0 GB, 968 MiB) copied, 32.4125 s, 31.3 MB/s But you still may check that data copying process has been finished. To check that type in a new terminal or terminal tab: watch grep -e Dirty: -e Writeback: /proc/meminfo Then type in the first terminal command which cause cache dropping to device: sync and wait until sync process end. After that Dirty and Writeback values should be near the 0 value. Now you can safety remove your CF card. It's important to not interrupt the flashing process. After successful performing steps shown above, Voyage Linux image may be installed on your CF card. cbmem and flashrom installation Boot to your OS and follow steps contained in the following instructions: cbmem installation flashrom installation Changing serial console baudrate To change serial console baudrate to custom value follow steps contained in this instruction . Voyage Linux kernel modification There is possibility to change kernel configuration without building new Voyage Linux image. To do that you can use debian packages. Check your kernel version on the target device after booting to OS: uname -r Example output 3.14.12-voyage That means that kernel version is 3.14.12 . Find and download the same version of kernel from (https://www.kernel.org/). Eg. for 3.14.12 is could be 3.14.X version when X >= 12 . Then extract the downloaded archive with kernel files. Transfer config file from target device /boot directory to your PC. It should be named similar to config-3.14.12-voyage . Rename config file to .config and place in the directory where extracted kernel files are placed. Run docker container: docker run --rm -v ${PWD}:/workdir -t -i pc-engines/apu2 bash If you don't have pc-engines/apu2 environment built follow this instruction . Read old config file: make oldconfig You can be asked there for some kernel setting. Set them as you need. Run configuration menu and enable desired kernel elements: make menuconfig Build kernel: make CPUS=$(nproc) Build debian packages: make deb-pkg CPUS=$(nproc) Created packages should be in the directory one level above. Find package with image in name (eg. linux-image-3.10.107_3.10.107-2_i386.deb ) and send it to the target device. Install packages on the target device: dpkg -i <name of image package> Eg. dpkg -i linux-image-3.10.107_3.10.107-2_i386.deb That process changes grub configuration. It adds new positions on grub menu list. Often serial console redirection is disabled. To change this follow this instruction . After reboot system with updated kernel will be on the Grub menu list. It will have kernel version contained within the name.","title":"Voyage image building alix"},{"location":"voyage_image_building_alix/#building-voyage-linux-image-for-pc-engines-alix-platforms","text":"","title":"Building Voyage Linux image for PC Engines ALIX platforms"},{"location":"voyage_image_building_alix/#intro","text":"Example DIRECTORY_TO_CF_CARD_DEVICE used in following instructions: /dev/sdc Voyage Linux image downloaded from http://pcengines.ch website has no flashrom and cbmem installed Voyage Linux kernel of image downloaded from http://pcengines.ch website has CONFIG_CPU_FREQ option not set, which could be required for coreboot 4.7.x Linux Voyage default login/password: root/voyage Linux Voyage default serial console baudrate: 38400","title":"Intro"},{"location":"voyage_image_building_alix/#requirements","text":"Compact Flash with a minimum of 1 GB of memory Compact Flash card reader","title":"Requirements"},{"location":"voyage_image_building_alix/#flashing-cf-card-with-voyage-linux-image-from-httppcenginesch","text":"Download Voyage Linux image for Alix platforms . Unmount all mounted in OS partitions of used CF card: sudo umount <DIRECTORY_TO_CF_CARD_DEVICE>* Eg.: sudo umount /dev/sdc* Unzip downloaded file and Flash your CF flash with unzipped image: unzip -p voyage-0.9.2.img | pv | sudo dd of=<DIRECTORY_TO_CF_CARD_DEVICE> bs=16M Eg.: unzip -p voyage-0.9.2.img | pv | sudo dd of=/dev/sdc bs=16M After succesful CF card flashing information similar to shown below may appear: 60+1 records in 60+1 records out 1014644736 bytes (1.0 GB, 968 MiB) copied, 32.4125 s, 31.3 MB/s But you still may check that data copying process has been finished. To check that type in a new terminal or terminal tab: watch grep -e Dirty: -e Writeback: /proc/meminfo Then type in the first terminal command which cause cache dropping to device: sync and wait until sync process end. After that Dirty and Writeback values should be near the 0 value. Now you can safety remove your CF card. It's important to not interrupt the flashing process. After successful performing steps shown above, Voyage Linux image may be installed on your CF card.","title":"Flashing CF card with Voyage Linux image from http://pcengines.ch"},{"location":"voyage_image_building_alix/#cbmem-and-flashrom-installation","text":"Boot to your OS and follow steps contained in the following instructions: cbmem installation flashrom installation","title":"cbmem and flashrom installation"},{"location":"voyage_image_building_alix/#changing-serial-console-baudrate","text":"To change serial console baudrate to custom value follow steps contained in this instruction .","title":"Changing serial console baudrate"},{"location":"voyage_image_building_alix/#voyage-linux-kernel-modification","text":"There is possibility to change kernel configuration without building new Voyage Linux image. To do that you can use debian packages. Check your kernel version on the target device after booting to OS: uname -r Example output 3.14.12-voyage That means that kernel version is 3.14.12 . Find and download the same version of kernel from (https://www.kernel.org/). Eg. for 3.14.12 is could be 3.14.X version when X >= 12 . Then extract the downloaded archive with kernel files. Transfer config file from target device /boot directory to your PC. It should be named similar to config-3.14.12-voyage . Rename config file to .config and place in the directory where extracted kernel files are placed. Run docker container: docker run --rm -v ${PWD}:/workdir -t -i pc-engines/apu2 bash If you don't have pc-engines/apu2 environment built follow this instruction . Read old config file: make oldconfig You can be asked there for some kernel setting. Set them as you need. Run configuration menu and enable desired kernel elements: make menuconfig Build kernel: make CPUS=$(nproc) Build debian packages: make deb-pkg CPUS=$(nproc) Created packages should be in the directory one level above. Find package with image in name (eg. linux-image-3.10.107_3.10.107-2_i386.deb ) and send it to the target device. Install packages on the target device: dpkg -i <name of image package> Eg. dpkg -i linux-image-3.10.107_3.10.107-2_i386.deb That process changes grub configuration. It adds new positions on grub menu list. Often serial console redirection is disabled. To change this follow this instruction . After reboot system with updated kernel will be on the Grub menu list. It will have kernel version contained within the name.","title":"Voyage Linux kernel modification"},{"location":"voyage_linux_netinst/","text":"Configuring Voyage Linux netinst Prepare image Get the live CD from here Then mount it wherever You like: mount -o loop voyage-0.11.0_amd64.iso /mnt/dir Extract to nfs exported directory: cp -rp /mnt/dir /path/to/nfs/dir Prepare PXE Modify PXE menu.cfg: voyage/ directory is a directory in tftp path on tftp server. Also remember to change IP of the nfsroot server label voyage menu label ^Voyage-netinst kernel voyage/vmlinuz append initrd=voyage/initrd.img boot=live netboot=nfs root=/dev/nfs rw ip=dhcp nfsroot=192.168.0.109:/home/miczyg/nfs --- console=ttyS0,115200 earlyprint=seria l,ttyS0,115200 Copy the vmlinuz and initrd.img to /path/to/tftpboot/voyage Installation on target APU2 Boot APU with iPXE and choose the correct option in menu. Log in as root with password voyage and run: /usr/local/sbin/voyage.update Follow steps in Voyage Linux install section 4. I assume that any SD card, USB drive etc. is plugged in APU Now Voyage Linux is installed to the drive chosen in installation process. Reboot APU and choose to boot from this drive.","title":"Configuring Voyage Linux netinst"},{"location":"voyage_linux_netinst/#configuring-voyage-linux-netinst","text":"","title":"Configuring Voyage Linux netinst"},{"location":"voyage_linux_netinst/#prepare-image","text":"Get the live CD from here Then mount it wherever You like: mount -o loop voyage-0.11.0_amd64.iso /mnt/dir Extract to nfs exported directory: cp -rp /mnt/dir /path/to/nfs/dir","title":"Prepare image"},{"location":"voyage_linux_netinst/#prepare-pxe","text":"Modify PXE menu.cfg: voyage/ directory is a directory in tftp path on tftp server. Also remember to change IP of the nfsroot server label voyage menu label ^Voyage-netinst kernel voyage/vmlinuz append initrd=voyage/initrd.img boot=live netboot=nfs root=/dev/nfs rw ip=dhcp nfsroot=192.168.0.109:/home/miczyg/nfs --- console=ttyS0,115200 earlyprint=seria l,ttyS0,115200 Copy the vmlinuz and initrd.img to /path/to/tftpboot/voyage","title":"Prepare PXE"},{"location":"voyage_linux_netinst/#installation-on-target-apu2","text":"Boot APU with iPXE and choose the correct option in menu. Log in as root with password voyage and run: /usr/local/sbin/voyage.update Follow steps in Voyage Linux install section 4. I assume that any SD card, USB drive etc. is plugged in APU Now Voyage Linux is installed to the drive chosen in installation process. Reboot APU and choose to boot from this drive.","title":"Installation on target APU2"},{"location":"voyage_linux_sd_card_install/","text":"Flashing current voyage linux on SD card. The problem with installing voyage on SD card is that the script voyage.update accepts only integers as partition numbers, while partition numbers for SD card are p1 , p2 etc. (i.e /dev/mmcblk0p1 ). The workaround is to use SD card USB adapter. Thanks to this, card is seen as /dev/sdb , partitions: /dev/sdb1 etc. Prepare current voyage linux live USB. Boot from live USB. If connected through serial port: highlight voyage linux in boot menu, press TAB , remove quiet and add instead: console=ttyS0,115200n8 After successful boot, connect to device using ssh . ssh root@<dev_ip_addr> Navigate to root directory and run installing script: ./usr/local/sbin/voyage.update Follow those steps: Create new Voyage Linux disk Set Voyage Linux directory to / Select target profile: 9 (APU2) Select target disk: /dev/sdb Partition for the Voyage system: 1 Leave mounting point as default ( /mnt/cf ). Create it if doesn't exist. Select grub as Bootstrap Loader Partition for Bootstrap Loader: 1 Terminal type: 1 - serial terminal Speed: default - 115200 Select: Partition flash media and create file system Proceed with copy distrubution to target Check if configuration details are correct and continue (y) Exit (8) after successful installation Check if system is booting from SD card properly. It worked fine when using SanDisk Ultra 8GB. However, on Samsung Evo 16 GB boot process failed and it was required to install grub manually using grub-install : mkdir tmp mount /dev/mmcblk0p1 tmp grub-install --root-directory=tmp /dev/mmcblk0 It is advised to fill an empty space of SD card with zeroes. It will cause the compression process run faster. Before shutting down platform execute following command. Note that this process may take up to one hour. dd if=/dev/zero of=tmp && rm tmp Saving image for further reuse: sudo dd if=/dev/mmcblk0 of=current_voyage_linux_28062016.img bs=16M","title":"Voyage linux sd card install"},{"location":"voyage_linux_sd_card_install/#flashing-current-voyage-linux-on-sd-card","text":"The problem with installing voyage on SD card is that the script voyage.update accepts only integers as partition numbers, while partition numbers for SD card are p1 , p2 etc. (i.e /dev/mmcblk0p1 ). The workaround is to use SD card USB adapter. Thanks to this, card is seen as /dev/sdb , partitions: /dev/sdb1 etc. Prepare current voyage linux live USB. Boot from live USB. If connected through serial port: highlight voyage linux in boot menu, press TAB , remove quiet and add instead: console=ttyS0,115200n8 After successful boot, connect to device using ssh . ssh root@<dev_ip_addr> Navigate to root directory and run installing script: ./usr/local/sbin/voyage.update Follow those steps: Create new Voyage Linux disk Set Voyage Linux directory to / Select target profile: 9 (APU2) Select target disk: /dev/sdb Partition for the Voyage system: 1 Leave mounting point as default ( /mnt/cf ). Create it if doesn't exist. Select grub as Bootstrap Loader Partition for Bootstrap Loader: 1 Terminal type: 1 - serial terminal Speed: default - 115200 Select: Partition flash media and create file system Proceed with copy distrubution to target Check if configuration details are correct and continue (y) Exit (8) after successful installation Check if system is booting from SD card properly. It worked fine when using SanDisk Ultra 8GB. However, on Samsung Evo 16 GB boot process failed and it was required to install grub manually using grub-install : mkdir tmp mount /dev/mmcblk0p1 tmp grub-install --root-directory=tmp /dev/mmcblk0 It is advised to fill an empty space of SD card with zeroes. It will cause the compression process run faster. Before shutting down platform execute following command. Note that this process may take up to one hour. dd if=/dev/zero of=tmp && rm tmp Saving image for further reuse: sudo dd if=/dev/mmcblk0 of=current_voyage_linux_28062016.img bs=16M","title":"Flashing current voyage linux on SD card."},{"location":"debug/AGESA/","text":"Commit MullinsPI version BinaryPI version Internal graphics Comments Path Log 8ad2d6385652 1.0.0.3 - off boots OK - current mainline settings for APU2 blobs/mainboard/pcengines/apu2/AGESA.bin 8ad2d6385652 1.0.0.A 1.1 off boot loop blobs/pi/amd/00730F01/FT3b http://81.95.197.197:7777/inixixexof.sql 8ad2d6385652 1.0.0.A 1.1 on boot loop blobs/pi/amd/00730F01/FT3b http://81.95.197.197:7777/oluxosaqin.sql 95b80508d9ba 1.0.0.4 1.0 off boot loop blobs/pi/amd/00730F01/FT3b http://81.95.197.197:7777/fabemomuxu.sql 95b80508d9ba 1.0.0.4 1.0 on boot loop blobs/pi/amd/00730F01/FT3b http://81.95.197.197:7777/kopopenacu.sql 571952f6d41f4 1.0.0.3 - off boots OK blobs/pi/amd/00730F01/FT3b 571952f6d41f4 1.0.0.3 - on boots OK blobs/pi/amd/00730F01/FT3b internal graphics on = device pci 1.0 on end # Internal Graphics P2P bridge 0x9804","title":"AGESA"},{"location":"debug/alix3d2_issue/","text":"Issue description of PC Engines ALIX2D3 board Problem description There is no possibility to get feedback from PC Engines ALIX.2D3. Boot logs are not send by serial connection and OS installed on CF card doesn't boot. Checked configurations Comparison with another ALIX.2D3 platform (correctly working board): There was no visible differences in appearance beetwen compared boards. They seems to have got the same peripherals. Tried to boot both platforms with the same CF card with Voyage Linux installed. Working platform booted to OS, booting logs were sent by serial console and device was visible on DHCP clients list of network to which device was connected. Not working platform didn't send any feedback by serial console. Device didn't appear on DHCP clients list of network to which device was connected. Both platforms don't boot OS from USB. LPC ROM image with tinyBIOS v.099m usage: Working ALIX.2D3 platform booted correctly to the OS with LPC ROM image connected to the LPC socket. Sent booting logs by serial connection and appeared on DHCP client list. Not working ALIX.2D3 board didn't send any feedback by serial console. Device didn't appear on DHCP clients list of network to which device was connected. Shorting of S1 switch pads: There is no switch on tested ALIX board. In case of a situation when the serial port is disabled pads of S1 where shorted to enter to the boot configuration menu as is written in manual on page 11 . This operation did not produce results. Output didn't show in serial console. Different power supply voltages: Tested power supply voltages: 12 V, 18 V. There was no difference in operation of boards (working ALIX3D2 worked correctly, not good board didn't start to work). Conclusion Taking into account the information given above it seems to be hardware issue.","title":"Alix3d2 issue"},{"location":"debug/alix3d2_issue/#issue-description-of-pc-engines-alix2d3-board","text":"","title":"Issue description of PC Engines ALIX2D3 board"},{"location":"debug/alix3d2_issue/#problem-description","text":"There is no possibility to get feedback from PC Engines ALIX.2D3. Boot logs are not send by serial connection and OS installed on CF card doesn't boot.","title":"Problem description"},{"location":"debug/alix3d2_issue/#checked-configurations","text":"Comparison with another ALIX.2D3 platform (correctly working board): There was no visible differences in appearance beetwen compared boards. They seems to have got the same peripherals. Tried to boot both platforms with the same CF card with Voyage Linux installed. Working platform booted to OS, booting logs were sent by serial console and device was visible on DHCP clients list of network to which device was connected. Not working platform didn't send any feedback by serial console. Device didn't appear on DHCP clients list of network to which device was connected. Both platforms don't boot OS from USB. LPC ROM image with tinyBIOS v.099m usage: Working ALIX.2D3 platform booted correctly to the OS with LPC ROM image connected to the LPC socket. Sent booting logs by serial connection and appeared on DHCP client list. Not working ALIX.2D3 board didn't send any feedback by serial console. Device didn't appear on DHCP clients list of network to which device was connected. Shorting of S1 switch pads: There is no switch on tested ALIX board. In case of a situation when the serial port is disabled pads of S1 where shorted to enter to the boot configuration menu as is written in manual on page 11 . This operation did not produce results. Output didn't show in serial console. Different power supply voltages: Tested power supply voltages: 12 V, 18 V. There was no difference in operation of boards (working ALIX3D2 worked correctly, not good board didn't start to work).","title":"Checked configurations"},{"location":"debug/alix3d2_issue/#conclusion","text":"Taking into account the information given above it seems to be hardware issue.","title":"Conclusion"},{"location":"debug/cpu_frequency/","text":"Debug notes for CPU frequency issues GitHub issue Most of information is taken from BKDG , unless noted otherwise. Reproducing the issue Steps described in linked GitHub issue were used. For some reason, our installation of pfSense doesn't include cpuctl module, so turbostat didn't work at all. According to its source code, the Bzy_MHz field shows real CPU frequency. It is counted as ratio of clock ticks of CPU divided by clock ticks of P0 as a reference over some period of time, and scaled appropriately. It is thus a good measurement of real CPU frequency. Another approach was to indirectly compare CPU frequencies by comparing bogo ops from stress-ng . This method can give different results depending on system load or interrupts, but can be used as an approximation. In our tests, bogo ops after the issue occurred were slightly lower than those reported on GitHub (1250-1350 vs. 1407), however they were definitely lower than when the issue did not happen (~1950). This was mostly consistent with what was described on GitHub when it comes to triggering this issue. However, after a couple of days we couldn't reproduce this anymore, no matter which platform or firmware version was used. Every test showed high bogo ops value (1900-2050), with no difference after a couple of days of runtime and different ways of starting the system (cold boot, warm boot, reset, reboot from pfSense and another operating system). P-states AMD processors have 2 sets of P-state numeration: software and hardware. They both start with P0 being highest-performance accessible, but hardware P0 isn't the same as software P0. On the software side additional boost states (Pb0, Pb1) are used. All boosted P-states are always higher performance than non-boosted P-states. Hardware P0 is software Pb0. Rest of states is mapped 1-to-1, with the same names corresponding to different states, which can be confusing. Number of boost states is written in D18F4x15C[NumBoostStates] , in case of apu it is 2. BIOS should not provide ACPI _PSS entries for boosted P-states. Boost states cannot be requested directly, some conditions that must be met: P0 (software) requested boost enabled (i.e. boost states exist and not disabled in MSRC001_0015[CpbDis] , this bit is clear in our case so boost isn't disabled here) actual demand on CPU no upper limit set ( D18F4x13C[SmuPstateLimit] , set as 0 so no limit) additional hardware limits (these values vary, most of them is set by AGESA): temperature (temperature limit is set in D18F3x64 as 105 \u00b0C) TDP - whole CPU (set as a dynamic in D18F3x1FC , there is a dead link to section 2.5.11.8 in BKDG) power consumption - individual cores (power required by core is also calculated or hard-coded in AGESA, but a P-state would be disabled if it were to require more power than a board can supply) CPU can temporarily go above the TDP for one core, given that enough of other cores are halted or waiting on IO operation. This is configured in D18F4x16C . Lower limits can be set in D18F3x64[HtcPstateLimit] , D18F3x68[SwPstateLimit] and D18F3xDC[HwPstateLimit] - all of these use hardware numeration. Also in BKDG among other limitations \"APML\" (Advanced Platform Management Link?) was mentioned with a dead link to D18F3xC4[PstateLimit] . There is a maximum of 8 states, but only 5 are used in apu: Software Hardware Frequency Register Pb0 P0 1.4 GHz MSRC001_0064 Pb1 P1 1.2 GHz MSRC001_0065 P0 P2 1.0 GHz MSRC001_0066 P1 P3 800 MHz MSRC001_0067 P2 P4 600 MHz MSRC001_0068 n/a n/a MSRC001_0069 n/a n/a MSRC001_006A n/a n/a MSRC001_006B Problem is that platform doesn't go back to 1.0 GHz, so it isn't probably connected to boost. However boost states were not observed despite no visible limits (except for dynamic TDP, not sufficiently described in BKDG). This could be due to the nature of checking for P-states - perhaps a function that reads registers uses IO operations which don't require computing power as much. Other MSRs directly connected to P-states: MSRC001_0061 - current P-state limit, P-state max value - read only. MSRC001_0062 - P-state control, write to this register requests a change. Actual change might not happen if it exceeds any of set limits or if another core on the same voltage/frequency domain uses different state. MSRC001_0063 - current P-state. Uses software numbering. May not be accurate after warm reset, if it happened during state change (might be connected to reboot issues). MSRC001_0071 - COFVID status. This register has fields describing real value of P-state, current P-state limit (2 in this case, so no boost is allowed), startup P-state, maximum frequency of CPU and NB, current frequency and voltage. All P-states here use hardware numbering. Values obtained from registers Values of the mentioned registers were read using BITS, lspci -xxxx (Debian) and pciconf (pfSense). pciconf doesn't allow to read registers above 0x100 (extended PCI configuration space) so D18F4 was not checked there. Also MSRs were only read and written with BITS - accessing them from OS would require a kernel module and could mess/get messed by power management of OS. Results seems to be consistent across different platforms (except for small voltage differences), OSes and warm/cold boots. Register Value Decoded D18F3x64 0x426a0025 HtcPstateLimit = 4 (low, HW) HtcHystLimit = 2 HtcTmpLimit = 0x6a = 105 \u00b0C HtcActSts = 1 processor entered HTC since reset HtcAct = 0 processor is not in HTC state currently HtcEn = 1 D18F3x68 0x40000000 SwPstateLimit = 4 (low, HW) SwPstateLimitEn = 0 D18F3xC4 0x00000000 mentioned but not described in BKDG D18F3xDC 0x68786400 NbsynPtrAdjPstate = 2 NbsynPtrAdjLo = 5 CacheFlushOnHaltTmr = 0xf NbsynPtrAdj = 6 HwPstateMaxVal = 4 (low, HW) D18F4x110 0x000c4014 MinResTmr = 0x62 = 98 CSampleTimer = 0x14 = 20 (~10 ms) D18F4x13C 0x00000001 SmuPstateLimitEn = 1 SmuPstateLimit = 0 (high, HW) D18F4x15C 0x00000189 BoostLock = 0 CstatePowerEn = 1 ApmMasterEn = 1 NumBoostStates = 2 BoostSrc = 1 use of Pb0 and Pb1 enabled D18F4x16C 0x000024bc CstateCores = 1 whether CstateCnt describes cores or compute units, 1 = cores CstateCnt = 2 how many cores/CUs need to be in CC6 for boosting others CstateBoost = 2 (HW) core needs to be in this P -state before being boosted ApmTdpLimitSts = 1 ApmTdpLimitIntEn = 1 TdpLimitDis = 1 D18F5x84 0x0e0ef003 DdrMaxRateEnf = 0xe DdrMaxRate = 0xe DctEn = 0xf CmpCap = 3 (4 cores) D18F5xE0 0x0000xxx1 RunAvgRange = 1 (interval = 40ms) bits marked with x are reserved, they change between reads MSRC001_0061 0x0000000000000020 CurPstateLimit = 0 (high, SW) PstateMaxVal = 2 (low, SW) MSRC001_0062 0x0000000000000000 PstateCmd = 0 see notes below MSRC001_0063 0x0000000000000000 CurPstate = 0 see notes below MSRC001_0064 0x8000025f0000b84c PstateEn = 1 IddDiv = 2 IddValue = 0x5f NbPstate = 0 CpuVid = 0x5c CpuDid = 1 (divide by 2) CpuFid = 0xc (COF = 1400 MHz) MSRC001_0065 0x8000024d0000c848 PstateEn = 1 IddDiv = 2 IddValue = 0x4d NbPstate = 0 CpuVid = 0x64 CpuDid = 1 (divide by 2) CpuFid = 8 (COF = 1200 MHz) MSRC001_0066 0x800002700000d844 PstateEn = 1 IddDiv = 2 IddValue = 0x70 NbPstate = 0 CpuVid = 0x6c CpuDid = 1 (divide by 2) CpuFid = 4 (COF = 1000 MHz) MSRC001_0067 0x8000025f0040e040 PstateEn = 1 IddDiv = 2 IddValue = 0x5f NbPstate = 1 CpuVid = 0x70 CpuDid = 1 (divide by 2) CpuFid = 0 (COF = 800 MHz) MSRC001_0068 0x8000024b0040ece0 PstateEn = 1 IddDiv = 2 IddValue = 0x4b NbPstate = 1 CpuVid = 0x76 CpuDid = 3 (divide by 8) CpuFid = 0x20 (COF = 600 MHz) MSRC001_0069 MSRC001_006A MSRC001_006B 0x000000000041fe00 PstateEn = 0 MSRC001_0071 0x3a1c00027442d844 MaxNbCof = 7 (700 MHz) CurPstateLimit = 2 (high, HW) MaxCpuCof = 0xe = 14 (1400 MHz) StartupPstate = 2 (HW) cold reset, may be different after reboot/reset CurNbVid = 0x74 NbPstateDis = 0 CurPstate = 2 (HW) see notes below CurCpuVid = 0x6c CurCpuDid = 1 CurCpuFid = 4 In the table SW means software numbering, HW - hardware. High limit means an upper limit on frequency (performance), lowest P-state number. COF (current operating frequency) is calculated as 100 * ((CpuFid + 0x10) / (2^CpuDid)) . Transitions between P-states were working as expected. To change P-state to the lower frequency following steps were taken: Write to MSRC001_0062 with requested, higher P-state number (SW). Read from MSRC001_0062 should return written state, as long as it is within limits. Read from MSRC001_0063 returns 0, MSRC001_0071 returns previous value - no P-state transition occurred because of frequency and voltage domains. Write to MSRC001_0062 of other cores. After all cores have requested change the actual P-state transition takes place. Reads from MSRC001_0063 and MSRC001_0071 return expected values. Changing P-state to higher performance results in immediate change, as frequency and voltage domains are tailored to the most demanding core. Actual frequency and/or voltage can be different than in the state pointed by CurPstate in MSRC001_0063 after a warm reset that occurred during plane transition. In this case current value can be that before or after transition. Firmware is required to transition the processor to valid COF and VID settings. This can be the source of some reboot problems, but it is hard to test in a reliable way - reset is asynchronous event that have to take place in very short amount of time during transition. Voltage regulator CPU communicates with voltage regulator using SVI2 (Serial VID Interface 2.0). Typically, after all frequency and voltage dependencies described above are resolved, transition to higher performance follows a sequence: SVI2 command is send to the voltage regulator, D18F5x12C[Svi2CmdBusy] is set. Voltage regulator sets the requested voltage, waits for it to stabilize and clears Svi2CmdBusy . After Svi2CmdBusy is clear frequency change is performed. Transition towards lower performance starts with frequency change and doesn't have to wait for it to finish before changing voltage. Because of these restrictions it is impossible for CPU to work with high frequency and too low voltage for that frequency. Multiple requests can be grouped: If multiple commands are issued that affect the P-state of a domain prior to when the processor initiates the change of the P-state of that domain, then the processor operates on the last one issued. Once a P-state change starts, the P-state state machine (PSSM) continues through completion unless interrupted by a PWROK deassertion. If multiple P-state changes are requested concurrently, the PSSM may group the associated VID changes separately from the associated COF changes. Setting D18F5x12C[WaitVidCompDis] changes behaviour of transition towards higher performance - instead of waiting for voltage regulator to report end of transition next request can be made after a defined time period ( D18F3xD8[VSRampSlamTime] ). BKDG recommends 2.00 \u03bcs per 15 mV, it is set as such by AGESA, but can be modified by OEM callouts. Findings from logs obtained from community Registers values from community revealed that CPU had voltage of (software) P0, but its frequency was stuck at a value of P2. Voltage change to P0 was requested but not reported as done by voltage regulator for some reason. It is possible that under certain circumstances an infinite loop occurs during boot - CPU is not requested to transition to P0 as its voltage already is equal to that of P0, so AGESA waits for frequency change to catch up, which doesn't happen. An explicit request to transition to P0 during boot could help with the other issue . It is unclear why some platforms are influenced and others are not. Maybe different batch of voltage regulator (chip U7 on the bottom side of board) was used? ACPI tables All required objects for P-states are present, even the optional _PPC . Only difference between actual tables and recommendations from BKDG is entry DUTY_WIDTH in Fixed ACPI Description Table (FADT) - AMD recommends value of 0, while real entry has 3. Description of this entry from ACPI specification : The bit width of the processor\u2019s duty cycle setting value in the P_CNT register. Each processor\u2019s duty cycle setting allows the software to select a nominal processor frequency below its absolute frequency as defined by: THTL_EN = 1 BF*DC/(2^DUTY_WIDTH) Where: BF \u2013 Base frequency DC \u2013 Duty cycle setting When THTL_EN is 0, the processor runs at its absolute BF. A DUTY_WIDTH value of 0 indicates that processor duty cycle is not supported and the processor continuously runs at its base frequency. C-states Only theoretical research on registers was done from C0, and everything seems to be correct. Practical research (i.e. transitions between states) is impossible, because when CPU is in lower C-state it doesn't process instructions and thus cannot report any of its register values. As for ACPI tables, we couldn't find _CRS object. P_LVL2_LAT showed a value 0f 0x65 = 101, which disables C2 state according to specification . First recorded value of this field actually showed 0x64 = 100, that is as specified in BKDG, but all subsequent logs show 0x65. This could either be an error with serial connection or this value did change, which could possibly explain sudden problems with reproducing. A look at the source code however shows that it is set as 0x65, against instructions from BKDG. If this value was indeed different it had to be set by some other agent (payload, OS, AGESA). Fix Setting D18F5x12C[WaitVidCompDis] resolved both this issue as well as problems with reboot. This bit is protected by D18F2x1B4[SmuCfgLock] after system or a payload starts, but is cleared during init.","title":"Debug notes for CPU frequency issues"},{"location":"debug/cpu_frequency/#debug-notes-for-cpu-frequency-issues","text":"GitHub issue Most of information is taken from BKDG , unless noted otherwise.","title":"Debug notes for CPU frequency issues"},{"location":"debug/cpu_frequency/#reproducing-the-issue","text":"Steps described in linked GitHub issue were used. For some reason, our installation of pfSense doesn't include cpuctl module, so turbostat didn't work at all. According to its source code, the Bzy_MHz field shows real CPU frequency. It is counted as ratio of clock ticks of CPU divided by clock ticks of P0 as a reference over some period of time, and scaled appropriately. It is thus a good measurement of real CPU frequency. Another approach was to indirectly compare CPU frequencies by comparing bogo ops from stress-ng . This method can give different results depending on system load or interrupts, but can be used as an approximation. In our tests, bogo ops after the issue occurred were slightly lower than those reported on GitHub (1250-1350 vs. 1407), however they were definitely lower than when the issue did not happen (~1950). This was mostly consistent with what was described on GitHub when it comes to triggering this issue. However, after a couple of days we couldn't reproduce this anymore, no matter which platform or firmware version was used. Every test showed high bogo ops value (1900-2050), with no difference after a couple of days of runtime and different ways of starting the system (cold boot, warm boot, reset, reboot from pfSense and another operating system).","title":"Reproducing the issue"},{"location":"debug/cpu_frequency/#p-states","text":"AMD processors have 2 sets of P-state numeration: software and hardware. They both start with P0 being highest-performance accessible, but hardware P0 isn't the same as software P0. On the software side additional boost states (Pb0, Pb1) are used. All boosted P-states are always higher performance than non-boosted P-states. Hardware P0 is software Pb0. Rest of states is mapped 1-to-1, with the same names corresponding to different states, which can be confusing. Number of boost states is written in D18F4x15C[NumBoostStates] , in case of apu it is 2. BIOS should not provide ACPI _PSS entries for boosted P-states. Boost states cannot be requested directly, some conditions that must be met: P0 (software) requested boost enabled (i.e. boost states exist and not disabled in MSRC001_0015[CpbDis] , this bit is clear in our case so boost isn't disabled here) actual demand on CPU no upper limit set ( D18F4x13C[SmuPstateLimit] , set as 0 so no limit) additional hardware limits (these values vary, most of them is set by AGESA): temperature (temperature limit is set in D18F3x64 as 105 \u00b0C) TDP - whole CPU (set as a dynamic in D18F3x1FC , there is a dead link to section 2.5.11.8 in BKDG) power consumption - individual cores (power required by core is also calculated or hard-coded in AGESA, but a P-state would be disabled if it were to require more power than a board can supply) CPU can temporarily go above the TDP for one core, given that enough of other cores are halted or waiting on IO operation. This is configured in D18F4x16C . Lower limits can be set in D18F3x64[HtcPstateLimit] , D18F3x68[SwPstateLimit] and D18F3xDC[HwPstateLimit] - all of these use hardware numeration. Also in BKDG among other limitations \"APML\" (Advanced Platform Management Link?) was mentioned with a dead link to D18F3xC4[PstateLimit] . There is a maximum of 8 states, but only 5 are used in apu: Software Hardware Frequency Register Pb0 P0 1.4 GHz MSRC001_0064 Pb1 P1 1.2 GHz MSRC001_0065 P0 P2 1.0 GHz MSRC001_0066 P1 P3 800 MHz MSRC001_0067 P2 P4 600 MHz MSRC001_0068 n/a n/a MSRC001_0069 n/a n/a MSRC001_006A n/a n/a MSRC001_006B Problem is that platform doesn't go back to 1.0 GHz, so it isn't probably connected to boost. However boost states were not observed despite no visible limits (except for dynamic TDP, not sufficiently described in BKDG). This could be due to the nature of checking for P-states - perhaps a function that reads registers uses IO operations which don't require computing power as much. Other MSRs directly connected to P-states: MSRC001_0061 - current P-state limit, P-state max value - read only. MSRC001_0062 - P-state control, write to this register requests a change. Actual change might not happen if it exceeds any of set limits or if another core on the same voltage/frequency domain uses different state. MSRC001_0063 - current P-state. Uses software numbering. May not be accurate after warm reset, if it happened during state change (might be connected to reboot issues). MSRC001_0071 - COFVID status. This register has fields describing real value of P-state, current P-state limit (2 in this case, so no boost is allowed), startup P-state, maximum frequency of CPU and NB, current frequency and voltage. All P-states here use hardware numbering.","title":"P-states"},{"location":"debug/cpu_frequency/#values-obtained-from-registers","text":"Values of the mentioned registers were read using BITS, lspci -xxxx (Debian) and pciconf (pfSense). pciconf doesn't allow to read registers above 0x100 (extended PCI configuration space) so D18F4 was not checked there. Also MSRs were only read and written with BITS - accessing them from OS would require a kernel module and could mess/get messed by power management of OS. Results seems to be consistent across different platforms (except for small voltage differences), OSes and warm/cold boots. Register Value Decoded D18F3x64 0x426a0025 HtcPstateLimit = 4 (low, HW) HtcHystLimit = 2 HtcTmpLimit = 0x6a = 105 \u00b0C HtcActSts = 1 processor entered HTC since reset HtcAct = 0 processor is not in HTC state currently HtcEn = 1 D18F3x68 0x40000000 SwPstateLimit = 4 (low, HW) SwPstateLimitEn = 0 D18F3xC4 0x00000000 mentioned but not described in BKDG D18F3xDC 0x68786400 NbsynPtrAdjPstate = 2 NbsynPtrAdjLo = 5 CacheFlushOnHaltTmr = 0xf NbsynPtrAdj = 6 HwPstateMaxVal = 4 (low, HW) D18F4x110 0x000c4014 MinResTmr = 0x62 = 98 CSampleTimer = 0x14 = 20 (~10 ms) D18F4x13C 0x00000001 SmuPstateLimitEn = 1 SmuPstateLimit = 0 (high, HW) D18F4x15C 0x00000189 BoostLock = 0 CstatePowerEn = 1 ApmMasterEn = 1 NumBoostStates = 2 BoostSrc = 1 use of Pb0 and Pb1 enabled D18F4x16C 0x000024bc CstateCores = 1 whether CstateCnt describes cores or compute units, 1 = cores CstateCnt = 2 how many cores/CUs need to be in CC6 for boosting others CstateBoost = 2 (HW) core needs to be in this P -state before being boosted ApmTdpLimitSts = 1 ApmTdpLimitIntEn = 1 TdpLimitDis = 1 D18F5x84 0x0e0ef003 DdrMaxRateEnf = 0xe DdrMaxRate = 0xe DctEn = 0xf CmpCap = 3 (4 cores) D18F5xE0 0x0000xxx1 RunAvgRange = 1 (interval = 40ms) bits marked with x are reserved, they change between reads MSRC001_0061 0x0000000000000020 CurPstateLimit = 0 (high, SW) PstateMaxVal = 2 (low, SW) MSRC001_0062 0x0000000000000000 PstateCmd = 0 see notes below MSRC001_0063 0x0000000000000000 CurPstate = 0 see notes below MSRC001_0064 0x8000025f0000b84c PstateEn = 1 IddDiv = 2 IddValue = 0x5f NbPstate = 0 CpuVid = 0x5c CpuDid = 1 (divide by 2) CpuFid = 0xc (COF = 1400 MHz) MSRC001_0065 0x8000024d0000c848 PstateEn = 1 IddDiv = 2 IddValue = 0x4d NbPstate = 0 CpuVid = 0x64 CpuDid = 1 (divide by 2) CpuFid = 8 (COF = 1200 MHz) MSRC001_0066 0x800002700000d844 PstateEn = 1 IddDiv = 2 IddValue = 0x70 NbPstate = 0 CpuVid = 0x6c CpuDid = 1 (divide by 2) CpuFid = 4 (COF = 1000 MHz) MSRC001_0067 0x8000025f0040e040 PstateEn = 1 IddDiv = 2 IddValue = 0x5f NbPstate = 1 CpuVid = 0x70 CpuDid = 1 (divide by 2) CpuFid = 0 (COF = 800 MHz) MSRC001_0068 0x8000024b0040ece0 PstateEn = 1 IddDiv = 2 IddValue = 0x4b NbPstate = 1 CpuVid = 0x76 CpuDid = 3 (divide by 8) CpuFid = 0x20 (COF = 600 MHz) MSRC001_0069 MSRC001_006A MSRC001_006B 0x000000000041fe00 PstateEn = 0 MSRC001_0071 0x3a1c00027442d844 MaxNbCof = 7 (700 MHz) CurPstateLimit = 2 (high, HW) MaxCpuCof = 0xe = 14 (1400 MHz) StartupPstate = 2 (HW) cold reset, may be different after reboot/reset CurNbVid = 0x74 NbPstateDis = 0 CurPstate = 2 (HW) see notes below CurCpuVid = 0x6c CurCpuDid = 1 CurCpuFid = 4 In the table SW means software numbering, HW - hardware. High limit means an upper limit on frequency (performance), lowest P-state number. COF (current operating frequency) is calculated as 100 * ((CpuFid + 0x10) / (2^CpuDid)) . Transitions between P-states were working as expected. To change P-state to the lower frequency following steps were taken: Write to MSRC001_0062 with requested, higher P-state number (SW). Read from MSRC001_0062 should return written state, as long as it is within limits. Read from MSRC001_0063 returns 0, MSRC001_0071 returns previous value - no P-state transition occurred because of frequency and voltage domains. Write to MSRC001_0062 of other cores. After all cores have requested change the actual P-state transition takes place. Reads from MSRC001_0063 and MSRC001_0071 return expected values. Changing P-state to higher performance results in immediate change, as frequency and voltage domains are tailored to the most demanding core. Actual frequency and/or voltage can be different than in the state pointed by CurPstate in MSRC001_0063 after a warm reset that occurred during plane transition. In this case current value can be that before or after transition. Firmware is required to transition the processor to valid COF and VID settings. This can be the source of some reboot problems, but it is hard to test in a reliable way - reset is asynchronous event that have to take place in very short amount of time during transition.","title":"Values obtained from registers"},{"location":"debug/cpu_frequency/#voltage-regulator","text":"CPU communicates with voltage regulator using SVI2 (Serial VID Interface 2.0). Typically, after all frequency and voltage dependencies described above are resolved, transition to higher performance follows a sequence: SVI2 command is send to the voltage regulator, D18F5x12C[Svi2CmdBusy] is set. Voltage regulator sets the requested voltage, waits for it to stabilize and clears Svi2CmdBusy . After Svi2CmdBusy is clear frequency change is performed. Transition towards lower performance starts with frequency change and doesn't have to wait for it to finish before changing voltage. Because of these restrictions it is impossible for CPU to work with high frequency and too low voltage for that frequency. Multiple requests can be grouped: If multiple commands are issued that affect the P-state of a domain prior to when the processor initiates the change of the P-state of that domain, then the processor operates on the last one issued. Once a P-state change starts, the P-state state machine (PSSM) continues through completion unless interrupted by a PWROK deassertion. If multiple P-state changes are requested concurrently, the PSSM may group the associated VID changes separately from the associated COF changes. Setting D18F5x12C[WaitVidCompDis] changes behaviour of transition towards higher performance - instead of waiting for voltage regulator to report end of transition next request can be made after a defined time period ( D18F3xD8[VSRampSlamTime] ). BKDG recommends 2.00 \u03bcs per 15 mV, it is set as such by AGESA, but can be modified by OEM callouts.","title":"Voltage regulator"},{"location":"debug/cpu_frequency/#findings-from-logs-obtained-from-community","text":"Registers values from community revealed that CPU had voltage of (software) P0, but its frequency was stuck at a value of P2. Voltage change to P0 was requested but not reported as done by voltage regulator for some reason. It is possible that under certain circumstances an infinite loop occurs during boot - CPU is not requested to transition to P0 as its voltage already is equal to that of P0, so AGESA waits for frequency change to catch up, which doesn't happen. An explicit request to transition to P0 during boot could help with the other issue . It is unclear why some platforms are influenced and others are not. Maybe different batch of voltage regulator (chip U7 on the bottom side of board) was used?","title":"Findings from logs obtained from community"},{"location":"debug/cpu_frequency/#acpi-tables","text":"All required objects for P-states are present, even the optional _PPC . Only difference between actual tables and recommendations from BKDG is entry DUTY_WIDTH in Fixed ACPI Description Table (FADT) - AMD recommends value of 0, while real entry has 3. Description of this entry from ACPI specification : The bit width of the processor\u2019s duty cycle setting value in the P_CNT register. Each processor\u2019s duty cycle setting allows the software to select a nominal processor frequency below its absolute frequency as defined by: THTL_EN = 1 BF*DC/(2^DUTY_WIDTH) Where: BF \u2013 Base frequency DC \u2013 Duty cycle setting When THTL_EN is 0, the processor runs at its absolute BF. A DUTY_WIDTH value of 0 indicates that processor duty cycle is not supported and the processor continuously runs at its base frequency.","title":"ACPI tables"},{"location":"debug/cpu_frequency/#c-states","text":"Only theoretical research on registers was done from C0, and everything seems to be correct. Practical research (i.e. transitions between states) is impossible, because when CPU is in lower C-state it doesn't process instructions and thus cannot report any of its register values. As for ACPI tables, we couldn't find _CRS object. P_LVL2_LAT showed a value 0f 0x65 = 101, which disables C2 state according to specification . First recorded value of this field actually showed 0x64 = 100, that is as specified in BKDG, but all subsequent logs show 0x65. This could either be an error with serial connection or this value did change, which could possibly explain sudden problems with reproducing. A look at the source code however shows that it is set as 0x65, against instructions from BKDG. If this value was indeed different it had to be set by some other agent (payload, OS, AGESA).","title":"C-states"},{"location":"debug/cpu_frequency/#fix","text":"Setting D18F5x12C[WaitVidCompDis] resolved both this issue as well as problems with reboot. This bit is protected by D18F2x1B4[SmuCfgLock] after system or a payload starts, but is cleared during init.","title":"Fix"},{"location":"debug/debian_kernel_rebuild/","text":"Recompile debian kernel to support APU2 GPIO http://www.pcengines.ch/howto.htm#gpio Get appropriate debian kernel source, e.g. from linux-source-* package. Copy source to host PC and compile with gpio module included: CONFIG_GPIO_NCT5104D=m CONFIG_GPIO_SYSFS=y make menuconfig sudo apt-get install debhelper sudo apt-get install modutils sudo apt-get install kernel-package make-kpkg clean fakeroot make-kpkg -j8 --initrd --revision=1.2.custom kernel_image Copy .deb into sd card, boot and install: dpkg-i linux-image-3.16.36_1.3.custom_amd64.deb vi /etc/modules add: gpio-nct5104d cd /sys/class/gpio echo 0 > export cd gpio0 echo out > direction echo 1 > value First test Export gpio17 : cd /sys/class/gpio echo 17 > export Check it's value and direction: root@debian:/sys/class/gpio/gpio17# cat direction in root@debian:/sys/class/gpio/gpio17# cat value 0 Change to out and 1 : root@debian:/sys/class/gpio/gpio17# echo out > direction root@debian:/sys/class/gpio/gpio17# cat direction out root@debian:/sys/class/gpio/gpio17# echo 1 > value root@debian:/sys/class/gpio/gpio17# cat value 1 At this point voltage on pin rises from 0V to 0.8V. Reboot: reboot During coreboot-bios phase voltage rises to 1.2V. When OS boots into login propmt voltage drops back to 0.8V. Check gpio17 direction and value : cd /sys/class/gpio echo 17 > export cd gpio17 root@debian:/sys/class/gpio/gpio17# cat direction in root@debian:/sys/class/gpio/gpio17# cat value 1 It claims to be an input in high state. But the voltage is still 0.8V so it is actually an output (?) That's because gpios are configured by default as OD Reboot again with those settings and check: root@debian:/sys/class/gpio/gpio17# cat direction in root@debian:/sys/class/gpio/gpio17# cat value 1 Set output to low (0V and reboot) root@debian:/sys/class/gpio/gpio17# cat direction in root@debian:/sys/class/gpio/gpio17# cat value 0 After reboot voltage on this pin is 0V, even if boot into other OS. Voltage on the rest of the pins is ~0.9V. After coldboot voltage is back at ~0.9V. APU1 test Voyage on USB stick, without gpio kernel module Debian on SDcard, with gpio kernel module Pins as GPIO Log into Debian, set pin17 as output with value = 0. Voltage = 0V. Reboot into Debian. Voltage = 0V for the entire time of reboot as well as in the OS. Reboot into Voyage. Voltage = 0V for the entire time of reboot as well as in the OS. Pins disabled Log into Debian, set pin17 as output with value = 0. Voltage = 0V. Reboot into Debian. Voltage rises to 1.2V for the entire time of reboot but drops to 0 when login prompt appears (when gpio module is loaded ? it initialises pins as GPIOs). Reboot into Voyage. Voltage = 1.2V for the entire time of reboot as well as in the OS.","title":"Debian kernel rebuild"},{"location":"debug/debian_kernel_rebuild/#recompile-debian-kernel-to-support-apu2-gpio","text":"http://www.pcengines.ch/howto.htm#gpio Get appropriate debian kernel source, e.g. from linux-source-* package. Copy source to host PC and compile with gpio module included: CONFIG_GPIO_NCT5104D=m CONFIG_GPIO_SYSFS=y make menuconfig sudo apt-get install debhelper sudo apt-get install modutils sudo apt-get install kernel-package make-kpkg clean fakeroot make-kpkg -j8 --initrd --revision=1.2.custom kernel_image Copy .deb into sd card, boot and install: dpkg-i linux-image-3.16.36_1.3.custom_amd64.deb vi /etc/modules add: gpio-nct5104d cd /sys/class/gpio echo 0 > export cd gpio0 echo out > direction echo 1 > value","title":"Recompile debian kernel to support APU2 GPIO"},{"location":"debug/debian_kernel_rebuild/#first-test","text":"Export gpio17 : cd /sys/class/gpio echo 17 > export Check it's value and direction: root@debian:/sys/class/gpio/gpio17# cat direction in root@debian:/sys/class/gpio/gpio17# cat value 0 Change to out and 1 : root@debian:/sys/class/gpio/gpio17# echo out > direction root@debian:/sys/class/gpio/gpio17# cat direction out root@debian:/sys/class/gpio/gpio17# echo 1 > value root@debian:/sys/class/gpio/gpio17# cat value 1 At this point voltage on pin rises from 0V to 0.8V. Reboot: reboot During coreboot-bios phase voltage rises to 1.2V. When OS boots into login propmt voltage drops back to 0.8V. Check gpio17 direction and value : cd /sys/class/gpio echo 17 > export cd gpio17 root@debian:/sys/class/gpio/gpio17# cat direction in root@debian:/sys/class/gpio/gpio17# cat value 1 It claims to be an input in high state. But the voltage is still 0.8V so it is actually an output (?) That's because gpios are configured by default as OD Reboot again with those settings and check: root@debian:/sys/class/gpio/gpio17# cat direction in root@debian:/sys/class/gpio/gpio17# cat value 1 Set output to low (0V and reboot) root@debian:/sys/class/gpio/gpio17# cat direction in root@debian:/sys/class/gpio/gpio17# cat value 0 After reboot voltage on this pin is 0V, even if boot into other OS. Voltage on the rest of the pins is ~0.9V. After coldboot voltage is back at ~0.9V.","title":"First test"},{"location":"debug/debian_kernel_rebuild/#apu1-test","text":"Voyage on USB stick, without gpio kernel module Debian on SDcard, with gpio kernel module","title":"APU1 test"},{"location":"debug/debian_kernel_rebuild/#pins-as-gpio","text":"Log into Debian, set pin17 as output with value = 0. Voltage = 0V. Reboot into Debian. Voltage = 0V for the entire time of reboot as well as in the OS. Reboot into Voyage. Voltage = 0V for the entire time of reboot as well as in the OS.","title":"Pins as GPIO"},{"location":"debug/debian_kernel_rebuild/#pins-disabled","text":"Log into Debian, set pin17 as output with value = 0. Voltage = 0V. Reboot into Debian. Voltage rises to 1.2V for the entire time of reboot but drops to 0 when login prompt appears (when gpio module is loaded ? it initialises pins as GPIOs). Reboot into Voyage. Voltage = 1.2V for the entire time of reboot as well as in the OS.","title":"Pins disabled"},{"location":"debug/external_sd_slot/","text":"We have used an external SD slot connected to SD pins on APU2. Unfortunately CD and WP pins are not exposed so it is not exactly the same situation. However, we have managed to connect to CD pin as well. Leaving WP unconnected should not make the difference - controller will treat card as write-protected, but that is not an issue in this case. So to make it clear: we have all SD signals (except for WP which is left unconnected) coming from the external SD slot on prototype board. To make below tests even more similar, we have moved WP switch down so even in internal slot card will be seen as write-protected. When GOOD card is inserted into the external slot it behaves the same (in terms of command response) as if it would be inserted into APU2 internal slot. No matter if it is a cold- or warmboot. When BAD card is inserted into the external slot it behaves the same (in terms of command response) as GOOD card. When it is inserted into APU2 internal slot it does not respond to any command. We have not managed to boot from the external slot, however. It is possible that length and quality of joints is not sufficient enough when frequency rises from initialization 400 kHz to operational frequency.","title":"External sd slot"},{"location":"debug/freeDOS_problems/","text":"Problems with FreeDOS on APU2 platform FreeDOS doesn't have drivers for internal SD card reader. Boot ends like this: JemmEx v5.78 [07/15/12] System memory found at c100-edff, region might be in use JemmEx loaded Kernel: allocated 45 Diskbuffers = 23940 Bytes in HMA Bad or missing Command Interpreter: C:\\FDOS\\BIN\\COMMAND.COM C:\\FDOS\\BIN /E:1024 /P=C:\\AUTOEXEC.BAT Enter the full shell command line: FreeDOS doesn't use the serial console. Instead its driving its output to standard PC VGA text console. sgabios needs to be used to provide the wrapping around text output. ctty aux command could be added to autoexec.bat though, to drive some output to the serial console directly, but more advanced programs (using curses-like graphical interfaces, e.g. edit ) are not redirecting their output.","title":"freeDOS problems"},{"location":"debug/freeDOS_problems/#problems-with-freedos-on-apu2-platform","text":"FreeDOS doesn't have drivers for internal SD card reader. Boot ends like this: JemmEx v5.78 [07/15/12] System memory found at c100-edff, region might be in use JemmEx loaded Kernel: allocated 45 Diskbuffers = 23940 Bytes in HMA Bad or missing Command Interpreter: C:\\FDOS\\BIN\\COMMAND.COM C:\\FDOS\\BIN /E:1024 /P=C:\\AUTOEXEC.BAT Enter the full shell command line: FreeDOS doesn't use the serial console. Instead its driving its output to standard PC VGA text console. sgabios needs to be used to provide the wrapping around text output. ctty aux command could be added to autoexec.bat though, to drive some output to the serial console directly, but more advanced programs (using curses-like graphical interfaces, e.g. edit ) are not redirecting their output.","title":"Problems with FreeDOS on APU2 platform"},{"location":"debug/hdd_mPCIe_log_analyze/","text":"coldboot mpcie1 from coldboot: [2016-10-22 16:04:16] /dff57000\\ Start thread [2016-10-22 16:04:16] |dff57000| AHCI/1: probing [2016-10-22 16:04:16] |dff57000| AHCI/1: link up [2016-10-22 16:04:16] |dff57000| AHCI/1: send cmd ... [2016-10-22 16:04:48] |dff57000| WARNING - Timeout at ahci_command:154! [2016-10-22 16:04:48] |dff57000| AHCI/1: send cmd ... [2016-10-22 16:05:20] |dff57000| WARNING - Timeout at ahci_command:154! [2016-10-22 16:05:20] |dff57000| phys_free dff5a400 (detail=0xdff5a3d0) [2016-10-22 16:05:20] |dff57000| phys_free dff5a200 (detail=0xdff5a3a0) [2016-10-22 16:05:20] |dff57000| phys_free dff5a100 (detail=0xdff5a370) [2016-10-22 16:05:20] |dff57000| phys_free dff5ac50 (detail=0xdff5ac20) [2016-10-22 16:05:20] \\dff57000/ End thread [2016-10-22 16:05:20] phys_free dff57000 (detail=0xdff5a340) mpcie2 from coldboot: phys_alloc zone=0xdff6df10 size=4096 align=1000 ret=dff57000 (detail=0xdff5a710) /dff57000\\ start thread |dff57000| ahci_port_detect |dff57000| ahci/1: probing |dff57000| ahci/1: link up |dff57000| ahci/1: send cmd ... |dff57000| WARNING - Timeout at ahci_command:154! |dff57000| AHCI/1: send cmd ... |dff57000| WARNING - Timeout at ahci_command:154! |dff57000| phys_free dff5a000 (detail=0xdff5a7a0) |dff57000| phys_free dff5a600 (detail=0xdff5a770) |dff57000| phys_free dff5a500 (detail=0xdff5a740) |dff57000| phys_free dff5ac20 (detail=0xdff5a7d0) \\dff57000/ End thread phys_free dff57000 (detail=0xdff5a710) After coldboot, mPCIe1 and mPCIe2 behaviour is the same (AHCI Timeout). But in mPCIe2 case you can not fully load into OS: it reboots after: tsc unst reboot mPCIe1 after reboot: [2016-10-22 16:07:10] phys_alloc zone=0xdff6df10 size=4096 align=1000 ret=dff57000 (detail=0xdff5a340) [2016-10-22 16:07:10] /dff57000\\ Start thread [2016-10-22 16:07:10] |dff57000| AHCI/1: probing [2016-10-22 16:07:10] |dff57000| AHCI/1: link up [2016-10-22 16:07:10] |dff57000| AHCI/1: send cmd ... [2016-10-22 16:07:10] |dff57000| AHCI/1: ... intbits 0x40000001, status 0x51 ... [2016-10-22 16:07:10] |dff57000| AHCI/1: ... finished, status 0x51, ERROR 0x4 [2016-10-22 16:07:10] |dff57000| AHCI/1: send cmd ... [2016-10-22 16:07:11] |dff57000| AHCI/1: ... intbits 0x2, status 0x58 ... [2016-10-22 16:07:11] |dff57000| AHCI/1: ... finished, status 0x58, OK [2016-10-22 16:07:11] |dff57000| phys_alloc zone=0xdff6df10 size=80 align=10 ret=dff5ae60 (detail=0xdff5ae30) [2016-10-22 16:07:11] |dff57000| Searching bootorder for: /pci@i0cf8/pci-bridge@2,5/*@0/drive@1/disk@0 [2016-10-22 16:07:11] |dff57000| AHCI/1: supported modes: udma 6, multi-dma 2, pio 4 [2016-10-22 16:07:11] |dff57000| AHCI/1: Set transfer mode to UDMA-6 [2016-10-22 16:07:11] |dff57000| AHCI/1: send cmd ... [2016-10-22 16:07:11] |dff57000| AHCI/1: ... intbits 0x1, status 0x50 ... [2016-10-22 16:07:11] |dff57000| AHCI/1: ... finished, status 0x50, OK [2016-10-22 16:07:11] |dff57000| phys_alloc zone=0xdff6df18 size=68 align=10 ret=f0500 (detail=0xdff5add0) [2016-10-22 16:07:11] |dff57000| phys_free dff5ac50 (detail=0xdff5ac20) [2016-10-22 16:07:11] |dff57000| phys_free dff5a400 (detail=0xdff5a3d0) [2016-10-22 16:07:11] |dff57000| phys_free dff5a200 (detail=0xdff5a3a0) [2016-10-22 16:07:11] |dff57000| phys_free dff5a100 (detail=0xdff5a370) [2016-10-22 16:07:11] |dff57000| phys_alloc zone=0xdff6df1c size=1024 align=400 ret=dffad000 (detail=0xdff61250) [2016-10-22 16:07:11] |dff57000| phys_alloc zone=0xdff6df1c size=256 align=100 ret=dffad800 (detail=0xdff61220) [2016-10-22 16:07:11] |dff57000| phys_alloc zone=0xdff6df1c size=256 align=100 ret=dffabf00 (detail=0xdff61140) [2016-10-22 16:07:11] |dff57000| AHCI/1: registering: \"AHCI/1: ST1000LM014-SSHD-8GB ATA-9 Hard-Disk (931 GiBytes)\" [2016-10-22 16:07:11] |dff57000| phys_alloc zone=0xdff6df10 size=24 align=10 ret=dff61200 (detail=0xdff61110) [2016-10-22 16:07:11] |dff57000| Registering bootable: AHCI/1: ST1000LM014-SSHD-8GB ATA-9 Hard-Disk (931 GiBytes) (type:2 prio:103 data:f0500) [2016-10-22 16:07:11] \\dff57000/ End thread [2016-10-22 16:07:11] phys_free dff57000 (detail=0xdff5a340) mPCIe2 after reboot: phys_alloc zone=0xdff6df10 size=4096 align=1000 ret=dff57000 (detail=0xdff5a710) /dff57000\\ Start thread |dff57000| ahci_port_detect |dff57000| AHCI/1: probing |dff57000| AHCI/1: link up |dff57000| AHCI/1: send cmd ... |dff57000| rfis |dff57000| AHCI/1: ... intbits 0x40000001, status 0x51 ... |dff57000| AHCI/1: ... finished, status 0x51, ERROR 0x4 |dff57000| AHCI/1: send cmd ... |dff57000| psfis |dff57000| AHCI/1: ... intbits 0xffffffff, status 0x58 ... |dff57000| AHCI/1: ... finished, status 0x58, OK |dff57000| phys_alloc zone=0xdff6df10 size=80 align=10 ret=dff5ae10 (detail=0xdff5ade0) |dff57000| Searching bootorder for: /pci@i0cf8/pci-bridge@2,1/*@0/drive@1/disk@0 |dff57000| AHCI/1: supported modes: udma 6, multi-dma 2, pio 4 |dff57000| AHCI/1: Set transfer mode to UDMA-6 |dff57000| AHCI/1: send cmd ... |dff57000| psfis |dff57000| AHCI/1: ... intbits 0xffffffff, status 0x58 ... |dff57000| AHCI/1: ... finished, status 0x58, OK |dff57000| ahci_command rc = 0 // REBOOTS HERE phys_alloc zone=0xdff6df10 size=4096 align=1000 ret=dff57000 (detail=0xdff5a710) /dff57000\\ Start thread |dff57000| ahci_port_detect |dff57000| AHCI/1: probing |dff57000| AHCI/1: link up |dff57000| AHCI/1: send cmd ... |dff57000| rfis |dff57000| AHCI/1: ... intbits 0x40000001, status 0x51 ... |dff57000| AHCI/1: ... finished, status 0x51, ERROR 0x4 |dff57000| AHCI/1: send cmd ... |dff57000| psfis |dff57000| AHCI/1: ... intbits 0x2, status 0x58 ... |dff57000| AHCI/1: ... finished, status 0x58, OK |dff57000| phys_alloc zone=0xdff6df10 size=80 align=10 ret=dff5ae10 (detail=0xdff5ade0) |dff57000| Searching bootorder for: /pci@i0cf8/pci-bridge@2,1/*@0/drive@1/disk@0 |dff57000| AHCI/1: supported modes: udma 6, multi-dma 2, pio 4 |dff57000| AHCI/1: Set transfer mode to UDMA-6 |dff57000| AHCI/1: send cmd ... |dff57000| rfis |dff57000| AHCI/1: ... intbits 0x1, status 0x50 ... |dff57000| AHCI/1: ... finished, status 0x50, OK |dff57000| ahci_command rc = 0 // REBOOTS HERE phys_alloc zone=0xdff6df10 size=4096 align=1000 ret=dff57000 (detail=0xdff5a710) /dff57000\\ Start thread |dff57000| ahci_port_detect |dff57000| AHCI/1: probing |dff57000| AHCI/1: link up |dff57000| AHCI/1: send cmd ... |dff57000| rfis |dff57000| AHCI/1: ... intbits 0x40000001, status 0x51 ... |dff57000| AHCI/1: ... finished, status 0x51, ERROR 0x4 |dff57000| AHCI/1: send cmd ... |dff57000| psfis |dff57000| AHCI/1: ... intbits 0x2, status 0x58 ... |dff57000| AHCI/1: ... finished, status 0x58, OK |dff57000| phys_alloc zone=0xdff6df10 size=80 align=10 ret=dff5ae10 (detail=0xdff5ade0) |dff57000| Searching bootorder for: /pci@i0cf8/pci-bridge@2,1/*@0/drive@1/disk@0 |dff57000| AHCI/1: supported modes: udma 6, multi-dma 2, pio 4 |dff57000| AHCI/1: Set transfer mode to UDMA-6 |dff57000| AHCI/1: send cmd ... |dff57000| rfis |dff57000| AHCI/1: ... intbits 0x1, status 0x50 ... |dff57000| AHCI/1: ... finished, status 0x50, OK |dff57000| ahci_command rc = 0 // REBOOTS HERE phys_alloc zone=0xdff6df10 size=4096 align=1000 ret=dff57000 (detail=0xdff5a710) /dff57000\\ Start thread |dff57000| ahci_port_detect |dff57000| AHCI/1: probing |dff57000| AHCI/1: link up |dff57000| AHCI/1: send cmd ... |dff57000| rfis |dff57000| AHCI/1: ... intbits 0x40000001, status 0x51 ... |dff57000| AHCI/1: ... finished, status 0x51, ERROR 0x4 |dff57000| AHCI/1: send cmd ... |dff57000| psfis |dff57000| AHCI/1: ... intbits 0x2, status 0x58 ... |dff57000| AHCI/1: ... finished, status 0x58, OK |dff57000| phys_alloc zone=0xdff6df10 size=80 align=10 ret=dff5ae10 (detail=0xdff5ade0) |dff57000| Searching bootorder for: /pci@i0cf8/pci-bridge@2,1/*@0/drive@1/disk@0 |dff57000| AHCI/1: supported modes: udma 6, multi-dma 2, pio 4 |dff57000| AHCI/1: Set transfer mode to UDMA-6 |dff57000| AHCI/1: send cmd ... |dff57000| rfis |dff57000| AHCI/1: ... intbits 0x1, status 0x50 ... |dff57000| AHCI/1: ... finished, status 0x50, OK |dff57000| ahci_command rc = 0 // REBOOTS HERE phys_alloc zone=0xdff6df10 size=4096 align=1000 ret=dff57000 (detail=0xdff5a710) /dff57000\\ Start thread |dff57000| ahci_port_detect |dff57000| AHCI/1: probing |dff57000| AHCI/1: link up |dff57000| AHCI/1: send cmd ... |dff57000| rfis |dff57000| AHCI/1: ... intbits 0x40000001, status 0x51 ... |dff57000| AHCI/1: ... finished, status 0x51, ERROR 0x4 |dff57000| AHCI/1: send cmd ... |dff57000| psfis |dff57000| AHCI/1: ... intbits 0x2, status 0x58 ... |dff57000| AHCI/1: ... finished, status 0x58, OK |dff57000| phys_alloc zone=0xdff6df10 size=80 align=10 ret=dff5ae10 (detail=0xdff5ade0) |dff57000| Searching bootorder for: /pci@i0cf8/pci-bridge@2,1/*@0/drive@1/disk@0 |dff57000| AHCI/1: supported modes: udma 6, multi-dma 2, pio 4 |dff57000| AHCI/1: Set transfer mode to UDMA-6 |dff57000| AHCI/1: send cmd ... |dff57000| rfis |dff57000| AHCI/1: ... intbits 0x1, status 0x50 ... |dff57000| AHCI/1: ... finished, status 0x50, OK |dff57000| ahci_command rc = 0 // REBOOTS HERE phys_alloc zone=0xdff6df10 size=4096 align=1000 ret=dff57000 (detail=0xdff5a710) /dff57000\\ Start thread |dff57000| ahci_port_detect |dff57000| AHCI/1: probing |dff57000| AHCI/1: link up |dff57000| AHCI/1: send cmd ... |dff57000| rfis |dff57000| AHCI/1: ... intbits 0x40000001, status 0x51 ... |dff57000| AHCI/1: ... finished, status 0x51, ERROR 0x4 |dff57000| AHCI/1: send cmd ... |dff57000| psfis |dff57000| AHCI/1: ... intbits 0xffffffff, status 0x58 ... |dff57000| AHCI/1: ... finished, status 0x58, OK |dff57000| phys_alloc zone=0xdff6df10 size=80 align=10 ret=dff5ae10 (detail=0xdff5ade0) |dff57000| Searching bootorder for: /pci@i0cf8/pci-bridge@2,1/*@0/drive@1/disk@0 |dff57000| AHCI/1: supported modes: udma 6, multi-dma 2, pio 4 |dff57000| AHCI/1: Set transfer mode to UDMA-6 |dff57000| AHCI/1: send cmd ... |dff57000| psfis |dff57000| AHCI/1: ... intbits 0xffffffff, status 0x58 ... |dff57000| AHCI/1: ... finished, status 0x58, OK |dff57000| ahci_command rc = 0 // REBOOTS HERE phys_alloc zone=0xdff6df10 size=4096 align=1000 ret=dff57000 (detail=0xdff5a710) /dff57000\\ Start thread |dff57000| ahci_port_detect |dff57000| AHCI/1: probing |dff57000| AHCI/1: link up |dff57000| AHCI/1: send cmd ... |dff57000| rfis |dff57000| AHCI/1: ... intbits 0x40000001, status 0x51 ... |dff57000| AHCI/1: ... finished, status 0x51, ERROR 0x4 |dff57000| AHCI/1: send cmd ... |dff57000| psfis |dff57000| AHCI/1: ... intbits 0x2, status 0x58 ... |dff57000| AHCI/1: ... finished, status 0x58, OK |dff57000| phys_alloc zone=0xdff6df10 size=80 align=10 ret=dff5ae10 (detail=0xdff5ade0) |dff57000| Searching bootorder for: /pci@i0cf8/pci-bridge@2,1/*@0/drive@1/disk@0 |dff57000| AHCI/1: supported modes: udma 6, multi-dma 2, pio 4 |dff57000| AHCI/1: Set transfer mode to UDMA-6 |dff57000| AHCI/1: send cmd ... |dff57000| rfis |dff57000| AHCI/1: ... intbits 0x1, status 0x50 ... |dff57000| AHCI/1: ... finished, status 0x50, OK |dff57000| ahci_command rc = 0 // REBOOTS HERE phys_alloc zone=0xdff6df10 size=4096 align=1000 ret=dff57000 (detail=0xdff5a710) /dff57000\\ Start thread |dff57000| ahci_port_detect |dff57000| AHCI/1: probing |dff57000| AHCI/1: link up |dff57000| AHCI/1: send cmd ... |dff57000| rfis |dff57000| AHCI/1: ... intbits 0x40000001, status 0x51 ... |dff57000| AHCI/1: ... finished, status 0x51, ERROR 0x4 |dff57000| AHCI/1: send cmd ... After reboot, in mPCIe1 slot HDD gets registered, while in mPCIe2 slot it does not - it reboots during AHCI thread. It is not fully consistent. intbits and status values varies beteen following reboots. rfis and psfis prints added to indicate FIS type: Register- Device to Host or PIO Setup - Device to Host . Reboot appears even if thread flow is identical to this from mPCIe1, where reboot does not occur. Source of reboot is not yet discovered. It prints rc=0 but probably does not reach to return 0 (function above, which is calling this one, does not print returned value). This else does not matter since it is not executing in this case. This is done in file seabios/src/hw/ahci.c , function ahci_port_setup that starts with line 421. rc = ahci_command(port, 1, 0, 0, 0); dprintf(1, \"ahci_command rc = %x \\n\", rc); if (rc < 0) { dprintf(1, \"AHCI/%d: Set transfer mode failed.\\n\", port->pnr); } } else { // found cdrom (atapi) port->drive.type = DTYPE_AHCI_ATAPI; port->drive.blksize = CDROM_SECTOR_SIZE; port->drive.sectors = (u64)-1; u8 iscd = ((buffer[0] >> 8) & 0x1f) == 0x05; if (!iscd) { dprintf(1, \"AHCI/%d: atapi device isn't a cdrom\\n\", port->pnr); return -1; } port->desc = znprintf(MAXDESCSIZE , \"DVD/CD [AHCI/%d: %s ATAPI-%d DVD/CD]\" , port->pnr , ata_extract_model(model, MAXMODEL, buffer) , ata_extract_version(buffer)); port->prio = bootprio_find_ata_device(ctrl->pci_tmp, pnr, 0); } return 0; Function ahci_port_detect , which is calling function ahci_port_setup presented above. Below prints are not present in logs static void ahci_port_detect(void *data) { struct ahci_port_s *port = data; int rc; dprintf(2, \"AHCI/%d: probing\\n\", port->pnr); ahci_port_reset(port->ctrl, port->pnr); rc = ahci_port_setup(port); dprintf(1, \"ahci_port_setup rc = %d \\n\", rc);","title":"hdd mPCIe log analyze"},{"location":"debug/hdd_mPCIe_log_analyze/#coldboot","text":"mpcie1 from coldboot: [2016-10-22 16:04:16] /dff57000\\ Start thread [2016-10-22 16:04:16] |dff57000| AHCI/1: probing [2016-10-22 16:04:16] |dff57000| AHCI/1: link up [2016-10-22 16:04:16] |dff57000| AHCI/1: send cmd ... [2016-10-22 16:04:48] |dff57000| WARNING - Timeout at ahci_command:154! [2016-10-22 16:04:48] |dff57000| AHCI/1: send cmd ... [2016-10-22 16:05:20] |dff57000| WARNING - Timeout at ahci_command:154! [2016-10-22 16:05:20] |dff57000| phys_free dff5a400 (detail=0xdff5a3d0) [2016-10-22 16:05:20] |dff57000| phys_free dff5a200 (detail=0xdff5a3a0) [2016-10-22 16:05:20] |dff57000| phys_free dff5a100 (detail=0xdff5a370) [2016-10-22 16:05:20] |dff57000| phys_free dff5ac50 (detail=0xdff5ac20) [2016-10-22 16:05:20] \\dff57000/ End thread [2016-10-22 16:05:20] phys_free dff57000 (detail=0xdff5a340) mpcie2 from coldboot: phys_alloc zone=0xdff6df10 size=4096 align=1000 ret=dff57000 (detail=0xdff5a710) /dff57000\\ start thread |dff57000| ahci_port_detect |dff57000| ahci/1: probing |dff57000| ahci/1: link up |dff57000| ahci/1: send cmd ... |dff57000| WARNING - Timeout at ahci_command:154! |dff57000| AHCI/1: send cmd ... |dff57000| WARNING - Timeout at ahci_command:154! |dff57000| phys_free dff5a000 (detail=0xdff5a7a0) |dff57000| phys_free dff5a600 (detail=0xdff5a770) |dff57000| phys_free dff5a500 (detail=0xdff5a740) |dff57000| phys_free dff5ac20 (detail=0xdff5a7d0) \\dff57000/ End thread phys_free dff57000 (detail=0xdff5a710) After coldboot, mPCIe1 and mPCIe2 behaviour is the same (AHCI Timeout). But in mPCIe2 case you can not fully load into OS: it reboots after: tsc unst","title":"coldboot"},{"location":"debug/hdd_mPCIe_log_analyze/#reboot","text":"mPCIe1 after reboot: [2016-10-22 16:07:10] phys_alloc zone=0xdff6df10 size=4096 align=1000 ret=dff57000 (detail=0xdff5a340) [2016-10-22 16:07:10] /dff57000\\ Start thread [2016-10-22 16:07:10] |dff57000| AHCI/1: probing [2016-10-22 16:07:10] |dff57000| AHCI/1: link up [2016-10-22 16:07:10] |dff57000| AHCI/1: send cmd ... [2016-10-22 16:07:10] |dff57000| AHCI/1: ... intbits 0x40000001, status 0x51 ... [2016-10-22 16:07:10] |dff57000| AHCI/1: ... finished, status 0x51, ERROR 0x4 [2016-10-22 16:07:10] |dff57000| AHCI/1: send cmd ... [2016-10-22 16:07:11] |dff57000| AHCI/1: ... intbits 0x2, status 0x58 ... [2016-10-22 16:07:11] |dff57000| AHCI/1: ... finished, status 0x58, OK [2016-10-22 16:07:11] |dff57000| phys_alloc zone=0xdff6df10 size=80 align=10 ret=dff5ae60 (detail=0xdff5ae30) [2016-10-22 16:07:11] |dff57000| Searching bootorder for: /pci@i0cf8/pci-bridge@2,5/*@0/drive@1/disk@0 [2016-10-22 16:07:11] |dff57000| AHCI/1: supported modes: udma 6, multi-dma 2, pio 4 [2016-10-22 16:07:11] |dff57000| AHCI/1: Set transfer mode to UDMA-6 [2016-10-22 16:07:11] |dff57000| AHCI/1: send cmd ... [2016-10-22 16:07:11] |dff57000| AHCI/1: ... intbits 0x1, status 0x50 ... [2016-10-22 16:07:11] |dff57000| AHCI/1: ... finished, status 0x50, OK [2016-10-22 16:07:11] |dff57000| phys_alloc zone=0xdff6df18 size=68 align=10 ret=f0500 (detail=0xdff5add0) [2016-10-22 16:07:11] |dff57000| phys_free dff5ac50 (detail=0xdff5ac20) [2016-10-22 16:07:11] |dff57000| phys_free dff5a400 (detail=0xdff5a3d0) [2016-10-22 16:07:11] |dff57000| phys_free dff5a200 (detail=0xdff5a3a0) [2016-10-22 16:07:11] |dff57000| phys_free dff5a100 (detail=0xdff5a370) [2016-10-22 16:07:11] |dff57000| phys_alloc zone=0xdff6df1c size=1024 align=400 ret=dffad000 (detail=0xdff61250) [2016-10-22 16:07:11] |dff57000| phys_alloc zone=0xdff6df1c size=256 align=100 ret=dffad800 (detail=0xdff61220) [2016-10-22 16:07:11] |dff57000| phys_alloc zone=0xdff6df1c size=256 align=100 ret=dffabf00 (detail=0xdff61140) [2016-10-22 16:07:11] |dff57000| AHCI/1: registering: \"AHCI/1: ST1000LM014-SSHD-8GB ATA-9 Hard-Disk (931 GiBytes)\" [2016-10-22 16:07:11] |dff57000| phys_alloc zone=0xdff6df10 size=24 align=10 ret=dff61200 (detail=0xdff61110) [2016-10-22 16:07:11] |dff57000| Registering bootable: AHCI/1: ST1000LM014-SSHD-8GB ATA-9 Hard-Disk (931 GiBytes) (type:2 prio:103 data:f0500) [2016-10-22 16:07:11] \\dff57000/ End thread [2016-10-22 16:07:11] phys_free dff57000 (detail=0xdff5a340) mPCIe2 after reboot: phys_alloc zone=0xdff6df10 size=4096 align=1000 ret=dff57000 (detail=0xdff5a710) /dff57000\\ Start thread |dff57000| ahci_port_detect |dff57000| AHCI/1: probing |dff57000| AHCI/1: link up |dff57000| AHCI/1: send cmd ... |dff57000| rfis |dff57000| AHCI/1: ... intbits 0x40000001, status 0x51 ... |dff57000| AHCI/1: ... finished, status 0x51, ERROR 0x4 |dff57000| AHCI/1: send cmd ... |dff57000| psfis |dff57000| AHCI/1: ... intbits 0xffffffff, status 0x58 ... |dff57000| AHCI/1: ... finished, status 0x58, OK |dff57000| phys_alloc zone=0xdff6df10 size=80 align=10 ret=dff5ae10 (detail=0xdff5ade0) |dff57000| Searching bootorder for: /pci@i0cf8/pci-bridge@2,1/*@0/drive@1/disk@0 |dff57000| AHCI/1: supported modes: udma 6, multi-dma 2, pio 4 |dff57000| AHCI/1: Set transfer mode to UDMA-6 |dff57000| AHCI/1: send cmd ... |dff57000| psfis |dff57000| AHCI/1: ... intbits 0xffffffff, status 0x58 ... |dff57000| AHCI/1: ... finished, status 0x58, OK |dff57000| ahci_command rc = 0 // REBOOTS HERE phys_alloc zone=0xdff6df10 size=4096 align=1000 ret=dff57000 (detail=0xdff5a710) /dff57000\\ Start thread |dff57000| ahci_port_detect |dff57000| AHCI/1: probing |dff57000| AHCI/1: link up |dff57000| AHCI/1: send cmd ... |dff57000| rfis |dff57000| AHCI/1: ... intbits 0x40000001, status 0x51 ... |dff57000| AHCI/1: ... finished, status 0x51, ERROR 0x4 |dff57000| AHCI/1: send cmd ... |dff57000| psfis |dff57000| AHCI/1: ... intbits 0x2, status 0x58 ... |dff57000| AHCI/1: ... finished, status 0x58, OK |dff57000| phys_alloc zone=0xdff6df10 size=80 align=10 ret=dff5ae10 (detail=0xdff5ade0) |dff57000| Searching bootorder for: /pci@i0cf8/pci-bridge@2,1/*@0/drive@1/disk@0 |dff57000| AHCI/1: supported modes: udma 6, multi-dma 2, pio 4 |dff57000| AHCI/1: Set transfer mode to UDMA-6 |dff57000| AHCI/1: send cmd ... |dff57000| rfis |dff57000| AHCI/1: ... intbits 0x1, status 0x50 ... |dff57000| AHCI/1: ... finished, status 0x50, OK |dff57000| ahci_command rc = 0 // REBOOTS HERE phys_alloc zone=0xdff6df10 size=4096 align=1000 ret=dff57000 (detail=0xdff5a710) /dff57000\\ Start thread |dff57000| ahci_port_detect |dff57000| AHCI/1: probing |dff57000| AHCI/1: link up |dff57000| AHCI/1: send cmd ... |dff57000| rfis |dff57000| AHCI/1: ... intbits 0x40000001, status 0x51 ... |dff57000| AHCI/1: ... finished, status 0x51, ERROR 0x4 |dff57000| AHCI/1: send cmd ... |dff57000| psfis |dff57000| AHCI/1: ... intbits 0x2, status 0x58 ... |dff57000| AHCI/1: ... finished, status 0x58, OK |dff57000| phys_alloc zone=0xdff6df10 size=80 align=10 ret=dff5ae10 (detail=0xdff5ade0) |dff57000| Searching bootorder for: /pci@i0cf8/pci-bridge@2,1/*@0/drive@1/disk@0 |dff57000| AHCI/1: supported modes: udma 6, multi-dma 2, pio 4 |dff57000| AHCI/1: Set transfer mode to UDMA-6 |dff57000| AHCI/1: send cmd ... |dff57000| rfis |dff57000| AHCI/1: ... intbits 0x1, status 0x50 ... |dff57000| AHCI/1: ... finished, status 0x50, OK |dff57000| ahci_command rc = 0 // REBOOTS HERE phys_alloc zone=0xdff6df10 size=4096 align=1000 ret=dff57000 (detail=0xdff5a710) /dff57000\\ Start thread |dff57000| ahci_port_detect |dff57000| AHCI/1: probing |dff57000| AHCI/1: link up |dff57000| AHCI/1: send cmd ... |dff57000| rfis |dff57000| AHCI/1: ... intbits 0x40000001, status 0x51 ... |dff57000| AHCI/1: ... finished, status 0x51, ERROR 0x4 |dff57000| AHCI/1: send cmd ... |dff57000| psfis |dff57000| AHCI/1: ... intbits 0x2, status 0x58 ... |dff57000| AHCI/1: ... finished, status 0x58, OK |dff57000| phys_alloc zone=0xdff6df10 size=80 align=10 ret=dff5ae10 (detail=0xdff5ade0) |dff57000| Searching bootorder for: /pci@i0cf8/pci-bridge@2,1/*@0/drive@1/disk@0 |dff57000| AHCI/1: supported modes: udma 6, multi-dma 2, pio 4 |dff57000| AHCI/1: Set transfer mode to UDMA-6 |dff57000| AHCI/1: send cmd ... |dff57000| rfis |dff57000| AHCI/1: ... intbits 0x1, status 0x50 ... |dff57000| AHCI/1: ... finished, status 0x50, OK |dff57000| ahci_command rc = 0 // REBOOTS HERE phys_alloc zone=0xdff6df10 size=4096 align=1000 ret=dff57000 (detail=0xdff5a710) /dff57000\\ Start thread |dff57000| ahci_port_detect |dff57000| AHCI/1: probing |dff57000| AHCI/1: link up |dff57000| AHCI/1: send cmd ... |dff57000| rfis |dff57000| AHCI/1: ... intbits 0x40000001, status 0x51 ... |dff57000| AHCI/1: ... finished, status 0x51, ERROR 0x4 |dff57000| AHCI/1: send cmd ... |dff57000| psfis |dff57000| AHCI/1: ... intbits 0x2, status 0x58 ... |dff57000| AHCI/1: ... finished, status 0x58, OK |dff57000| phys_alloc zone=0xdff6df10 size=80 align=10 ret=dff5ae10 (detail=0xdff5ade0) |dff57000| Searching bootorder for: /pci@i0cf8/pci-bridge@2,1/*@0/drive@1/disk@0 |dff57000| AHCI/1: supported modes: udma 6, multi-dma 2, pio 4 |dff57000| AHCI/1: Set transfer mode to UDMA-6 |dff57000| AHCI/1: send cmd ... |dff57000| rfis |dff57000| AHCI/1: ... intbits 0x1, status 0x50 ... |dff57000| AHCI/1: ... finished, status 0x50, OK |dff57000| ahci_command rc = 0 // REBOOTS HERE phys_alloc zone=0xdff6df10 size=4096 align=1000 ret=dff57000 (detail=0xdff5a710) /dff57000\\ Start thread |dff57000| ahci_port_detect |dff57000| AHCI/1: probing |dff57000| AHCI/1: link up |dff57000| AHCI/1: send cmd ... |dff57000| rfis |dff57000| AHCI/1: ... intbits 0x40000001, status 0x51 ... |dff57000| AHCI/1: ... finished, status 0x51, ERROR 0x4 |dff57000| AHCI/1: send cmd ... |dff57000| psfis |dff57000| AHCI/1: ... intbits 0xffffffff, status 0x58 ... |dff57000| AHCI/1: ... finished, status 0x58, OK |dff57000| phys_alloc zone=0xdff6df10 size=80 align=10 ret=dff5ae10 (detail=0xdff5ade0) |dff57000| Searching bootorder for: /pci@i0cf8/pci-bridge@2,1/*@0/drive@1/disk@0 |dff57000| AHCI/1: supported modes: udma 6, multi-dma 2, pio 4 |dff57000| AHCI/1: Set transfer mode to UDMA-6 |dff57000| AHCI/1: send cmd ... |dff57000| psfis |dff57000| AHCI/1: ... intbits 0xffffffff, status 0x58 ... |dff57000| AHCI/1: ... finished, status 0x58, OK |dff57000| ahci_command rc = 0 // REBOOTS HERE phys_alloc zone=0xdff6df10 size=4096 align=1000 ret=dff57000 (detail=0xdff5a710) /dff57000\\ Start thread |dff57000| ahci_port_detect |dff57000| AHCI/1: probing |dff57000| AHCI/1: link up |dff57000| AHCI/1: send cmd ... |dff57000| rfis |dff57000| AHCI/1: ... intbits 0x40000001, status 0x51 ... |dff57000| AHCI/1: ... finished, status 0x51, ERROR 0x4 |dff57000| AHCI/1: send cmd ... |dff57000| psfis |dff57000| AHCI/1: ... intbits 0x2, status 0x58 ... |dff57000| AHCI/1: ... finished, status 0x58, OK |dff57000| phys_alloc zone=0xdff6df10 size=80 align=10 ret=dff5ae10 (detail=0xdff5ade0) |dff57000| Searching bootorder for: /pci@i0cf8/pci-bridge@2,1/*@0/drive@1/disk@0 |dff57000| AHCI/1: supported modes: udma 6, multi-dma 2, pio 4 |dff57000| AHCI/1: Set transfer mode to UDMA-6 |dff57000| AHCI/1: send cmd ... |dff57000| rfis |dff57000| AHCI/1: ... intbits 0x1, status 0x50 ... |dff57000| AHCI/1: ... finished, status 0x50, OK |dff57000| ahci_command rc = 0 // REBOOTS HERE phys_alloc zone=0xdff6df10 size=4096 align=1000 ret=dff57000 (detail=0xdff5a710) /dff57000\\ Start thread |dff57000| ahci_port_detect |dff57000| AHCI/1: probing |dff57000| AHCI/1: link up |dff57000| AHCI/1: send cmd ... |dff57000| rfis |dff57000| AHCI/1: ... intbits 0x40000001, status 0x51 ... |dff57000| AHCI/1: ... finished, status 0x51, ERROR 0x4 |dff57000| AHCI/1: send cmd ... After reboot, in mPCIe1 slot HDD gets registered, while in mPCIe2 slot it does not - it reboots during AHCI thread. It is not fully consistent. intbits and status values varies beteen following reboots. rfis and psfis prints added to indicate FIS type: Register- Device to Host or PIO Setup - Device to Host . Reboot appears even if thread flow is identical to this from mPCIe1, where reboot does not occur. Source of reboot is not yet discovered. It prints rc=0 but probably does not reach to return 0 (function above, which is calling this one, does not print returned value). This else does not matter since it is not executing in this case. This is done in file seabios/src/hw/ahci.c , function ahci_port_setup that starts with line 421. rc = ahci_command(port, 1, 0, 0, 0); dprintf(1, \"ahci_command rc = %x \\n\", rc); if (rc < 0) { dprintf(1, \"AHCI/%d: Set transfer mode failed.\\n\", port->pnr); } } else { // found cdrom (atapi) port->drive.type = DTYPE_AHCI_ATAPI; port->drive.blksize = CDROM_SECTOR_SIZE; port->drive.sectors = (u64)-1; u8 iscd = ((buffer[0] >> 8) & 0x1f) == 0x05; if (!iscd) { dprintf(1, \"AHCI/%d: atapi device isn't a cdrom\\n\", port->pnr); return -1; } port->desc = znprintf(MAXDESCSIZE , \"DVD/CD [AHCI/%d: %s ATAPI-%d DVD/CD]\" , port->pnr , ata_extract_model(model, MAXMODEL, buffer) , ata_extract_version(buffer)); port->prio = bootprio_find_ata_device(ctrl->pci_tmp, pnr, 0); } return 0; Function ahci_port_detect , which is calling function ahci_port_setup presented above. Below prints are not present in logs static void ahci_port_detect(void *data) { struct ahci_port_s *port = data; int rc; dprintf(2, \"AHCI/%d: probing\\n\", port->pnr); ahci_port_reset(port->ctrl, port->pnr); rc = ahci_port_setup(port); dprintf(1, \"ahci_port_setup rc = %d \\n\", rc);","title":"reboot"},{"location":"debug/hdd_test/","text":"Test item: mPCIe -> SATA converter ASM1061 hdd: Seagate Laptop SSHD 1000GB 8GB NAND flash mPCIe1 without resistor Note that CLKREQ has been already turned off for mPCIe1 when these test were proceeded. Cold boot: it takes 60-75 sec after power-on until boot menu appears. There is no HDD entry in boot menu. phys_alloc zone=0xdff6df10 size=4096 align=1000 ret=dff58000 (detail=0xdff59b40) /dff58000\\ Start thread |dff58000| AHCI/0: probing |dff58000| AHCI/0: link up |dff58000| AHCI/0: send cmd ... |dff58000| WARNING - Timeout at ahci_command:154! |dff58000| AHCI/0: send cmd ... |dff58000| WARNING - Timeout at ahci_command:154! |dff58000| phys_free dff59c00 (detail=0xdff59bd0) |dff58000| phys_free dff59a00 (detail=0xdff59ba0) |dff58000| phys_free dff59900 (detail=0xdff59b70) |dff58000| phys_free dff61050 (detail=0xdff61020) \\dff58000/ End thread phys_free dff58000 (detail=0xdff59b40) After OS boot: HDD is visible and usable under Debian After reboot: boot menu appears as quickly as usual. HDD entry appears in boot menu: 1. ata0-0: SATA SSD ATA-10 Hard-Disk (15272 MiBytes) 2. AHCI/0: ST1000LM014-SSHD-8GB ATA-9 Hard-Disk (931 GiBytes) 3. Payload [memtest] 4. Payload [setup] mPCIe1 with resistor Cold boot: it takes 60-75 sec after power-on until boot menu appears. There is no HDD entry in boot menu. phys_alloc zone=0xdff6df10 size=4096 align=1000 ret=dff58000 (detail=0xdff59b40) /dff58000\\ Start thread |dff58000| AHCI/0: probing |dff58000| AHCI/0: link up |dff58000| AHCI/0: send cmd ... |dff58000| WARNING - Timeout at ahci_command:154! |dff58000| AHCI/0: send cmd ... |dff58000| WARNING - Timeout at ahci_command:154! |dff58000| phys_free dff59c00 (detail=0xdff59bd0) |dff58000| phys_free dff59a00 (detail=0xdff59ba0) |dff58000| phys_free dff59900 (detail=0xdff59b70) |dff58000| phys_free dff61050 (detail=0xdff61020) \\dff58000/ End thread phys_free dff58000 (detail=0xdff59b40) All threads complete. After OS boot: HDD is visible and usable under Debian After reboot: boot menu appears as quickly as usual. HDD entry appears in boot menu: 1. ata0-0: SATA SSD ATA-10 Hard-Disk (15272 MiBytes) 2. AHCI/0: ST1000LM014-SSHD-8GB ATA-9 Hard-Disk (931 GiBytes) 3. Payload [memtest] 4. Payload [setup] mPCIe1 behaves the same for both mPCIe -> SATA converterts mPCIe2 without resistor HDD not detected neither in bootmenu nor in OS mPCIe2 with resistor HDD not detected in bootmenu After cold boot there is boot menu entry, but cannot boot into OS from mSATA or USB. When loading into OS it reboots after: [ 12.306297] Clocksource tsc unst then infinite coreboot loops: phys_alloc zone=0xdff6df10 size=4096 align=1000 ret=dff58000 (detail=0xdff59b40) /dff58000\\ Start thread |dff58000| AHCI/0: probing |dff58000| AHCI/0: link up |dff58000| AHCI/0: send cmd ... |dff5d000| send_cmd : read error (status=51 err=04) |dff5c000| set_address 0xdff61480 |dff5e000| ehci_alloc_async_pipe 0xdff61590 0 |dff5e000| phys_alloc zone=0xdff6df10 size=92 align=80 ret=dff59880 (detail=0xdff59b10) |dff5e000| ehci_send_pipe qh=0xdff59880 dir=0 data=0x00000000 size=0 phys_alloc zone=0xdff6df10 size=68 align=10 ret=dff59830 (detail=0xdff59800) phys_alloc zone=0xdff6df10 size=1024 align=400 ret=dff59400 (detail=0xdff593d0) phys_alloc zone=0xdff6df10 size=256 align=100 ret=dff59200 (detail=0xdff593a0) phys_alloc zone=0xdff6df10 size=256 align=100 ret=dff59100 (detail=0xdff59370) phys_alloc zone=0xdff6df10 size=4096 align=1000 ret=dff57000 (detail=0xdff59340) /dff57000\\ Start thread |dff57000| AHCI/1: probing |dff58000| AHCI/0: ... intbits 0x40000001, status 0x51 ... |dff58000| AHCI/0: ... finished, status 0x51, ERROR 0x4 |dff58000| AHCI/0: send cmd ... |dff5d000| phys_alloc zone=0xdff6df18 size=44 align=10 ret=f0800 (detail=0xdff59310) |dff5d000| phys_alloc zone=0xdff6df10 size=80 align=10 ret=dff590b0 (detail=0xdff59080) |dff5d000| ata0-0: SATA SSD ATA-10 Hard-Disk (15272 MiBytes) |dff5d000| Searching bootorder for: /pci@i0cf8/*@11/drive@0/disk@0 |dff5d000| phys_alloc zone=0xdff6df10 size=24 align=10 ret=dff61000 (detail=0xdff59050) |dff5d000| Registering bootable: ata0-0: SATA SSD ATA-10 Hard-Disk (15272 MiBytes) (type:2 prio:6 data:f0800) |dff5d000| ata_detect resetresult=0000 |dff5d000| powerup iobase=5010 st=50 |dff5d000| powerup iobase=5010 st=0 |dff5d000| ata_detect ata0-1: sc=55 sn=aa dh=b0 |dff5d000| send_cmd : DRQ not set (status 00) \\dff5d000/ End thread phys_free dff5d000 (detail=0xdff612b0) |dff5c000| ehci_alloc_async_pipe 0xdff61480 0 |dff5c000| phys_alloc zone=0xdff6df10 size=92 align=80 ret=dff5df80 (detail=0xdff612b0) |dff5c000| ehci_send_pipe qh=0xdff5df80 dir=0 data=0x00000000 size=0 phys_alloc zone=0xdff6df10 size=4096 align=1000 ret=dff56000 (detail=0xdff5df50) /dff56000\\ Start thread |dff56000| Searching bootorder for: /pci@i0cf8/*@14,7 \\dff56000/ End thread phys_free dff56000 (detail=0xdff5df50) |dff57000| AHCI/1: link down |dff58000| AHCI/0: ... intbits 0xffffffff, status 0x58 ... |dff58000| AHCI/0: ... finished, status 0x58, OK |dff58000| phys_alloc zone=0xdff6df10 size=80 align=10 ret=dff5df30 (detail=0xdff5df00) |dff58000| Searching bootorder for: /pci@i0cf8/pci-bridge@2,1/*@0/drive@0/disk@0 |dff58000| AHCI/0: supported modes: udma 6, multi-dma 2, pio 4 |dff58000| AHCI/0: Set transfer mode to UDMA-6 |dff58000| AHCI/0: send cmd ... coreboot-9cac328-dirty-4.0.1 Tue Oct 4 12:12:31 UTC 2016 starting... 14-25-48Mhz Clock settings FCH_MISC_REG28 is 0x00400012 FCH_MISC_REG40 is 0x000c4040 BSP Family_Model: 00730f01 cpu_init_detectedx = 00000000 agesawrapper_amdinitreset() entry Fch_Oem_config in INIT RESET After setting CLK3 (GFXCLK) to be always on (just like it was done for mPCIe1 and CLK3 before): mPCIe2 without resistor behaves the same as mPCIe2 with resistor before this change (coreboot loop) mPCIe2 with resistor behaves the same after change so: turning CLK to be always on (to ignore CLK_IRQ) causes mPCIe to treat card without resistor as the one with resistor So there are two cases: long coldboot (AHCI timeout in SeaBIOS) and no bootmenu entry for mPCIe1 (but after reboot it's OK) coreboot loop for mPCIe2 Connect HDD to SATA (J7) regular boot, bootmenu entry appears after cold or warmboot it is handled by IDE (ata.c) not AHCI (ahci.c) - when connected through mPCIe converter it was handled by AHCI Long boot log: [2016-10-22 16:04:16] /dff57000\\ Start thread [2016-10-22 16:04:16] |dff57000| AHCI/1: probing [2016-10-22 16:04:16] |dff57000| AHCI/1: link up [2016-10-22 16:04:16] |dff57000| AHCI/1: send cmd ... [2016-10-22 16:04:48] |dff57000| WARNING - Timeout at ahci_command:154! [2016-10-22 16:04:48] |dff57000| AHCI/1: send cmd ... [2016-10-22 16:05:20] |dff57000| WARNING - Timeout at ahci_command:154! [2016-10-22 16:05:20] |dff57000| phys_free dff5a400 (detail=0xdff5a3d0) [2016-10-22 16:05:20] |dff57000| phys_free dff5a200 (detail=0xdff5a3a0) [2016-10-22 16:05:20] |dff57000| phys_free dff5a100 (detail=0xdff5a370) [2016-10-22 16:05:20] |dff57000| phys_free dff5ac50 (detail=0xdff5ac20) [2016-10-22 16:05:20] \\dff57000/ End thread [2016-10-22 16:05:20] phys_free dff57000 (detail=0xdff5a340) boot loop, reboots there: [2016-10-22 15:57:55] /dff57000\\ Start thread [2016-10-22 15:57:55] |dff57000| AHCI/1: probing [2016-10-22 15:57:55] |dff57000| AHCI/1: link up [2016-10-22 15:57:55] |dff57000| AHCI/1: send cmd ... [2016-10-22 15:57:56] |dff57000| AHCI/1: ... intbits 0x40000001, status 0x51 ... [2016-10-22 15:57:56] |dff57000| AHCI/1: ... finished, status 0x51, ERROR 0x4 [2016-10-22 15:57:56] |dff57000| AHCI/1: send cmd ... [2016-10-22 15:57:56] |dff57000| AHCI/1: ... intbits 0xffffffff, status 0x58 ... [2016-10-22 15:57:56] |dff57000| AHCI/1: ... finished, status 0x58, OK [2016-10-22 15:57:56] |dff57000| phys_alloc zone=0xdff6df10 size=80 align=10 ret=dff5ae60 (detail=0xdff5ae30) [2016-10-22 15:57:56] |dff57000| Searching bootorder for: /pci@i0cf8/pci-bridge@2,1/*@0/drive@1/disk@0 [2016-10-22 15:57:56] |dff57000| AHCI/1: supported modes: udma 6, multi-dma 2, pio 4 [2016-10-22 15:57:56] |dff57000| AHCI/1: Set transfer mode to UDMA-6 [2016-10-22 15:57:56] |dff57000| AHCI/1: send cmd ... [2016-10-22 15:57:56] |dff57000| AHCI/1: ... intbits 0xffffffff, status 0x58 ... [2016-10-22 15:57:56] |dff57000| AHCI/1: ... finished, status 0x58, OK // REBOOTS HERE [2016-10-22 15:58:03] coreboot-44ac0ed-dirty-4.0.1 sat oct 22 13:52:29 utc 2016 starting... [2016-10-22 15:58:03] 14-25-48mhz clock settings [2016-10-22 15:58:03] fch_misc_reg28 is 0x00400012 [2016-10-22 15:58:03] fch_misc_reg40 is 0x000c4040 [2016-10-22 15:58:03] bsp family_model: 00730f01 [2016-10-22 15:58:03] cpu_init_detectedx = 00000000 [2016-10-22 15:58:03] agesawrapper_amdinitreset() entry","title":"Hdd test"},{"location":"debug/iommu/","text":"AMD I/O Virtualization Technology (IOMMU) This document is related to changes submitted to mainline coreboot . Status 24/07/2018 patches under redesign in upstream planned firmware release to include patches v4.8.0.3 tested on Xen 4.8.3 and Debian stretch with Linux 4.14.50 xl dmesg dump with apic and iommu verbose here CPUX: No irq handler for vector e7 log is still visible, but doesn't affect boot process. We look for solution for that log here platform survived 100x reboots to Xen without issue IOMMU groups are probably not assigned correctly to devices e.g. all NICs are in one group - tl;dr: IOMMU groups after booting Debian (Linux 4.14.50) as dom0 I'm getting: [ 0.827436] AMD IOMMUv2 functionality not available on this system xl pci-assignable-list hangs? - machine is responsive e.g Ctrl-C works Assigning device also hangs? - machine is responsive e.g Ctrl-C works root@apu2:~# xl pci-assignable-add 00:10.0 [ 447.867457] xhci_hcd 0000:00:10.0: remove, state 1 [ 447.867520] usb usb3: USB disconnect, device number 1 [ 447.867538] usb 3-1: USB disconnect, device number 2 [ 447.868530] usb 3-2: USB disconnect, device number 3 [ 447.870692] xhci_hcd 0000:00:10.0: USB bus 3 deregistered [ 447.870752] xhci_hcd 0000:00:10.0: remove, state 4 [ 447.870805] usb usb2: USB disconnect, device number 1 [ 447.989825] xhci_hcd 0000:00:10.0: USB bus 2 deregistered Questions why in dom0 I can't see IOMMU groups? Is this related to xen vs kvm? - comparison of lsmod indicate that when no Xen KVM modules take over and groups assignment is probably related with KVM drivers since there is no information about groups in AMD IOMMU spec. are we sure that IVRS contain correct entries for bridges? 06/05/2018 patches submitted upstream patches included in v4.6.9 of PC Engines firmware release tested on Xen 4.8 with Linux 4.14.33: (XEN) AMD-Vi: Disabled HAP memory map sharing with IOMMU (XEN) AMD-Vi: IOMMU Extended Features: (XEN) - Peripheral Page Service Request (XEN) - Guest Translation (XEN) - Invalidate All Command (XEN) - Guest APIC supported (XEN) - Performance Counters (XEN) AMD-Vi: IOMMU 0 Enabled. NOTE : feature currently is not stable and hangs on Xen kernel 29/100 boots.: (XEN) CPU1: No irq handler for vector e7 (IRQ -2147483648) (XEN) CPU2: No irq handler for vector e7 (IRQ -2147483648) <hang> How to check features with Xen Please read this blog post How to test IOMMU features PCE pass-through TBD Debugging Unfortunately previous work was not stable and according to comments from Kyosti correct implementation should rely not on AGESA returned values, but on custom IVRS generated in coreboot - this is approach that Timothy took developing initial support. Dump of IVRS from AGESA and custom made in above mentioned implemntation: Dump AGESA IVRS: ivrs_agesa->header.signature: IVRSx ivrs_agesa->header.length: 0x78 ivrs_agesa->header.revision: 0x2 ivrs_agesa->header.checksum: 0x9a ivrs_agesa->header.oem_id: AMD AGESA ivrs_agesa->header.oem_table_id: AGESA ivrs_agesa->header.oem_revision: 0x1 ivrs_agesa->header.asl_compiler_id: AMD ivrs_agesa->header.asl_compiler_revision: 0x0 ivrs_agesa->iv_info: 0x203040 ivrs_agesa->ivhd.type: 0x10 /* In flags only HtTuneEn is disabled other enabled */ ivrs_agesa->ivhd.flags: 0xfe ivrs_agesa->ivhd.length: 0x48 ivrs_agesa->ivhd.device_id: 0x2 ivrs_agesa->ivhd.capability_offset: 0x40 ivrs_agesa->ivhd.iommu_base_low: 0xf7f00000 ivrs_agesa->ivhd.iommu_base_high: 0x0 ivrs_agesa->ivhd.pci_segment_group: 0x0 ivrs_agesa->ivhd.iommu_info: 0x1300 /* According to datasheet, if IVinfo[EFRSup] = 0, then IOMMU Feature Info is * reserved. So despite AGESA set IOMMU Feature Info it should be ignored. * GTSup - Guest Translation supported: enabled * IASup - INALIDATE_IOMMU_ALL supported: enabled * PASmax - maxiumum PASID vaule supported: 0b01000 -> 8 * PNCounters - number of performance counters: 0b010 -> 2 * PNBanks - number of performance counter banks: 0b0000010 -> 2 */ ivrs_agesa->ivhd.iommu_feature_info: 0x48824 Dump custom IVRS: ivrs->header.signature: IVRS ivrs->header.length: 0x100 ivrs->header.revision: 0x1 ivrs->header.checksum: 0xbb ivrs->header.oem_id: CORE COREBOOT ivrs->header.oem_table_id: COREBOOT ivrs->header.oem_revision: 0x0 ivrs->header.asl_compiler_id: CORE ivrs->header.asl_compiler_revision: 0x0 ivrs->iv_info: 0x203040 ivrs->ivhd.type: 0x10 /* In flags HtTuneEn, Coherent, PreFSup and PPRSup are disabled other enabled */ ivrs->ivhd.flags: 0x1e ivrs->ivhd.length: 0xd0 ivrs->ivhd.device_id: 0x2 ivrs->ivhd.capability_offset: 0x40 / * why we have so different base address? */ ivrs->ivhd.iommu_base_low: 0xfeb00000 ivrs->ivhd.iommu_base_high: 0x0 ivrs->ivhd.pci_segment_group: 0x0 ivrs->ivhd.iommu_info: 0x1300 /* Everything disabled */ ivrs->ivhd.iommu_feature_info: 0x0 Booting without IOMMU patches /proc/iomem doesn't show any region assigned to amd_iommu as it is with patches applied. This means we don't have other information about IOMMU base address instead of this returned by AGESA. We can assign manual address as it was done in initial patch, but this makes Linux kernel not bootable. Try minimal changes - only IOMMU bese address Minimal change which, just use IOMMU base low and high returned by AGESA also not work correctly. Kernel crashing with following log: [ 1.064229] AMD-Vi: IOMMU performance counters supported [ 1.069579] BUG: unable to handle kernel paging request at ffffaffc4065c000 [ 1.073554] IP: iommu_go_to_state+0xf8a/0x1260 [ 1.073554] PGD 12a11f067 P4D 12a11f067 PUD 12a120067 PMD 129b69067 PTE 0 [ 1.073554] Oops: 0000 [#1] SMP NOPTI [ 1.073554] Modules linked in: [ 1.073554] CPU: 1 PID: 1 Comm: swapper/0 Not tainted 4.14.50 #13 [ 1.073554] Hardware name: PC Engines apu2/apu2, BIOS 4.8-1174-gf12b3046f0-d2 [ 1.073554] task: ffff8d5d69b9f040 task.stack: ffffaffc40648000 [ 1.073554] RIP: 0010:iommu_go_to_state+0xf8a/0x1260 [ 1.073554] RSP: 0018:ffffaffc4064be28 EFLAGS: 00010282 [ 1.073554] RAX: ffffaffc40658000 RBX: ffff8d5d69bae000 RCX: ffffffff99e57b88 [ 1.073554] RDX: 0000000000000000 RSI: 0000000000000092 RDI: 0000000000000246 [ 1.073554] RBP: 0000000000000040 R08: 0000000000000001 R09: 0000000000000170 [ 1.073554] R10: 0000000000000000 R11: ffffffff9a435e2d R12: 0000000000000000 [ 1.073554] R13: ffffffff9a29a830 R14: 0000000000000000 R15: 0000000000000000 [ 1.073554] FS: 0000000000000000(0000) GS:ffff8d5d6ec80000(0000) knlGS:00000 [ 1.073554] CS: 0010 DS: 0000 ES: 0000 CR0: 0000000080050033 [ 1.073554] CR2: ffffaffc4065c000 CR3: 000000010fa0a000 CR4: 00000000000406e0 [ 1.073554] Call Trace: [ 1.073554] ? set_debug_rodata+0x11/0x11 [ 1.073554] amd_iommu_init+0x11/0x89 [ 1.073554] pci_iommu_init+0x16/0x3f [ 1.073554] ? e820__memblock_setup+0x60/0x60 [ 1.073554] do_one_initcall+0x51/0x190 [ 1.073554] ? set_debug_rodata+0x11/0x11 [ 1.073554] kernel_init_freeable+0x16b/0x1ec [ 1.073554] ? rest_init+0xb0/0xb0 [ 1.073554] kernel_init+0xa/0xf7 [ 1.073554] ret_from_fork+0x22/0x40 [ 1.073554] Code: d2 31 f6 48 89 df e8 d8 15 02 ff 85 c0 75 d1 48 8b 44 24 2 [ 1.073554] RIP: iommu_go_to_state+0xf8a/0x1260 RSP: ffffaffc4064be28 [ 1.073554] CR2: ffffaffc4065c000 [ 1.073554] ---[ end trace 44588f98aa7c7c0b ]--- [ 1.255973] Kernel panic - not syncing: Attempted to kill init! exitcode=0x09 [ 1.255973] [ 1.259934] ---[ end Kernel panic - not syncing: Attempted to kill init! exi9 If this is related to performance countres good idea could be to copy its configuration from AGESA. Try whole IVHD from AGESA and device entries from initial commit This version leads to hang after couple reboots. It was not tested but we suspect similar effect to mentioned above in Status for 06/05/2018 . Performance counters from AGESA This seems to work, platform survived 100x reboots to Xen without even one issue. IOMMU groups It happened that in firmware based on v8 IOMMU groups in Linux 4.14.50 seem to be assigned incorrectly. According to Arch Wiki groups is smallest unit in which devices can be assigned to guests. I'm not sure if this expected, but in Xen 4.8 with the same kernel driver is not loaded and there are no IOMMU groups present. dmesg complain: [ 0.827423] AMD IOMMUv2 driver by Joerg Roedel <jroedel@suse.de> [ 0.827436] AMD IOMMUv2 functionality not available on this system Difference between kernels is parameter provided on boot amd_iommu_dump=1 which is present in plain 4.14.50 without Xen. Ideally we would like to have each device in other group. What we see right now is: IOMMU Group 0 00:00.0 Host bridge [0600]: Advanced Micro Devices, Inc. [AMD] Device [1022:1566] IOMMU Group 1 00:02.0 Host bridge [0600]: Advanced Micro Devices, Inc. [AMD] Device [1022:156b] IOMMU Group 1 00:02.2 PCI bridge [0604]: Advanced Micro Devices, Inc. [AMD] Family 16h Processor Functions 5:1 [1022:1439] IOMMU Group 1 00:02.3 PCI bridge [0604]: Advanced Micro Devices, Inc. [AMD] Family 16h Processor Functions 5:1 [1022:1439] IOMMU Group 1 00:02.4 PCI bridge [0604]: Advanced Micro Devices, Inc. [AMD] Family 16h Processor Functions 5:1 [1022:1439] IOMMU Group 1 01:00.0 Ethernet controller [0200]: Intel Corporation I210 Gigabit Network Connection [8086:157b] (rev 03) IOMMU Group 1 02:00.0 Ethernet controller [0200]: Intel Corporation I210 Gigabit Network Connection [8086:157b] (rev 03) IOMMU Group 1 03:00.0 Ethernet controller [0200]: Intel Corporation I210 Gigabit Network Connection [8086:157b] (rev 03) IOMMU Group 2 00:08.0 Encryption controller [1080]: Advanced Micro Devices, Inc. [AMD] Device [1022:1537] IOMMU Group 3 00:10.0 USB controller [0c03]: Advanced Micro Devices, Inc. [AMD] FCH USB XHCI Controller [1022:7814] (rev 11) IOMMU Group 4 00:11.0 SATA controller [0106]: Advanced Micro Devices, Inc. [AMD] FCH SATA Controller [IDE mode] [1022:7800] (rev 39) IOMMU Group 5 00:13.0 USB controller [0c03]: Advanced Micro Devices, Inc. [AMD] FCH USB EHCI Controller [1022:7808] (rev 39) IOMMU Group 6 00:14.0 SMBus [0c05]: Advanced Micro Devices, Inc. [AMD] FCH SMBus Controller [1022:780b] (rev 42) IOMMU Group 6 00:14.3 ISA bridge [0601]: Advanced Micro Devices, Inc. [AMD] FCH LPC Bridge [1022:780e] (rev 11) IOMMU Group 6 00:14.7 SD Host controller [0805]: Advanced Micro Devices, Inc. [AMD] FCH SD Flash Controller [1022:7813] (rev 01) IOMMU Group 7 00:18.0 Host bridge [0600]: Advanced Micro Devices, Inc. [AMD] Device [1022:1580] IOMMU Group 7 00:18.1 Host bridge [0600]: Advanced Micro Devices, Inc. [AMD] Device [1022:1581] IOMMU Group 7 00:18.2 Host bridge [0600]: Advanced Micro Devices, Inc. [AMD] Device [1022:1582] IOMMU Group 7 00:18.3 Host bridge [0600]: Advanced Micro Devices, Inc. [AMD] Device [1022:1583] IOMMU Group 7 00:18.4 Host bridge [0600]: Advanced Micro Devices, Inc. [AMD] Device [1022:1584] IOMMU Group 7 00:18.5 Host bridge [0600]: Advanced Micro Devices, Inc. [AMD] Device [1022:1585] What bad here is that NICs are all in group 1. When we compared logs from community it happen that some users with older patches had correct assignement, for example here : [ 2.047787] iommu: Adding device 0000:00:00.0 to group 0 [ 2.053502] iommu: Adding device 0000:00:02.0 to group 1 [ 2.059190] iommu: Adding device 0000:00:02.2 to group 2 [ 2.064797] iommu: Adding device 0000:00:02.3 to group 3 [ 2.070442] iommu: Adding device 0000:00:02.4 to group 4 [ 2.076098] iommu: Adding device 0000:00:02.5 to group 5 [ 2.081747] iommu: Adding device 0000:00:08.0 to group 6 [ 2.087380] iommu: Adding device 0000:00:10.0 to group 7 [ 2.093009] iommu: Adding device 0000:00:11.0 to group 8 [ 2.098683] iommu: Adding device 0000:00:13.0 to group 9 [ 2.104399] iommu: Adding device 0000:00:14.0 to group 10 [ 2.109893] iommu: Adding device 0000:00:14.3 to group 10 [ 2.115385] iommu: Adding device 0000:00:14.7 to group 10 [ 2.121174] iommu: Adding device 0000:00:18.0 to group 11 [ 2.126668] iommu: Adding device 0000:00:18.1 to group 11 [ 2.132163] iommu: Adding device 0000:00:18.2 to group 11 [ 2.137652] iommu: Adding device 0000:00:18.3 to group 11 [ 2.143126] iommu: Adding device 0000:00:18.4 to group 11 [ 2.148629] iommu: Adding device 0000:00:18.5 to group 11 [ 2.154441] iommu: Adding device 0000:01:00.0 to group 12 [ 2.160283] iommu: Adding device 0000:02:00.0 to group 13 [ 2.166062] iommu: Adding device 0000:03:00.0 to group 14 [ 2.171770] iommu: Adding device 0000:04:00.0 to group 15 There are many great resources to learn about IOMMU groups: A Deep-dive into IOMMU Groups IOMMU Groups What You Need to Consider Playing with xl pci-assignable-* All commands from this family hangs, trying to enable pass-through using sysfs seem to finish without problems. Didn't tested that yet. TODO: compare device entries enable EFRSup try various sets of features and capabilities","title":"Iommu"},{"location":"debug/iommu/#amd-io-virtualization-technology-iommu","text":"This document is related to changes submitted to mainline coreboot .","title":"AMD I/O Virtualization Technology (IOMMU)"},{"location":"debug/iommu/#status","text":"","title":"Status"},{"location":"debug/iommu/#24072018","text":"patches under redesign in upstream planned firmware release to include patches v4.8.0.3 tested on Xen 4.8.3 and Debian stretch with Linux 4.14.50 xl dmesg dump with apic and iommu verbose here CPUX: No irq handler for vector e7 log is still visible, but doesn't affect boot process. We look for solution for that log here platform survived 100x reboots to Xen without issue IOMMU groups are probably not assigned correctly to devices e.g. all NICs are in one group - tl;dr: IOMMU groups after booting Debian (Linux 4.14.50) as dom0 I'm getting: [ 0.827436] AMD IOMMUv2 functionality not available on this system xl pci-assignable-list hangs? - machine is responsive e.g Ctrl-C works Assigning device also hangs? - machine is responsive e.g Ctrl-C works root@apu2:~# xl pci-assignable-add 00:10.0 [ 447.867457] xhci_hcd 0000:00:10.0: remove, state 1 [ 447.867520] usb usb3: USB disconnect, device number 1 [ 447.867538] usb 3-1: USB disconnect, device number 2 [ 447.868530] usb 3-2: USB disconnect, device number 3 [ 447.870692] xhci_hcd 0000:00:10.0: USB bus 3 deregistered [ 447.870752] xhci_hcd 0000:00:10.0: remove, state 4 [ 447.870805] usb usb2: USB disconnect, device number 1 [ 447.989825] xhci_hcd 0000:00:10.0: USB bus 2 deregistered","title":"24/07/2018"},{"location":"debug/iommu/#questions","text":"why in dom0 I can't see IOMMU groups? Is this related to xen vs kvm? - comparison of lsmod indicate that when no Xen KVM modules take over and groups assignment is probably related with KVM drivers since there is no information about groups in AMD IOMMU spec. are we sure that IVRS contain correct entries for bridges?","title":"Questions"},{"location":"debug/iommu/#06052018","text":"patches submitted upstream patches included in v4.6.9 of PC Engines firmware release tested on Xen 4.8 with Linux 4.14.33: (XEN) AMD-Vi: Disabled HAP memory map sharing with IOMMU (XEN) AMD-Vi: IOMMU Extended Features: (XEN) - Peripheral Page Service Request (XEN) - Guest Translation (XEN) - Invalidate All Command (XEN) - Guest APIC supported (XEN) - Performance Counters (XEN) AMD-Vi: IOMMU 0 Enabled. NOTE : feature currently is not stable and hangs on Xen kernel 29/100 boots.: (XEN) CPU1: No irq handler for vector e7 (IRQ -2147483648) (XEN) CPU2: No irq handler for vector e7 (IRQ -2147483648) <hang>","title":"06/05/2018"},{"location":"debug/iommu/#how-to-check-features-with-xen","text":"Please read this blog post","title":"How to check features with Xen"},{"location":"debug/iommu/#how-to-test-iommu-features","text":"","title":"How to test IOMMU features"},{"location":"debug/iommu/#pce-pass-through","text":"TBD","title":"PCE pass-through"},{"location":"debug/iommu/#debugging","text":"Unfortunately previous work was not stable and according to comments from Kyosti correct implementation should rely not on AGESA returned values, but on custom IVRS generated in coreboot - this is approach that Timothy took developing initial support. Dump of IVRS from AGESA and custom made in above mentioned implemntation: Dump AGESA IVRS: ivrs_agesa->header.signature: IVRSx ivrs_agesa->header.length: 0x78 ivrs_agesa->header.revision: 0x2 ivrs_agesa->header.checksum: 0x9a ivrs_agesa->header.oem_id: AMD AGESA ivrs_agesa->header.oem_table_id: AGESA ivrs_agesa->header.oem_revision: 0x1 ivrs_agesa->header.asl_compiler_id: AMD ivrs_agesa->header.asl_compiler_revision: 0x0 ivrs_agesa->iv_info: 0x203040 ivrs_agesa->ivhd.type: 0x10 /* In flags only HtTuneEn is disabled other enabled */ ivrs_agesa->ivhd.flags: 0xfe ivrs_agesa->ivhd.length: 0x48 ivrs_agesa->ivhd.device_id: 0x2 ivrs_agesa->ivhd.capability_offset: 0x40 ivrs_agesa->ivhd.iommu_base_low: 0xf7f00000 ivrs_agesa->ivhd.iommu_base_high: 0x0 ivrs_agesa->ivhd.pci_segment_group: 0x0 ivrs_agesa->ivhd.iommu_info: 0x1300 /* According to datasheet, if IVinfo[EFRSup] = 0, then IOMMU Feature Info is * reserved. So despite AGESA set IOMMU Feature Info it should be ignored. * GTSup - Guest Translation supported: enabled * IASup - INALIDATE_IOMMU_ALL supported: enabled * PASmax - maxiumum PASID vaule supported: 0b01000 -> 8 * PNCounters - number of performance counters: 0b010 -> 2 * PNBanks - number of performance counter banks: 0b0000010 -> 2 */ ivrs_agesa->ivhd.iommu_feature_info: 0x48824 Dump custom IVRS: ivrs->header.signature: IVRS ivrs->header.length: 0x100 ivrs->header.revision: 0x1 ivrs->header.checksum: 0xbb ivrs->header.oem_id: CORE COREBOOT ivrs->header.oem_table_id: COREBOOT ivrs->header.oem_revision: 0x0 ivrs->header.asl_compiler_id: CORE ivrs->header.asl_compiler_revision: 0x0 ivrs->iv_info: 0x203040 ivrs->ivhd.type: 0x10 /* In flags HtTuneEn, Coherent, PreFSup and PPRSup are disabled other enabled */ ivrs->ivhd.flags: 0x1e ivrs->ivhd.length: 0xd0 ivrs->ivhd.device_id: 0x2 ivrs->ivhd.capability_offset: 0x40 / * why we have so different base address? */ ivrs->ivhd.iommu_base_low: 0xfeb00000 ivrs->ivhd.iommu_base_high: 0x0 ivrs->ivhd.pci_segment_group: 0x0 ivrs->ivhd.iommu_info: 0x1300 /* Everything disabled */ ivrs->ivhd.iommu_feature_info: 0x0","title":"Debugging"},{"location":"debug/iommu/#booting-without-iommu-patches","text":"/proc/iomem doesn't show any region assigned to amd_iommu as it is with patches applied. This means we don't have other information about IOMMU base address instead of this returned by AGESA. We can assign manual address as it was done in initial patch, but this makes Linux kernel not bootable.","title":"Booting without IOMMU patches"},{"location":"debug/iommu/#try-minimal-changes-only-iommu-bese-address","text":"Minimal change which, just use IOMMU base low and high returned by AGESA also not work correctly. Kernel crashing with following log: [ 1.064229] AMD-Vi: IOMMU performance counters supported [ 1.069579] BUG: unable to handle kernel paging request at ffffaffc4065c000 [ 1.073554] IP: iommu_go_to_state+0xf8a/0x1260 [ 1.073554] PGD 12a11f067 P4D 12a11f067 PUD 12a120067 PMD 129b69067 PTE 0 [ 1.073554] Oops: 0000 [#1] SMP NOPTI [ 1.073554] Modules linked in: [ 1.073554] CPU: 1 PID: 1 Comm: swapper/0 Not tainted 4.14.50 #13 [ 1.073554] Hardware name: PC Engines apu2/apu2, BIOS 4.8-1174-gf12b3046f0-d2 [ 1.073554] task: ffff8d5d69b9f040 task.stack: ffffaffc40648000 [ 1.073554] RIP: 0010:iommu_go_to_state+0xf8a/0x1260 [ 1.073554] RSP: 0018:ffffaffc4064be28 EFLAGS: 00010282 [ 1.073554] RAX: ffffaffc40658000 RBX: ffff8d5d69bae000 RCX: ffffffff99e57b88 [ 1.073554] RDX: 0000000000000000 RSI: 0000000000000092 RDI: 0000000000000246 [ 1.073554] RBP: 0000000000000040 R08: 0000000000000001 R09: 0000000000000170 [ 1.073554] R10: 0000000000000000 R11: ffffffff9a435e2d R12: 0000000000000000 [ 1.073554] R13: ffffffff9a29a830 R14: 0000000000000000 R15: 0000000000000000 [ 1.073554] FS: 0000000000000000(0000) GS:ffff8d5d6ec80000(0000) knlGS:00000 [ 1.073554] CS: 0010 DS: 0000 ES: 0000 CR0: 0000000080050033 [ 1.073554] CR2: ffffaffc4065c000 CR3: 000000010fa0a000 CR4: 00000000000406e0 [ 1.073554] Call Trace: [ 1.073554] ? set_debug_rodata+0x11/0x11 [ 1.073554] amd_iommu_init+0x11/0x89 [ 1.073554] pci_iommu_init+0x16/0x3f [ 1.073554] ? e820__memblock_setup+0x60/0x60 [ 1.073554] do_one_initcall+0x51/0x190 [ 1.073554] ? set_debug_rodata+0x11/0x11 [ 1.073554] kernel_init_freeable+0x16b/0x1ec [ 1.073554] ? rest_init+0xb0/0xb0 [ 1.073554] kernel_init+0xa/0xf7 [ 1.073554] ret_from_fork+0x22/0x40 [ 1.073554] Code: d2 31 f6 48 89 df e8 d8 15 02 ff 85 c0 75 d1 48 8b 44 24 2 [ 1.073554] RIP: iommu_go_to_state+0xf8a/0x1260 RSP: ffffaffc4064be28 [ 1.073554] CR2: ffffaffc4065c000 [ 1.073554] ---[ end trace 44588f98aa7c7c0b ]--- [ 1.255973] Kernel panic - not syncing: Attempted to kill init! exitcode=0x09 [ 1.255973] [ 1.259934] ---[ end Kernel panic - not syncing: Attempted to kill init! exi9 If this is related to performance countres good idea could be to copy its configuration from AGESA.","title":"Try minimal changes - only IOMMU bese address"},{"location":"debug/iommu/#try-whole-ivhd-from-agesa-and-device-entries-from-initial-commit","text":"This version leads to hang after couple reboots. It was not tested but we suspect similar effect to mentioned above in Status for 06/05/2018 .","title":"Try whole IVHD from AGESA and device entries from initial commit"},{"location":"debug/iommu/#performance-counters-from-agesa","text":"This seems to work, platform survived 100x reboots to Xen without even one issue.","title":"Performance counters from AGESA"},{"location":"debug/iommu/#iommu-groups","text":"It happened that in firmware based on v8 IOMMU groups in Linux 4.14.50 seem to be assigned incorrectly. According to Arch Wiki groups is smallest unit in which devices can be assigned to guests. I'm not sure if this expected, but in Xen 4.8 with the same kernel driver is not loaded and there are no IOMMU groups present. dmesg complain: [ 0.827423] AMD IOMMUv2 driver by Joerg Roedel <jroedel@suse.de> [ 0.827436] AMD IOMMUv2 functionality not available on this system Difference between kernels is parameter provided on boot amd_iommu_dump=1 which is present in plain 4.14.50 without Xen. Ideally we would like to have each device in other group. What we see right now is: IOMMU Group 0 00:00.0 Host bridge [0600]: Advanced Micro Devices, Inc. [AMD] Device [1022:1566] IOMMU Group 1 00:02.0 Host bridge [0600]: Advanced Micro Devices, Inc. [AMD] Device [1022:156b] IOMMU Group 1 00:02.2 PCI bridge [0604]: Advanced Micro Devices, Inc. [AMD] Family 16h Processor Functions 5:1 [1022:1439] IOMMU Group 1 00:02.3 PCI bridge [0604]: Advanced Micro Devices, Inc. [AMD] Family 16h Processor Functions 5:1 [1022:1439] IOMMU Group 1 00:02.4 PCI bridge [0604]: Advanced Micro Devices, Inc. [AMD] Family 16h Processor Functions 5:1 [1022:1439] IOMMU Group 1 01:00.0 Ethernet controller [0200]: Intel Corporation I210 Gigabit Network Connection [8086:157b] (rev 03) IOMMU Group 1 02:00.0 Ethernet controller [0200]: Intel Corporation I210 Gigabit Network Connection [8086:157b] (rev 03) IOMMU Group 1 03:00.0 Ethernet controller [0200]: Intel Corporation I210 Gigabit Network Connection [8086:157b] (rev 03) IOMMU Group 2 00:08.0 Encryption controller [1080]: Advanced Micro Devices, Inc. [AMD] Device [1022:1537] IOMMU Group 3 00:10.0 USB controller [0c03]: Advanced Micro Devices, Inc. [AMD] FCH USB XHCI Controller [1022:7814] (rev 11) IOMMU Group 4 00:11.0 SATA controller [0106]: Advanced Micro Devices, Inc. [AMD] FCH SATA Controller [IDE mode] [1022:7800] (rev 39) IOMMU Group 5 00:13.0 USB controller [0c03]: Advanced Micro Devices, Inc. [AMD] FCH USB EHCI Controller [1022:7808] (rev 39) IOMMU Group 6 00:14.0 SMBus [0c05]: Advanced Micro Devices, Inc. [AMD] FCH SMBus Controller [1022:780b] (rev 42) IOMMU Group 6 00:14.3 ISA bridge [0601]: Advanced Micro Devices, Inc. [AMD] FCH LPC Bridge [1022:780e] (rev 11) IOMMU Group 6 00:14.7 SD Host controller [0805]: Advanced Micro Devices, Inc. [AMD] FCH SD Flash Controller [1022:7813] (rev 01) IOMMU Group 7 00:18.0 Host bridge [0600]: Advanced Micro Devices, Inc. [AMD] Device [1022:1580] IOMMU Group 7 00:18.1 Host bridge [0600]: Advanced Micro Devices, Inc. [AMD] Device [1022:1581] IOMMU Group 7 00:18.2 Host bridge [0600]: Advanced Micro Devices, Inc. [AMD] Device [1022:1582] IOMMU Group 7 00:18.3 Host bridge [0600]: Advanced Micro Devices, Inc. [AMD] Device [1022:1583] IOMMU Group 7 00:18.4 Host bridge [0600]: Advanced Micro Devices, Inc. [AMD] Device [1022:1584] IOMMU Group 7 00:18.5 Host bridge [0600]: Advanced Micro Devices, Inc. [AMD] Device [1022:1585] What bad here is that NICs are all in group 1. When we compared logs from community it happen that some users with older patches had correct assignement, for example here : [ 2.047787] iommu: Adding device 0000:00:00.0 to group 0 [ 2.053502] iommu: Adding device 0000:00:02.0 to group 1 [ 2.059190] iommu: Adding device 0000:00:02.2 to group 2 [ 2.064797] iommu: Adding device 0000:00:02.3 to group 3 [ 2.070442] iommu: Adding device 0000:00:02.4 to group 4 [ 2.076098] iommu: Adding device 0000:00:02.5 to group 5 [ 2.081747] iommu: Adding device 0000:00:08.0 to group 6 [ 2.087380] iommu: Adding device 0000:00:10.0 to group 7 [ 2.093009] iommu: Adding device 0000:00:11.0 to group 8 [ 2.098683] iommu: Adding device 0000:00:13.0 to group 9 [ 2.104399] iommu: Adding device 0000:00:14.0 to group 10 [ 2.109893] iommu: Adding device 0000:00:14.3 to group 10 [ 2.115385] iommu: Adding device 0000:00:14.7 to group 10 [ 2.121174] iommu: Adding device 0000:00:18.0 to group 11 [ 2.126668] iommu: Adding device 0000:00:18.1 to group 11 [ 2.132163] iommu: Adding device 0000:00:18.2 to group 11 [ 2.137652] iommu: Adding device 0000:00:18.3 to group 11 [ 2.143126] iommu: Adding device 0000:00:18.4 to group 11 [ 2.148629] iommu: Adding device 0000:00:18.5 to group 11 [ 2.154441] iommu: Adding device 0000:01:00.0 to group 12 [ 2.160283] iommu: Adding device 0000:02:00.0 to group 13 [ 2.166062] iommu: Adding device 0000:03:00.0 to group 14 [ 2.171770] iommu: Adding device 0000:04:00.0 to group 15 There are many great resources to learn about IOMMU groups: A Deep-dive into IOMMU Groups IOMMU Groups What You Need to Consider","title":"IOMMU groups"},{"location":"debug/iommu/#playing-with-xl-pci-assignable-","text":"All commands from this family hangs, trying to enable pass-through using sysfs seem to finish without problems. Didn't tested that yet.","title":"Playing with xl pci-assignable-*"},{"location":"debug/iommu/#todo","text":"compare device entries enable EFRSup try various sets of features and capabilities","title":"TODO:"},{"location":"debug/mpcie1_mpcie2_ethernet_card/","text":"Problems with APU2 when using Mini PCI-Express Dual Gigabit Ethernet Controller Card Problems When Ethernet Controller Card is placed in mPCIe1 slot (J14) placed extension cards is recognized by OS but standard Ethernet output placed on APU2 board can't receive correct IP adress. So it doesn't work correct. When Ethernet Controller Card is placed in mPCIe2 slot (J13) 2 additional Ethernet controller are not visible in OS. Standard Ethernet output placed on APU2 board works well. Device detection has been checked using ip a , lspci and dmesg . The results are shown in the table below. +-----+-----------------------------+ | dev | visibility | +-----+--------------+--------------+ | eth | mPCIe1 (J14) | mPCIe2 (J13) | +-----+--------------+--------------+ | 0 | yes | yes | | 1 | yes | yes | | 2 | yes | yes | | 3 | yes | no | | 4 | yes | no | +--------------------+--------------+ Solution of the problems Changing the value from 0xA to 0xF of the part of variable named data (showed under the following line ) fixed the problems described in this file. This modification enables the clock regardless of the CLKREQ line state. Mini PCI-Express Dual Gigabit Ethernet Controller Card elements On a board are located PCI bridge ASMedia Technology Inc. Device 1182 and 2 Ethernet controllers Realtek Semiconductor Co., Ltd. RTL8111/8168/8411 . Booting lags When Ethernet Controller is placed in the mPCIe1 slot (J14) and booting is at network devices setup time occurs long lag. In this case eth0 device can not get correct IP. After this next booting processes take same normal time. The reason may be multiple failed attempts to obtain an IP address. That problem doesn't exist for the mPCIe2 slot (J13). Reason of that was time out value for DHCP client set to few minutes. After disabling DHCP client for eth0 interface booting lag doesn't occurs. Mentioned booting lag is not a bug. Boot logs comparison Level of the detail of booting logs was set at 6:DEBUG . The full list varies between logs is placed at the end file. The most suspicious difference in logs is placed below. For mPCIe2 : PCI: Static device PCI: 00:02.5 not found, disabling it. For mPCIe1 : PCI: 00:02.5 subordinate bus PCI Express PCI: 00:02.5 [1022/1439] enabled This suggests a problem with device recognition when Ethernet Controller is placed in the mPCIe1 slot (J14). The reason for this can be concurent access of devices or incorrectly configured interrupt system. Surrounding the log of the case when Ethernet Controller is placed in the mPCIe1 slot (J14). scan_bus: scanning of bus CPU_CLUSTER: 0 took 15987 usecs PCI: pci_scan_bus for bus 00 PCI: 00:00.0 [1022/1566] enabled PCI: 00:02.0 [1022/156b] enabled PCI: Static device PCI: 00:02.1 not found, disabling it. PCI: 00:02.2 subordinate bus PCI Express PCI: 00:02.2 [1022/1439] enabled PCI: 00:02.3 subordinate bus PCI Express PCI: 00:02.3 [1022/1439] enabled PCI: 00:02.4 subordinate bus PCI Express PCI: 00:02.4 [1022/1439] enabled PCI: Static device PCI: 00:02.5 not found, disabling it. PCI: 00:08.0 [1022/1537] enabled hudson_enable() PCI: 00:10.0 [1022/7814] enabled hudson_enable() Situation occurs at the moment when PCI bus is being scanned. Checked potencial reasons Several possible reasons for problems have been checked, but the problems continued. Tried to modify apu2/PlatformGnbPcie.c file like below. - PCIE_ENGINE_DATA_INITIALIZER ( PciePortEngine , 4 , 7 ), + PCIE_ENGINE_DATA_INITIALIZER ( PciePortEngine , 4 , 4 ), After modification system worked as before. The problems still occur. Measured voltages at CLKREQ4# and PE4RST# pins. All the time there was occurring high states for listed pins. Voltage at CLKREQ4# was about 0.02 V lower than expansion Ethernet controller card power supply voltage and voltage at PE4RST# was about 0.02 V higher than Ethernet controller card power supply voltage. The difference can be considered a measurement error. Diff files from boot logs Full diff files from APU2 boot logs between Ethernet Controller placed in the mPCIe1 slot (J14) and it placed in mPCIe2 slot (J13): diff of boot logs diff of ip a command logs diff of lspcie command logs diff of lsusb command logs","title":"Mpcie1 mpcie2 ethernet card"},{"location":"debug/mpcie1_mpcie2_ethernet_card/#problems-with-apu2-when-using-mini-pci-express-dual-gigabit-ethernet-controller-card","text":"","title":"Problems with APU2 when using Mini PCI-Express Dual Gigabit Ethernet Controller Card"},{"location":"debug/mpcie1_mpcie2_ethernet_card/#problems","text":"When Ethernet Controller Card is placed in mPCIe1 slot (J14) placed extension cards is recognized by OS but standard Ethernet output placed on APU2 board can't receive correct IP adress. So it doesn't work correct. When Ethernet Controller Card is placed in mPCIe2 slot (J13) 2 additional Ethernet controller are not visible in OS. Standard Ethernet output placed on APU2 board works well. Device detection has been checked using ip a , lspci and dmesg . The results are shown in the table below. +-----+-----------------------------+ | dev | visibility | +-----+--------------+--------------+ | eth | mPCIe1 (J14) | mPCIe2 (J13) | +-----+--------------+--------------+ | 0 | yes | yes | | 1 | yes | yes | | 2 | yes | yes | | 3 | yes | no | | 4 | yes | no | +--------------------+--------------+","title":"Problems"},{"location":"debug/mpcie1_mpcie2_ethernet_card/#solution-of-the-problems","text":"Changing the value from 0xA to 0xF of the part of variable named data (showed under the following line ) fixed the problems described in this file. This modification enables the clock regardless of the CLKREQ line state.","title":"Solution of the problems"},{"location":"debug/mpcie1_mpcie2_ethernet_card/#mini-pci-express-dual-gigabit-ethernet-controller-card-elements","text":"On a board are located PCI bridge ASMedia Technology Inc. Device 1182 and 2 Ethernet controllers Realtek Semiconductor Co., Ltd. RTL8111/8168/8411 .","title":"Mini PCI-Express Dual Gigabit Ethernet Controller Card elements"},{"location":"debug/mpcie1_mpcie2_ethernet_card/#booting-lags","text":"When Ethernet Controller is placed in the mPCIe1 slot (J14) and booting is at network devices setup time occurs long lag. In this case eth0 device can not get correct IP. After this next booting processes take same normal time. The reason may be multiple failed attempts to obtain an IP address. That problem doesn't exist for the mPCIe2 slot (J13). Reason of that was time out value for DHCP client set to few minutes. After disabling DHCP client for eth0 interface booting lag doesn't occurs. Mentioned booting lag is not a bug.","title":"Booting lags"},{"location":"debug/mpcie1_mpcie2_ethernet_card/#boot-logs-comparison","text":"Level of the detail of booting logs was set at 6:DEBUG . The full list varies between logs is placed at the end file. The most suspicious difference in logs is placed below. For mPCIe2 : PCI: Static device PCI: 00:02.5 not found, disabling it. For mPCIe1 : PCI: 00:02.5 subordinate bus PCI Express PCI: 00:02.5 [1022/1439] enabled This suggests a problem with device recognition when Ethernet Controller is placed in the mPCIe1 slot (J14). The reason for this can be concurent access of devices or incorrectly configured interrupt system. Surrounding the log of the case when Ethernet Controller is placed in the mPCIe1 slot (J14). scan_bus: scanning of bus CPU_CLUSTER: 0 took 15987 usecs PCI: pci_scan_bus for bus 00 PCI: 00:00.0 [1022/1566] enabled PCI: 00:02.0 [1022/156b] enabled PCI: Static device PCI: 00:02.1 not found, disabling it. PCI: 00:02.2 subordinate bus PCI Express PCI: 00:02.2 [1022/1439] enabled PCI: 00:02.3 subordinate bus PCI Express PCI: 00:02.3 [1022/1439] enabled PCI: 00:02.4 subordinate bus PCI Express PCI: 00:02.4 [1022/1439] enabled PCI: Static device PCI: 00:02.5 not found, disabling it. PCI: 00:08.0 [1022/1537] enabled hudson_enable() PCI: 00:10.0 [1022/7814] enabled hudson_enable() Situation occurs at the moment when PCI bus is being scanned.","title":"Boot logs comparison"},{"location":"debug/mpcie1_mpcie2_ethernet_card/#checked-potencial-reasons","text":"Several possible reasons for problems have been checked, but the problems continued. Tried to modify apu2/PlatformGnbPcie.c file like below. - PCIE_ENGINE_DATA_INITIALIZER ( PciePortEngine , 4 , 7 ), + PCIE_ENGINE_DATA_INITIALIZER ( PciePortEngine , 4 , 4 ), After modification system worked as before. The problems still occur. Measured voltages at CLKREQ4# and PE4RST# pins. All the time there was occurring high states for listed pins. Voltage at CLKREQ4# was about 0.02 V lower than expansion Ethernet controller card power supply voltage and voltage at PE4RST# was about 0.02 V higher than Ethernet controller card power supply voltage. The difference can be considered a measurement error.","title":"Checked potencial reasons"},{"location":"debug/mpcie1_mpcie2_ethernet_card/#diff-files-from-boot-logs","text":"Full diff files from APU2 boot logs between Ethernet Controller placed in the mPCIe1 slot (J14) and it placed in mPCIe2 slot (J13): diff of boot logs diff of ip a command logs diff of lspcie command logs diff of lsusb command logs","title":"Diff files from boot logs"},{"location":"debug/mpcie2/","text":"ASM1061 in the J13 slot problems Rationale mPCIe 2 slot (J13) on APU2 devices has problems, when ASM1061 controllers are used. With disk connected, device enters bootloop and never boots. When no disks are connected, system boots normally and controller is detectable using lspci . Another problem is, that normally ASM1061 contoller on the mPCIe board like, e.g. this Delock adapter , is not detectable in mPCIe 2 slot at all. One need to modify the apu2/romstage.c file and enable always on Clock for GFX PCIE slot, like this (in cache_as_ram_main function, after clock are set, see here for reference): data = *((u32 *)(ACPI_MMIO_BASE + MISC_BASE + FCH_MISC_REG04)); data &= 0xFFFFFF0F; data |= 0xF << (1 * 4); // CLKREQ GFX always on. *((u32 *)(ACPI_MMIO_BASE + MISC_BASE + FCH_MISC_REG04)) = data; See in BKDG paragraph 3.26.11: MISCx04 ClkOutputCntrl register Symptoms Currently after connecting disk - enters boot loop. Problem occurs in SeaBIOS's AHCI driver. ahci_port_detect routine/thread. AHCI reports PORT_IRQ_IF_ERR or PORT_IRQ_IF_NONFATAL errors: According to AHCI spec , paragraph 3.3.5 |cff47000| AHCI/1: ... intbits 0x8000002, status 0x58 .. ... or ... |cff47000| AHCI/1: ... intbits 0x40000001, status 0x51 .. Reset happens just after setting transfer mode command is sent. I've tried setting UDMA, MultiDMA or PIO modes and it's still the same (reset). |cff47000| AHCI/1: supported modes: udma 6, multi-dma 2, pio 4 |cff47000| AHCI/1: Set transfer mode to default PIO |cff47000| AHCI/1: send cmd ... |cff47000| AHCI/1: ... intbits 0x1, status 0x50, err 0x0 ... |cff47000| AHCI/1: ... finished, status 0x50, OK # reset happens always here Carried out tests Testing ASM1061 was performed for 2 types of Delock 95233 modules: - module with soldered R58\u00b9 resistor - modified module without R58\u00b9 resistor (1) R58 resistor is placed next to CON1 connector Test results are the same for both types of modules and as follows: Delock module is attached to mPCIe2 slot and SATA disk is connected before platform boot process. In that case boot process went into 'infinite boot loop'. It went to payload menu, hanged and after few seconds performed reboot automatically. During booting, user can't do any action. There are no response from apu platform to any button pressing. Only option to went through boot process without troubles is to disconnect SATA disk and reboot platform again. Delock module is attached to mPCIe2 slot, but no SATA disk is connected before and during platform boot process. Boot process goes smoothly to seaBIOS menu and OS booting was performed correctly also. Under Debian OS, ASM controller is detected (check it with e.g. dmesg | grep \"ahci\" . root@debian:~# dmesg | grep \"ahci\" [ 9.370761] ahci 0000:00:11.0: version 3.0 [ 9.371737] ahci 0000:00:11.0: AHCI 0001.0300 32 slots 2 ports 6 Gbps 0x3 impl SATA mode [ 9.380220] ahci 0000:00:11.0: flags: 64bit ncq sntf ilck pm led clo pmp fbs pio slum part ccc [ 9.389294] ahci 0000:00:11.0: both AHCI_HFLAG_MULTI_MSI flag set and custom irq handler implemented [ 9.401327] scsi host0: ahci [ 9.407101] scsi host1: ahci [ 9.432821] ahci 0000:01:00.0: SSS flag set, parallel bus scan disabled [ 9.564657] ahci 0000:01:00.0: AHCI 0001.0200 32 slots 2 ports 6 Gbps 0x3 impl SATA mode [ 9.572796] ahci 0000:01:00.0: flags: 64bit ncq sntf stag led clo pmp pio slum part ccc sxs [ 9.583302] scsi host2: ahci [ 9.586835] scsi host3: ahci Ahci 0000:01:00.0 is Dealock 95233 SATA controller. After plugged-in SATA disk (no matter to what SATA port), configuration problems appeared. Although, OS was trying to communicate with SATA, some warnings and errors occurred. Example log is shown below. [ 68.190693] ata3: exception Emask 0x10 SAct 0x0 SErr 0x4040000 action 0xe frozen [ 68.198142] ata3: irq_stat 0x00000040, connection status changed [ 68.204199] ata3: SError: { CommWake DevExch } [ 68.208743] ata3: hard resetting link [ 73.826743] ata3: SATA link up 3.0 Gbps (SStatus 123 SControl 300) [ 73.839192] ata3.00: ATA-8: ST500LM012 HN-M500MBB, 2AR10002, max UDMA/133 [ 73.846011] ata3.00: 976773168 sectors, multi 0: LBA48 NCQ (depth 31/32), AA [ 73.859579] ata3.00: configured for UDMA/133 [ 73.863903] ata3: EH complete [ 73.867515] scsi 2:0:0:0: Direct-Access ATA ST500LM012 HN-M5 0002 PQ: 0 ANSI: 5 [ 73.876569] sd 2:0:0:0: Attached scsi generic sg1 type 0 [ 73.876592] sd 2:0:0:0: [sdb] 976773168 512-byte logical blocks: (500 GB/466 GiB) [ 73.876597] sd 2:0:0:0: [sdb] 4096-byte physical blocks [ 73.876665] sd 2:0:0:0: [sdb] Write Protect is off [ 73.876827] sd 2:0:0:0: [sdb] Write cache: enabled, read cache: enabled, doesn't support DPO or FUA [ 73.941291] sdb: sdb1 sdb2 < sdb5 > [ 73.946498] sd 2:0:0:0: [sdb] Attached SCSI disk Pay attention that some data is sent correctly between controller and OS (e.g. HDD disk information or configuration). However, platform hanged in that stage and didn't respond to any command. Therefore, faultless connection can't be established and HDD disk plugged via Delock module can't be treated as working. Possible reasons It looks like problem can be considered rather as hardware. Also it is Delock 95233 module/ASM1061 controller problem. Tested SATA disk works fine when attached to SATA connector on apu2 board. After searching solutions, 2 main appears as most useful: Power supply is not sufficient and drops out to too low level. However, tested disk was powered with around 5V. Problems with power supply drop out occurred in some SATA disk, but mostly are related to 12V disks Low quality cables and connectors on Delock module Both solutions haven't been tested yet. But it looks like they should be considered and carried out.","title":"Mpcie2"},{"location":"debug/mpcie2/#asm1061-in-the-j13-slot-problems","text":"","title":"ASM1061 in the J13 slot problems"},{"location":"debug/mpcie2/#rationale","text":"mPCIe 2 slot (J13) on APU2 devices has problems, when ASM1061 controllers are used. With disk connected, device enters bootloop and never boots. When no disks are connected, system boots normally and controller is detectable using lspci . Another problem is, that normally ASM1061 contoller on the mPCIe board like, e.g. this Delock adapter , is not detectable in mPCIe 2 slot at all. One need to modify the apu2/romstage.c file and enable always on Clock for GFX PCIE slot, like this (in cache_as_ram_main function, after clock are set, see here for reference): data = *((u32 *)(ACPI_MMIO_BASE + MISC_BASE + FCH_MISC_REG04)); data &= 0xFFFFFF0F; data |= 0xF << (1 * 4); // CLKREQ GFX always on. *((u32 *)(ACPI_MMIO_BASE + MISC_BASE + FCH_MISC_REG04)) = data; See in BKDG paragraph 3.26.11: MISCx04 ClkOutputCntrl register","title":"Rationale"},{"location":"debug/mpcie2/#symptoms","text":"Currently after connecting disk - enters boot loop. Problem occurs in SeaBIOS's AHCI driver. ahci_port_detect routine/thread. AHCI reports PORT_IRQ_IF_ERR or PORT_IRQ_IF_NONFATAL errors: According to AHCI spec , paragraph 3.3.5 |cff47000| AHCI/1: ... intbits 0x8000002, status 0x58 .. ... or ... |cff47000| AHCI/1: ... intbits 0x40000001, status 0x51 .. Reset happens just after setting transfer mode command is sent. I've tried setting UDMA, MultiDMA or PIO modes and it's still the same (reset). |cff47000| AHCI/1: supported modes: udma 6, multi-dma 2, pio 4 |cff47000| AHCI/1: Set transfer mode to default PIO |cff47000| AHCI/1: send cmd ... |cff47000| AHCI/1: ... intbits 0x1, status 0x50, err 0x0 ... |cff47000| AHCI/1: ... finished, status 0x50, OK # reset happens always here","title":"Symptoms"},{"location":"debug/mpcie2/#carried-out-tests","text":"Testing ASM1061 was performed for 2 types of Delock 95233 modules: - module with soldered R58\u00b9 resistor - modified module without R58\u00b9 resistor (1) R58 resistor is placed next to CON1 connector Test results are the same for both types of modules and as follows: Delock module is attached to mPCIe2 slot and SATA disk is connected before platform boot process. In that case boot process went into 'infinite boot loop'. It went to payload menu, hanged and after few seconds performed reboot automatically. During booting, user can't do any action. There are no response from apu platform to any button pressing. Only option to went through boot process without troubles is to disconnect SATA disk and reboot platform again. Delock module is attached to mPCIe2 slot, but no SATA disk is connected before and during platform boot process. Boot process goes smoothly to seaBIOS menu and OS booting was performed correctly also. Under Debian OS, ASM controller is detected (check it with e.g. dmesg | grep \"ahci\" . root@debian:~# dmesg | grep \"ahci\" [ 9.370761] ahci 0000:00:11.0: version 3.0 [ 9.371737] ahci 0000:00:11.0: AHCI 0001.0300 32 slots 2 ports 6 Gbps 0x3 impl SATA mode [ 9.380220] ahci 0000:00:11.0: flags: 64bit ncq sntf ilck pm led clo pmp fbs pio slum part ccc [ 9.389294] ahci 0000:00:11.0: both AHCI_HFLAG_MULTI_MSI flag set and custom irq handler implemented [ 9.401327] scsi host0: ahci [ 9.407101] scsi host1: ahci [ 9.432821] ahci 0000:01:00.0: SSS flag set, parallel bus scan disabled [ 9.564657] ahci 0000:01:00.0: AHCI 0001.0200 32 slots 2 ports 6 Gbps 0x3 impl SATA mode [ 9.572796] ahci 0000:01:00.0: flags: 64bit ncq sntf stag led clo pmp pio slum part ccc sxs [ 9.583302] scsi host2: ahci [ 9.586835] scsi host3: ahci Ahci 0000:01:00.0 is Dealock 95233 SATA controller. After plugged-in SATA disk (no matter to what SATA port), configuration problems appeared. Although, OS was trying to communicate with SATA, some warnings and errors occurred. Example log is shown below. [ 68.190693] ata3: exception Emask 0x10 SAct 0x0 SErr 0x4040000 action 0xe frozen [ 68.198142] ata3: irq_stat 0x00000040, connection status changed [ 68.204199] ata3: SError: { CommWake DevExch } [ 68.208743] ata3: hard resetting link [ 73.826743] ata3: SATA link up 3.0 Gbps (SStatus 123 SControl 300) [ 73.839192] ata3.00: ATA-8: ST500LM012 HN-M500MBB, 2AR10002, max UDMA/133 [ 73.846011] ata3.00: 976773168 sectors, multi 0: LBA48 NCQ (depth 31/32), AA [ 73.859579] ata3.00: configured for UDMA/133 [ 73.863903] ata3: EH complete [ 73.867515] scsi 2:0:0:0: Direct-Access ATA ST500LM012 HN-M5 0002 PQ: 0 ANSI: 5 [ 73.876569] sd 2:0:0:0: Attached scsi generic sg1 type 0 [ 73.876592] sd 2:0:0:0: [sdb] 976773168 512-byte logical blocks: (500 GB/466 GiB) [ 73.876597] sd 2:0:0:0: [sdb] 4096-byte physical blocks [ 73.876665] sd 2:0:0:0: [sdb] Write Protect is off [ 73.876827] sd 2:0:0:0: [sdb] Write cache: enabled, read cache: enabled, doesn't support DPO or FUA [ 73.941291] sdb: sdb1 sdb2 < sdb5 > [ 73.946498] sd 2:0:0:0: [sdb] Attached SCSI disk Pay attention that some data is sent correctly between controller and OS (e.g. HDD disk information or configuration). However, platform hanged in that stage and didn't respond to any command. Therefore, faultless connection can't be established and HDD disk plugged via Delock module can't be treated as working.","title":"Carried out tests"},{"location":"debug/mpcie2/#possible-reasons","text":"It looks like problem can be considered rather as hardware. Also it is Delock 95233 module/ASM1061 controller problem. Tested SATA disk works fine when attached to SATA connector on apu2 board. After searching solutions, 2 main appears as most useful: Power supply is not sufficient and drops out to too low level. However, tested disk was powered with around 5V. Problems with power supply drop out occurred in some SATA disk, but mostly are related to 12V disks Low quality cables and connectors on Delock module Both solutions haven't been tested yet. But it looks like they should be considered and carried out.","title":"Possible reasons"},{"location":"debug/mpcie_ethernet/","text":"Intro Device under test is mPCIe extension card with double Ethernet interfaces exposed. Their MAC addresses are: 00:e0:4c:68:05:c8 00:e0:4c:68:05:c9 Platform is APU2C4 Firmware is coreboot v4.5.8 from PC engines fork. Operating system is Voyage Linux. uname -a output: Linux voyage 3.16.7-ckt9-voyage #1 SMP Wed Apr 22 23:04:57 HKT 2015 x86_64 GNU/Linux mPCIe slot 1 slot Device identification Ethernet interfaces from extension card are correctly detected: ip a output: 1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever 2: eth0: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc pfifo_fast state DOWN group default qlen 1000 link/ether 00:e0:4c:68:05:c8 brd ff:ff:ff:ff:ff:ff inet 10.0.0.10/24 brd 10.0.0.255 scope global eth0 valid_lft forever preferred_lft forever inet6 fe80::2e0:4cff:fe68:5c8/64 scope link valid_lft forever preferred_lft forever 3: eth1: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc pfifo_fast state DOWN group default qlen 1000 link/ether 00:e0:4c:68:05:c9 brd ff:ff:ff:ff:ff:ff inet 192.168.0.120/24 brd 192.168.0.255 scope global eth1 valid_lft forever preferred_lft forever inet6 fe80::2e0:4cff:fe68:5c9/64 scope link valid_lft forever preferred_lft forever 4: eth2: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc mq state DOWN group default qlen 1000 link/ether 00:0d:b9:43:3f:bc brd ff:ff:ff:ff:ff:ff inet6 fe80::20d:b9ff:fe43:3fbc/64 scope link valid_lft forever preferred_lft forever 5: eth3: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc mq state DOWN group default qlen 1000 link/ether 00:0d:b9:43:3f:bd brd ff:ff:ff:ff:ff:ff inet 192.168.0.108/24 brd 192.168.0.255 scope global eth3 valid_lft forever preferred_lft forever inet6 fe80::20d:b9ff:fe43:3fbd/64 scope link valid_lft forever preferred_lft forever 6: eth4: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP group default qlen 1000 link/ether 00:0d:b9:43:3f:be brd ff:ff:ff:ff:ff:ff inet 192.168.0.112/24 brd 192.168.0.255 scope global eth4 valid_lft forever preferred_lft forever inet6 fe80::20d:b9ff:fe43:3fbe/64 scope link valid_lft forever preferred_lft forever output: lspci 00:00.0 Host bridge: Advanced Micro Devices, Inc. [AMD] Device 1566 00:02.0 Host bridge: Advanced Micro Devices, Inc. [AMD] Device 156b 00:02.2 PCI bridge: Advanced Micro Devices, Inc. [AMD] Family 16h Processor Functions 5:1 00:02.3 PCI bridge: Advanced Micro Devices, Inc. [AMD] Family 16h Processor Functions 5:1 00:02.4 PCI bridge: Advanced Micro Devices, Inc. [AMD] Family 16h Processor Functions 5:1 00:02.5 PCI bridge: Advanced Micro Devices, Inc. [AMD] Family 16h Processor Functions 5:1 00:08.0 Encryption controller: Advanced Micro Devices, Inc. [AMD] Device 1537 00:10.0 USB controller: Advanced Micro Devices, Inc. [AMD] FCH USB XHCI Controller (rev 11) 00:11.0 SATA controller: Advanced Micro Devices, Inc. [AMD] FCH SATA Controller [IDE mode] (rev 39) 00:13.0 USB controller: Advanced Micro Devices, Inc. [AMD] FCH USB EHCI Controller (rev 39) 00:14.0 SMBus: Advanced Micro Devices, Inc. [AMD] FCH SMBus Controller (rev 42) 00:14.3 ISA bridge: Advanced Micro Devices, Inc. [AMD] FCH LPC Bridge (rev 11) 00:14.7 SD Host controller: Advanced Micro Devices, Inc. [AMD] FCH SD Flash Controller (rev 01) 00:18.0 Host bridge: Advanced Micro Devices, Inc. [AMD] Device 1580 00:18.1 Host bridge: Advanced Micro Devices, Inc. [AMD] Device 1581 00:18.2 Host bridge: Advanced Micro Devices, Inc. [AMD] Device 1582 00:18.3 Host bridge: Advanced Micro Devices, Inc. [AMD] Device 1583 00:18.4 Host bridge: Advanced Micro Devices, Inc. [AMD] Device 1584 00:18.5 Host bridge: Advanced Micro Devices, Inc. [AMD] Device 1585 01:00.0 Ethernet controller: Intel Corporation I210 Gigabit Network Connection (rev 03) 02:00.0 Ethernet controller: Intel Corporation I210 Gigabit Network Connection (rev 03) 03:00.0 Ethernet controller: Intel Corporation I210 Gigabit Network Connection (rev 03) 04:00.0 PCI bridge: ASMedia Technology Inc. Device 1182 05:03.0 PCI bridge: ASMedia Technology Inc. Device 1182 05:07.0 PCI bridge: ASMedia Technology Inc. Device 1182 06:00.0 Ethernet controller: Realtek Semiconductor Co., Ltd. RTL8111/8168/8411 PCI Express Gigabit Ether) 07:00.0 Ethernet controller: Realtek Semiconductor Co., Ltd. RTL8111/8168/8411 Our extension card controllers are detected as follows: lspci -v -s 06:00.00 output: 06:00.0 Ethernet controller: Realtek Semiconductor Co., Ltd. RTL8111/8168/8411 PCI Express Gigabit Ethernet Controller (rev 06) Subsystem: Realtek Semiconductor Co., Ltd. Device 0123 Flags: bus master, fast devsel, latency 0, IRQ 75 I/O ports at 1000 [size=256] Memory at f7800000 (64-bit, non-prefetchable) [size=4K] Memory at f7600000 (64-bit, prefetchable) [size=16K] Capabilities: [40] Power Management version 3 Capabilities: [50] MSI: Enable+ Count=1/1 Maskable- 64bit+ Capabilities: [70] Express Endpoint, MSI 01 Capabilities: [b0] MSI-X: Enable- Count=4 Masked- Capabilities: [d0] Vital Product Data Capabilities: [100] Advanced Error Reporting Capabilities: [140] Virtual Channel Capabilities: [160] Device Serial Number 01-00-00-00-68-4c-e0-00 Kernel driver in use: r8169 lspci -v -s 07:00.00 output: 07:00.0 Ethernet controller: Realtek Semiconductor Co., Ltd. RTL8111/8168/8411 PCI Express Gigabit Ethernet Controller (rev 06) Subsystem: Realtek Semiconductor Co., Ltd. Device 0123 Flags: bus master, fast devsel, latency 0, IRQ 76 I/O ports at 2000 [size=256] Memory at f7900000 (64-bit, non-prefetchable) [size=4K] Memory at f7700000 (64-bit, prefetchable) [size=16K] Capabilities: [40] Power Management version 3 Capabilities: [50] MSI: Enable+ Count=1/1 Maskable- 64bit+ Capabilities: [70] Express Endpoint, MSI 01 Capabilities: [b0] MSI-X: Enable- Count=4 Masked- Capabilities: [d0] Vital Product Data Capabilities: [100] Advanced Error Reporting Capabilities: [140] Virtual Channel Capabilities: [160] Device Serial Number 01-00-00-00-68-4c-e0-00 Kernel driver in use: r8169 Establishing connection For the purpose of following test, automatic connection initialization was disabled by erasing /etc/network/interfaces file content. No network manager was present as well. Available Ethernet interfaces list: 2: eth0: <BROADCAST,MULTICAST> mtu 1500 qdisc noop state DOWN group default qlen 1000 link/ether 00:e0:4c:68:05:c8 brd ff:ff:ff:ff:ff:ff 3: eth1: <BROADCAST,MULTICAST> mtu 1500 qdisc noop state DOWN group default qlen 1000 link/ether 00:e0:4c:68:05:c9 brd ff:ff:ff:ff:ff:ff 4: eth2: <BROADCAST,MULTICAST> mtu 1500 qdisc noop state DOWN group default qlen 1000 link/ether 00:0d:b9:43:3f:bc brd ff:ff:ff:ff:ff:ff 5: eth3: <BROADCAST,MULTICAST> mtu 1500 qdisc noop state DOWN group default qlen 1000 link/ether 00:0d:b9:43:3f:bd brd ff:ff:ff:ff:ff:ff 6: eth4: <BROADCAST,MULTICAST> mtu 1500 qdisc noop state DOWN group default qlen 1000 link/ether 00:0d:b9:43:3f:be brd ff:ff:ff:ff:ff:ff First interface (00:e0:4c:68:05:c9 MAC address) from extension card: ifconfig eth1 up output: [ 105.204628] r8169 0000:07:00.0: firmware: direct-loading firmware rtl_nic/rtl8168e-3.fw [ 105.313609] r8169 0000:07:00.0 eth1: link down [ 105.318155] r8169 0000:07:00.0 eth1: link down [ 105.318482] IPv6: ADDRCONF(NETDEV_UP): eth1: link is not ready [ 107.209683] r8169 0000:07:00.0 eth1: link up [ 107.214014] IPv6: ADDRCONF(NETDEV_CHANGE): eth1: link becomes ready dhclient eth1 ifconfig eth1 output: eth1 Link encap:Ethernet HWaddr 00:e0:4c:68:05:c9 inet addr:192.168.0.120 Bcast:192.168.0.255 Mask:255.255.255.0 inet6 addr: fe80::2e0:4cff:fe68:5c9/64 Scope:Link UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1 RX packets:22 errors:0 dropped:0 overruns:0 frame:0 TX packets:19 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000 RX bytes:2945 (2.8 KiB) TX bytes:2060 (2.0 KiB) Pinging some internal or external addresses from APU2 works: ping 192.168.0.1 output: PING 192.168.0.1 (192.168.0.1) 56(84) bytes of data. 64 bytes from 192.168.0.1: icmp_seq=1 ttl=64 time=0.374 ms 64 bytes from 192.168.0.1: icmp_seq=2 ttl=64 time=0.266 ping google.pl output: PING google.pl (172.217.20.195) 56(84) bytes of data. 64 bytes from waw02s08-in-f195.1e100.net (172.217.20.195): icmp_seq=1 ttl=57 time=6.52 ms 64 bytes from waw02s08-in-f195.1e100.net (172.217.20.195): icmp_seq=2 ttl=57 time=6.48 ms Pinging eth1 interface address from different PC works as well: ping 192.168.0.120 output: PING 192.168.0.120 (192.168.0.120) 56(84) bytes of data. 64 bytes from 192.168.0.120: icmp_seq=1 ttl=64 time=0.592 ms 64 bytes from 192.168.0.120: icmp_seq=2 ttl=64 time=0.482 ms Second interface (00:e0:4c:68:05:c8 MAC address) from extension card: Reboot was executed first. ifconfig eth0 up output: [ 218.000514] r8169 0000:06:00.0: firmware: direct-loading firmware rtl_nic/rtl8168e-3.fw [ 218.118256] r8169 0000:06:00.0 eth0: link down [ 218.122760] r8169 0000:06:00.0 eth0: link down [ 218.127347] IPv6: ADDRCONF(NETDEV_UP): eth0: link is not ready [ 220.014881] r8169 0000:06:00.0 eth0: link up [ 220.019250] IPv6: ADDRCONF(NETDEV_CHANGE): eth0: link becomes ready dhclient eth0 ifconfig eth0 output: eth0 Link encap:Ethernet HWaddr 00:e0:4c:68:05:c8 inet addr:192.168.0.123 Bcast:192.168.0.255 Mask:255.255.255.0 inet6 addr: fe80::2e0:4cff:fe68:5c8/64 Scope:Link UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1 RX packets:3 errors:0 dropped:0 overruns:0 frame:0 TX packets:9 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000 RX bytes:1240 (1.2 KiB) TX bytes:1262 (1.2 KiB) Pinging some internal or external addresses from APU2 works: ping 192.168.0.1 output: PING 192.168.0.1 (192.168.0.1) 56(84) bytes of data. 64 bytes from 192.168.0.1: icmp_seq=1 ttl=64 time=0.391 ms 64 bytes from 192.168.0.1: icmp_seq=2 ttl=64 time=0.233 ms ping google.pl output: PING google.pl (172.217.20.195) 56(84) bytes of data. 64 bytes from waw02s08-in-f3.1e100.net (172.217.20.195): icmp_seq=1 ttl=57 time=6.59 ms 64 bytes from waw02s08-in-f3.1e100.net (172.217.20.195): icmp_seq=2 ttl=57 time=6.44 ms Pinging eth0 interface address from different PC works as well: PING 192.168.0.123 (192.168.0.123) 56(84) bytes of data. 64 bytes from 192.168.0.120: icmp_seq=1 ttl=64 time=0.592 ms 64 bytes from 192.168.0.120: icmp_seq=2 ttl=64 time=0.482 ms Operating multiple interfaces at once Following interfaces have been connected using separate Ethernet cables: both interfaces from mPCIe extension card two out of three interfaces from APU2 board Interfaces configuration ifconfig eth0 up output: [ 400.659117] r8169 0000:06:00.0: firmware: direct-loading firmware rtl_nic/rtl8168e-3.fw [ 400.762913] r8169 0000:06:00.0 eth0: link down [ 400.767438] r8169 0000:06:00.0 eth0: link down [ 400.772017] IPv6: ADDRCONF(NETDEV_UP): eth0: link is not ready [ 402.677778] r8169 0000:06:00.0 eth0: link up [ 402.682146] IPv6: ADDRCONF(NETDEV_CHANGE): eth0: link becomes ready dhclient eth0 ifconfig eth0 output: eth0 Link encap:Ethernet HWaddr 00:e0:4c:68:05:c8 inet addr:192.168.0.132 Bcast:192.168.0.255 Mask:255.255.255.0 inet6 addr: fe80::2e0:4cff:fe68:5c8/64 Scope:Link UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1 RX packets:7 errors:0 dropped:0 overruns:0 frame:0 TX packets:10 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000 RX bytes:1480 (1.4 KiB) TX bytes:1332 (1.3 KiB) ifconfig eth1 up output: [ 449.690659] r8169 0000:07:00.0 eth1: link down [ 449.690686] r8169 0000:07:00.0 eth1: link down [ 449.699870] IPv6: ADDRCONF(NETDEV_UP): eth1: link is not ready [ 451.626151] r8169 0000:07:00.0 eth1: link up [ 451.630502] IPv6: ADDRCONF(NETDEV_CHANGE): eth1: link becomes ready dhclient eth1 ifconfig eth1 output: eth1 Link encap:Ethernet HWaddr 00:e0:4c:68:05:c9 inet addr:192.168.0.133 Bcast:192.168.0.255 Mask:255.255.255.0 inet6 addr: fe80::2e0:4cff:fe68:5c9/64 Scope:Link UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1 RX packets:4 errors:0 dropped:0 overruns:0 frame:0 TX packets:9 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000 RX bytes:1300 (1.2 KiB) TX bytes:1262 (1.2 KiB) ifconfig eth2 up output: [ 484.573775] IPv6: ADDRCONF(NETDEV_UP): eth2: link is not ready [ 487.225321] igb 0000:01:00.0 eth2: igb: eth2 NIC Link is Up 100 Mbps Full Duplex, FlowX [ 487.234971] IPv6: ADDRCONF(NETDEV_CHANGE): eth2: link becomes ready dhclient eth2 ifconfig eth2 output: eth2 Link encap:Ethernet HWaddr 00:0d:b9:43:3f:bc inet addr:192.168.0.134 Bcast:192.168.0.255 Mask:255.255.255.0 inet6 addr: fe80::20d:b9ff:fe43:3fbc/64 Scope:Link UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1 RX packets:11 errors:0 dropped:0 overruns:0 frame:0 TX packets:10 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000 RX bytes:1720 (1.6 KiB) TX bytes:1332 (1.3 KiB) Memory:f7a00000-f7a1ffff ifconfig eth4 up output: [ 528.424071] IPv6: ADDRCONF(NETDEV_UP): eth4: link is not ready [ 531.111624] igb 0000:03:00.0 eth4: igb: eth4 NIC Link is Up 100 Mbps Full Duplex, FlowX [ 531.121238] IPv6: ADDRCONF(NETDEV_CHANGE): eth4: link becomes ready dhclient eth4 ifconfig eth4 output: eth4 Link encap:Ethernet HWaddr 00:0d:b9:43:3f:be inet addr:192.168.0.135 Bcast:192.168.0.255 Mask:255.255.255.0 inet6 addr: fe80::20d:b9ff:fe43:3fbe/64 Scope:Link UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1 RX packets:19 errors:0 dropped:0 overruns:0 frame:0 TX packets:10 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000 RX bytes:2200 (2.1 KiB) TX bytes:1332 (1.3 KiB) Memory:f7c00000-f7c1ffff Each of them can be separately reached from network ping 192.168.0.132 output: PING 192.168.0.132 (192.168.0.132) 56(84) bytes of data. 64 bytes from 192.168.0.132: icmp_seq=2 ttl=64 time=410 ms 64 bytes from 192.168.0.132: icmp_seq=3 ttl=64 time=551 ms ping 192.168.0.133 output: PING 192.168.0.133 (192.168.0.133) 56(84) bytes of data. 64 bytes from 192.168.0.133: icmp_seq=1 ttl=64 time=4.31 ms 64 bytes from 192.168.0.133: icmp_seq=2 ttl=64 time=1.49 ms ping 192.168.0.134 output: PING 192.168.0.134 (192.168.0.134) 56(84) bytes of data. 64 bytes from 192.168.0.134: icmp_seq=1 ttl=64 time=3.02 ms 64 bytes from 192.168.0.134: icmp_seq=2 ttl=64 time=1.71 ms ping 192.168.0.135 output: PING 192.168.0.135 (192.168.0.135) 56(84) bytes of data. 64 bytes from 192.168.0.135: icmp_seq=1 ttl=64 time=2.80 ms 64 bytes from 192.168.0.135: icmp_seq=2 ttl=64 time=1.71 ms mPCIe slot 2 Device identification Ethernet interfaces from extension card are not detected: lspci output: 00:00.0 Host bridge: Advanced Micro Devices, Inc. [AMD] Device 1566 00:02.0 Host bridge: Advanced Micro Devices, Inc. [AMD] Device 156b 00:02.2 PCI bridge: Advanced Micro Devices, Inc. [AMD] Family 16h Processor Functions 5:1 00:02.3 PCI bridge: Advanced Micro Devices, Inc. [AMD] Family 16h Processor Functions 5:1 00:02.4 PCI bridge: Advanced Micro Devices, Inc. [AMD] Family 16h Processor Functions 5:1 00:08.0 Encryption controller: Advanced Micro Devices, Inc. [AMD] Device 1537 00:10.0 USB controller: Advanced Micro Devices, Inc. [AMD] FCH USB XHCI Controller (rev 11) 00:11.0 SATA controller: Advanced Micro Devices, Inc. [AMD] FCH SATA Controller [IDE mode] (rev 39) 00:13.0 USB controller: Advanced Micro Devices, Inc. [AMD] FCH USB EHCI Controller (rev 39) 00:14.0 SMBus: Advanced Micro Devices, Inc. [AMD] FCH SMBus Controller (rev 42) 00:14.3 ISA bridge: Advanced Micro Devices, Inc. [AMD] FCH LPC Bridge (rev 11) 00:14.7 SD Host controller: Advanced Micro Devices, Inc. [AMD] FCH SD Flash Controller (rev 01) 00:18.0 Host bridge: Advanced Micro Devices, Inc. [AMD] Device 1580 00:18.1 Host bridge: Advanced Micro Devices, Inc. [AMD] Device 1581 00:18.2 Host bridge: Advanced Micro Devices, Inc. [AMD] Device 1582 00:18.3 Host bridge: Advanced Micro Devices, Inc. [AMD] Device 1583 00:18.4 Host bridge: Advanced Micro Devices, Inc. [AMD] Device 1584 00:18.5 Host bridge: Advanced Micro Devices, Inc. [AMD] Device 1585 01:00.0 Ethernet controller: Intel Corporation I210 Gigabit Network Connection (rev 03) 02:00.0 Ethernet controller: Intel Corporation I210 Gigabit Network Connection (rev 03) 03:00.0 Ethernet controller: Intel Corporation I210 Gigabit Network Connection (rev 03) ip a output: 1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever 2: eth0: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc mq state DOWN group default qlen 1000 link/ether 00:0d:b9:43:3f:bc brd ff:ff:ff:ff:ff:ff inet 192.168.0.135/24 brd 192.168.0.255 scope global eth0 valid_lft forever preferred_lft forever inet6 fe80::20d:b9ff:fe43:3fbc/64 scope link valid_lft forever preferred_lft forever 3: eth1: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc mq state DOWN group default qlen 1000 link/ether 00:0d:b9:43:3f:bd brd ff:ff:ff:ff:ff:ff inet 192.168.0.108/24 brd 192.168.0.255 scope global eth1 valid_lft forever preferred_lft forever inet6 fe80::20d:b9ff:fe43:3fbd/64 scope link valid_lft forever preferred_lft forever 4: eth2: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP group default qlen 1000 link/ether 00:0d:b9:43:3f:be brd ff:ff:ff:ff:ff:ff inet 192.168.0.112/24 brd 192.168.0.255 scope global eth2 valid_lft forever preferred_lft forever inet6 fe80::20d:b9ff:fe43:3fbe/64 scope link valid_lft forever preferred_lft forever mPCIe slot 2 with clock always enabled This is different from the previous one with the following change in source code: diff --git a/src/mainboard/pcengines/apu2/romstage.c b/src/mainboard/pcengines/apu2/romstage.c index a1c73d1e3424..f018ac5742ce 100644 --- a/src/mainboard/pcengines/apu2/romstage.c +++ b/src/mainboard/pcengines/apu2/romstage.c @@ -99,7 +99,9 @@ void cache_as_ram_main(unsigned long bist, unsigned long cpu_init_detectedx) data = *((u32 *)(ACPI_MMIO_BASE + MISC_BASE+FCH_MISC_REG04)); data &= 0xFFFFFF0F; - data |= 0xA << (1 * 4); // CLKREQ GFX to GFXCLK + // make GFXCLK to ignore CLKREQ# input + // force it to be always on + data |= 0xF << (1 * 4); // CLKREQ GFX to GFXCLK Device identification ip a output: 1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever 2: eth0: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc mq state DOWN group default qlen 1000 link/ether 00:0d:b9:43:3f:bc brd ff:ff:ff:ff:ff:ff inet 10.0.0.10/24 brd 10.0.0.255 scope global eth0 valid_lft forever preferred_lft forever 3: eth1: <BROADCAST,MULTICAST> mtu 1500 qdisc noop state DOWN group default qlen 1000 link/ether 00:0d:b9:43:3f:bd brd ff:ff:ff:ff:ff:ff 4: eth2: <BROADCAST,MULTICAST> mtu 1500 qdisc noop state DOWN group default qlen 1000 link/ether 00:0d:b9:43:3f:be brd ff:ff:ff:ff:ff:ff 5: eth3: <BROADCAST,MULTICAST> mtu 1500 qdisc noop state DOWN group default qlen 1000 link/ether 00:e0:4c:68:05:c8 brd ff:ff:ff:ff:ff:ff 6: eth4: <BROADCAST,MULTICAST> mtu 1500 qdisc noop state DOWN group default qlen 1000 link/ether 00:e0:4c:68:05:c9 brd ff:ff:ff:ff:ff:ff lspci output: 00:00.0 Host bridge: Advanced Micro Devices, Inc. [AMD] Device 1566 00:02.0 Host bridge: Advanced Micro Devices, Inc. [AMD] Device 156b 00:02.1 PCI bridge: Advanced Micro Devices, Inc. [AMD] Family 16h Processor Functions 5:1 00:02.2 PCI bridge: Advanced Micro Devices, Inc. [AMD] Family 16h Processor Functions 5:1 00:02.3 PCI bridge: Advanced Micro Devices, Inc. [AMD] Family 16h Processor Functions 5:1 00:02.4 PCI bridge: Advanced Micro Devices, Inc. [AMD] Family 16h Processor Functions 5:1 00:08.0 Encryption controller: Advanced Micro Devices, Inc. [AMD] Device 1537 00:10.0 USB controller: Advanced Micro Devices, Inc. [AMD] FCH USB XHCI Controller (rev 11) 00:11.0 SATA controller: Advanced Micro Devices, Inc. [AMD] FCH SATA Controller [IDE mode] (rev 39) 00:13.0 USB controller: Advanced Micro Devices, Inc. [AMD] FCH USB EHCI Controller (rev 39) 00:14.0 SMBus: Advanced Micro Devices, Inc. [AMD] FCH SMBus Controller (rev 42) 00:14.3 ISA bridge: Advanced Micro Devices, Inc. [AMD] FCH LPC Bridge (rev 11) 00:14.7 SD Host controller: Advanced Micro Devices, Inc. [AMD] FCH SD Flash Controller (rev 01) 00:18.0 Host bridge: Advanced Micro Devices, Inc. [AMD] Device 1580 00:18.1 Host bridge: Advanced Micro Devices, Inc. [AMD] Device 1581 00:18.2 Host bridge: Advanced Micro Devices, Inc. [AMD] Device 1582 00:18.3 Host bridge: Advanced Micro Devices, Inc. [AMD] Device 1583 00:18.4 Host bridge: Advanced Micro Devices, Inc. [AMD] Device 1584 00:18.5 Host bridge: Advanced Micro Devices, Inc. [AMD] Device 1585 01:00.0 PCI bridge: ASMedia Technology Inc. Device 1182 02:03.0 PCI bridge: ASMedia Technology Inc. Device 1182 02:07.0 PCI bridge: ASMedia Technology Inc. Device 1182 03:00.0 Ethernet controller: Realtek Semiconductor Co., Ltd. RTL8111/8168/8411 PCI Express Gigabit Ether) 04:00.0 Ethernet controller: Realtek Semiconductor Co., Ltd. RTL8111/8168/8411 PCI Express Gigabit Ether) 05:00.0 Ethernet controller: Intel Corporation I210 Gigabit Network Connection (rev 03) 06:00.0 Ethernet controller: Intel Corporation I210 Gigabit Network Connection (rev 03) 07:00.0 Ethernet controller: Intel Corporation I210 Gigabit Network Connection (rev 03) Our extension card controllers are detected as follows: lspci -v -s 03:00.00 output: 03:00.0 Ethernet controller: Realtek Semiconductor Co., Ltd. RTL8111/8168/8411 PCI Express Gigabit Ethernet Controller (rev 06) Subsystem: Realtek Semiconductor Co., Ltd. Device 0123 Flags: bus master, fast devsel, latency 0, IRQ 76 I/O ports at 1000 [size=256] Memory at f7800000 (64-bit, non-prefetchable) [size=4K] Memory at f7600000 (64-bit, prefetchable) [size=16K] Capabilities: [40] Power Management version 3 Capabilities: [50] MSI: Enable+ Count=1/1 Maskable- 64bit+ Capabilities: [70] Express Endpoint, MSI 01 Capabilities: [b0] MSI-X: Enable- Count=4 Masked- Capabilities: [d0] Vital Product Data Capabilities: [100] Advanced Error Reporting Capabilities: [140] Virtual Channel Capabilities: [160] Device Serial Number 01-00-00-00-68-4c-e0-00 Kernel driver in use: r8169 lspci -v -s 04:00.00 output: 04:00.0 Ethernet controller: Realtek Semiconductor Co., Ltd. RTL8111/8168/8411 PCI Express Gigabit Ethernet Controller (rev 06) Subsystem: Realtek Semiconductor Co., Ltd. Device 0123 Flags: bus master, fast devsel, latency 0, IRQ 77 I/O ports at 2000 [size=256] Memory at f7900000 (64-bit, non-prefetchable) [size=4K] Memory at f7700000 (64-bit, prefetchable) [size=16K] Capabilities: [40] Power Management version 3 Capabilities: [50] MSI: Enable+ Count=1/1 Maskable- 64bit+ Capabilities: [70] Express Endpoint, MSI 01 Capabilities: [b0] MSI-X: Enable- Count=4 Masked- Capabilities: [d0] Vital Product Data Capabilities: [100] Advanced Error Reporting Capabilities: [140] Virtual Channel Capabilities: [160] Device Serial Number 01-00-00-00-68-4c-e0-00 Kernel driver in use: r8169 Establishing connection For the purpose of following test, automatic connection initialization was disabled by erasing /etc/network/interfaces file content. No network manager was present as well. Available Ethernet interfaces list: 2: eth0: <BROADCAST,MULTICAST> mtu 1500 qdisc noop state DOWN group default qlen 1000 link/ether 00:e0:4c:68:05:c8 brd ff:ff:ff:ff:ff:ff 3: eth1: <BROADCAST,MULTICAST> mtu 1500 qdisc noop state DOWN group default qlen 1000 link/ether 00:e0:4c:68:05:c9 brd ff:ff:ff:ff:ff:ff 4: eth2: <BROADCAST,MULTICAST> mtu 1500 qdisc noop state DOWN group default qlen 1000 link/ether 00:0d:b9:43:3f:bc brd ff:ff:ff:ff:ff:ff 5: eth3: <BROADCAST,MULTICAST> mtu 1500 qdisc noop state DOWN group default qlen 1000 link/ether 00:0d:b9:43:3f:bd brd ff:ff:ff:ff:ff:ff 6: eth4: <BROADCAST,MULTICAST> mtu 1500 qdisc noop state DOWN group default qlen 1000 link/ether 00:0d:b9:43:3f:be brd ff:ff:ff:ff:ff:ff First interface (00:e0:4c:68:05:c9 MAC address) from extension card: Reboot was executed first. ifconfig eth1 up output: [ 702.047648] r8169 0000:04:00.0: firmware: direct-loading firmware rtl_nic/rtl8168e-3.fw [ 702.161935] r8169 0000:04:00.0 eth1: link down [ 702.166586] r8169 0000:04:00.0 eth1: link down [ 702.166817] IPv6: ADDRCONF(NETDEV_UP): eth1: link is not ready [ 704.076523] r8169 0000:04:00.0 eth1: link up [ 704.080905] IPv6: ADDRCONF(NETDEV_CHANGE): eth1: link becomes ready dhclient eth1 ifconfig eth1 output: eth1 Link encap:Ethernet HWaddr 00:e0:4c:68:05:c9 inet addr:192.168.0.120 Bcast:192.168.0.255 Mask:255.255.255.0 inet6 addr: fe80::2e0:4cff:fe68:5c9/64 Scope:Link UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1 RX packets:4 errors:0 dropped:0 overruns:0 frame:0 TX packets:10 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000 RX bytes:1300 (1.2 KiB) TX bytes:1332 (1.3 KiB) Pinging some internal or external adresses from APU2 works: ping 192.168.0.1 output: PING 192.168.0.1 (192.168.0.1) 56(84) bytes of data. 64 bytes from 192.168.0.1: icmp_seq=1 ttl=64 time=0.371 ms 64 bytes from 192.168.0.1: icmp_seq=2 ttl=64 time=0.313 ms ping google.pl output: PING google.pl (172.217.20.195) 56(84) bytes of data. 64 bytes from waw02s08-in-f195.1e100.net (172.217.20.195): icmp_seq=1 ttl=57 time=6.54 ms 64 bytes from waw02s08-in-f195.1e100.net (172.217.20.195): icmp_seq=2 ttl=57 time=6.46 ms Pinging eth1 interface address from different PC works well: ping 192.168.0.120 output: PING 192.168.0.120 (192.168.0.120) 56(84) bytes of data. 64 bytes from 192.168.0.120: icmp_seq=1 ttl=64 time=0.755 ms 64 bytes from 192.168.0.120: icmp_seq=2 ttl=64 time=0.306 ms Second interface (00:e0:4c:68:05:c8 MAC address) from extension card: Reboot was executed first. ifconfig eth0 up output: [ 63.775838] r8169 0000:03:00.0: firmware: direct-loading firmware rtl_nic/rtl8168e-3.fw [ 63.880564] r8169 0000:03:00.0 eth0: link down [ 63.885105] r8169 0000:03:00.0 eth0: link down [ 63.885192] IPv6: ADDRCONF(NETDEV_UP): eth0: link is not ready [ 65.798066] r8169 0000:03:00.0 eth0: link up [ 65.802396] IPv6: ADDRCONF(NETDEV_CHANGE): eth0: link becomes ready dhclient eth0 ifconfig eth0 output: eth0 Link encap:Ethernet HWaddr 00:e0:4c:68:05:c8 inet addr:192.168.0.123 Bcast:192.168.0.255 Mask:255.255.255.0 inet6 addr: fe80::2e0:4cff:fe68:5c8/64 Scope:Link UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1 RX packets:4 errors:0 dropped:0 overruns:0 frame:0 TX packets:10 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000 RX bytes:1300 (1.2 KiB) TX bytes:1332 (1.3 KiB) Pinging some internal or external adresses from APU2 works: ping 192.168.0.1 output: PING 192.168.0.1 (192.168.0.1) 56(84) bytes of data. 64 bytes from 192.168.0.1: icmp_seq=1 ttl=64 time=0.750 ms 64 bytes from 192.168.0.1: icmp_seq=2 ttl=64 time=0.266 ms ping google.pl output: PING google.pl (172.217.20.195) 56(84) bytes of data. 64 bytes from waw02s08-in-f195.1e100.net (172.217.20.195): icmp_seq=1 ttl=57 time=6.87 ms 64 bytes from waw02s08-in-f195.1e100.net (172.217.20.195): icmp_seq=2 ttl=57 time=6.75 ms Pinging eth0 interface address from different PC works well: ping 192.168.0.123 output: PING 192.168.0.123 (192.168.0.123) 56(84) bytes of data. 64 bytes from 192.168.0.123: icmp_seq=1 ttl=64 time=0.800 ms 64 bytes from 192.168.0.123: icmp_seq=2 ttl=64 time=0.313 ms Operating multiple interfaces at once Following interfaces have been connected using separate Ethernet cables: both interfaces from mPCIe extension card two out of three interfaces from APU2 board Interfaces configuration ifconfig eth0 up output: [ 158.770166] r8169 0000:03:00.0: firmware: direct-loading firmware rtl_nic/rtl8168e-3.fw [ 158.877942] r8169 0000:03:00.0 eth0: link down [ 158.882483] r8169 0000:03:00.0 eth0: link down [ 158.882576] IPv6: ADDRCONF(NETDEV_UP): eth0: link is not ready [ 160.847493] r8169 0000:03:00.0 eth0: link up [ 160.851821] IPv6: ADDRCONF(NETDEV_CHANGE): eth0: link becomes ready dhclient eth0 ifconfig eth0 output: eth0 Link encap:Ethernet HWaddr 00:e0:4c:68:05:c8 inet addr:192.168.0.132 Bcast:192.168.0.255 Mask:255.255.255.0 inet6 addr: fe80::2e0:4cff:fe68:5c8/64 Scope:Link UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1 RX packets:9 errors:0 dropped:0 overruns:0 frame:0 TX packets:9 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000 RX bytes:1600 (1.5 KiB) TX bytes:1262 (1.2 KiB) ifconfig eth1 up output: [ 185.188050] r8169 0000:04:00.0 eth1: link down [ 185.188107] r8169 0000:04:00.0 eth1: link down [ 185.197387] IPv6: ADDRCONF(NETDEV_UP): eth1: link is not ready root@voyage:~# dh[ 187.135453] r8169 0000:04:00.0 eth1: link up [ 187.139809] IPv6: ADDRCONF(NETDEV_CHANGE): eth1: link becomes ready client eth1 ifconfig eth1 output: eth1 Link encap:Ethernet HWaddr 00:e0:4c:68:05:c9 inet addr:192.168.0.133 Bcast:192.168.0.255 Mask:255.255.255.0 inet6 addr: fe80::2e0:4cff:fe68:5c9/64 Scope:Link UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1 RX packets:7 errors:0 dropped:0 overruns:0 frame:0 TX packets:9 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000 RX bytes:1480 (1.4 KiB) TX bytes:1262 (1.2 KiB) ifconfig eth2 up output: [ 602.484926] IPv6: ADDRCONF(NETDEV_UP): eth2: link is not ready [ 605.172947] igb 0000:05:00.0 eth2: igb: eth2 NIC Link is Up 100 Mbps Full Duplex, FlowX [ 605.182617] IPv6: ADDRCONF(NETDEV_CHANGE): eth2: link becomes ready ifconfig eth2 output: eth2 Link encap:Ethernet HWaddr 00:0d:b9:43:3f:bc inet addr:192.168.0.134 Bcast:192.168.0.255 Mask:255.255.255.0 inet6 addr: fe80::20d:b9ff:fe43:3fbc/64 Scope:Link UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1 RX packets:66 errors:0 dropped:0 overruns:0 frame:0 TX packets:10 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000 RX bytes:5675 (5.5 KiB) TX bytes:1332 (1.3 KiB) Memory:f7a00000-f7a1ffff ifconfig eth4 up output: [ 1038.772097] IPv6: ADDRCONF(NETDEV_UP): eth4: link is not ready [ 1041.441250] igb 0000:07:00.0 eth4: igb: eth4 NIC Link is Up 100 Mbps Full Duplex, FlowX [ 1041.450845] IPv6: ADDRCONF(NETDEV_CHANGE): eth4: link becomes ready dhclient eth4 output: root@voyage:~# ifconfig eth4 eth4 Link encap:Ethernet HWaddr 00:0d:b9:43:3f:be inet addr:192.168.0.135 Bcast:192.168.0.255 Mask:255.255.255.0 inet6 addr: fe80::20d:b9ff:fe43:3fbe/64 Scope:Link UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1 RX packets:13 errors:0 dropped:0 overruns:0 frame:0 TX packets:10 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000 RX bytes:1931 (1.8 KiB) TX bytes:1332 (1.3 KiB) Memory:f7c00000-f7c1ffff Each of them can be individually reached from network ping 192.168.0.132 output: PING 192.168.0.132 (192.168.0.132) 56(84) bytes of data. 64 bytes from 192.168.0.132: icmp_seq=1 ttl=64 time=26.2 ms 64 bytes from 192.168.0.132: icmp_seq=2 ttl=64 time=1.96 ms ping 192.168.0.133 output: PING 192.168.0.133 (192.168.0.133) 56(84) bytes of data. 64 bytes from 192.168.0.133: icmp_seq=1 ttl=64 time=1.35 ms 64 bytes from 192.168.0.133: icmp_seq=2 ttl=64 time=1.97 ms ping 192.168.0.134 PING 192.168.0.134 (192.168.0.134) 56(84) bytes of data. 64 bytes from 192.168.0.134: icmp_seq=1 ttl=64 time=1.42 ms 64 bytes from 192.168.0.134: icmp_seq=2 ttl=64 time=1.49 ms ping 192.168.0.135 PING 192.168.0.135 (192.168.0.135) 56(84) bytes of data. 64 bytes from 192.168.0.135: icmp_seq=1 ttl=64 time=1.81 ms 64 bytes from 192.168.0.135: icmp_seq=2 ttl=64 time=1.38 ms Conclusion Ethernet interfaces from extension card inserted into mPCIe slot 1 operate properly in terms of device enumeration and DHCP lease. Ethernet interfaces from extension card inserted into mPCIe slot 2 do not operate properly. They are not enumerated by kernel. After forcing mPCIe clock to be always on, Ethernet interfaces from extension card inserted into mPCIe 2 slot operate in the same fashion as when inserted into mPCIe slot 1 (when it comes to device enumeration and DHCP lease, at least). Note that corresponding change exists for mPCIe slot 1.","title":"Mpcie ethernet"},{"location":"debug/mpcie_ethernet/#intro","text":"Device under test is mPCIe extension card with double Ethernet interfaces exposed. Their MAC addresses are: 00:e0:4c:68:05:c8 00:e0:4c:68:05:c9 Platform is APU2C4 Firmware is coreboot v4.5.8 from PC engines fork. Operating system is Voyage Linux. uname -a output: Linux voyage 3.16.7-ckt9-voyage #1 SMP Wed Apr 22 23:04:57 HKT 2015 x86_64 GNU/Linux","title":"Intro"},{"location":"debug/mpcie_ethernet/#mpcie-slot-1-slot","text":"","title":"mPCIe slot 1 slot"},{"location":"debug/mpcie_ethernet/#device-identification","text":"Ethernet interfaces from extension card are correctly detected: ip a output: 1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever 2: eth0: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc pfifo_fast state DOWN group default qlen 1000 link/ether 00:e0:4c:68:05:c8 brd ff:ff:ff:ff:ff:ff inet 10.0.0.10/24 brd 10.0.0.255 scope global eth0 valid_lft forever preferred_lft forever inet6 fe80::2e0:4cff:fe68:5c8/64 scope link valid_lft forever preferred_lft forever 3: eth1: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc pfifo_fast state DOWN group default qlen 1000 link/ether 00:e0:4c:68:05:c9 brd ff:ff:ff:ff:ff:ff inet 192.168.0.120/24 brd 192.168.0.255 scope global eth1 valid_lft forever preferred_lft forever inet6 fe80::2e0:4cff:fe68:5c9/64 scope link valid_lft forever preferred_lft forever 4: eth2: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc mq state DOWN group default qlen 1000 link/ether 00:0d:b9:43:3f:bc brd ff:ff:ff:ff:ff:ff inet6 fe80::20d:b9ff:fe43:3fbc/64 scope link valid_lft forever preferred_lft forever 5: eth3: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc mq state DOWN group default qlen 1000 link/ether 00:0d:b9:43:3f:bd brd ff:ff:ff:ff:ff:ff inet 192.168.0.108/24 brd 192.168.0.255 scope global eth3 valid_lft forever preferred_lft forever inet6 fe80::20d:b9ff:fe43:3fbd/64 scope link valid_lft forever preferred_lft forever 6: eth4: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP group default qlen 1000 link/ether 00:0d:b9:43:3f:be brd ff:ff:ff:ff:ff:ff inet 192.168.0.112/24 brd 192.168.0.255 scope global eth4 valid_lft forever preferred_lft forever inet6 fe80::20d:b9ff:fe43:3fbe/64 scope link valid_lft forever preferred_lft forever output: lspci 00:00.0 Host bridge: Advanced Micro Devices, Inc. [AMD] Device 1566 00:02.0 Host bridge: Advanced Micro Devices, Inc. [AMD] Device 156b 00:02.2 PCI bridge: Advanced Micro Devices, Inc. [AMD] Family 16h Processor Functions 5:1 00:02.3 PCI bridge: Advanced Micro Devices, Inc. [AMD] Family 16h Processor Functions 5:1 00:02.4 PCI bridge: Advanced Micro Devices, Inc. [AMD] Family 16h Processor Functions 5:1 00:02.5 PCI bridge: Advanced Micro Devices, Inc. [AMD] Family 16h Processor Functions 5:1 00:08.0 Encryption controller: Advanced Micro Devices, Inc. [AMD] Device 1537 00:10.0 USB controller: Advanced Micro Devices, Inc. [AMD] FCH USB XHCI Controller (rev 11) 00:11.0 SATA controller: Advanced Micro Devices, Inc. [AMD] FCH SATA Controller [IDE mode] (rev 39) 00:13.0 USB controller: Advanced Micro Devices, Inc. [AMD] FCH USB EHCI Controller (rev 39) 00:14.0 SMBus: Advanced Micro Devices, Inc. [AMD] FCH SMBus Controller (rev 42) 00:14.3 ISA bridge: Advanced Micro Devices, Inc. [AMD] FCH LPC Bridge (rev 11) 00:14.7 SD Host controller: Advanced Micro Devices, Inc. [AMD] FCH SD Flash Controller (rev 01) 00:18.0 Host bridge: Advanced Micro Devices, Inc. [AMD] Device 1580 00:18.1 Host bridge: Advanced Micro Devices, Inc. [AMD] Device 1581 00:18.2 Host bridge: Advanced Micro Devices, Inc. [AMD] Device 1582 00:18.3 Host bridge: Advanced Micro Devices, Inc. [AMD] Device 1583 00:18.4 Host bridge: Advanced Micro Devices, Inc. [AMD] Device 1584 00:18.5 Host bridge: Advanced Micro Devices, Inc. [AMD] Device 1585 01:00.0 Ethernet controller: Intel Corporation I210 Gigabit Network Connection (rev 03) 02:00.0 Ethernet controller: Intel Corporation I210 Gigabit Network Connection (rev 03) 03:00.0 Ethernet controller: Intel Corporation I210 Gigabit Network Connection (rev 03) 04:00.0 PCI bridge: ASMedia Technology Inc. Device 1182 05:03.0 PCI bridge: ASMedia Technology Inc. Device 1182 05:07.0 PCI bridge: ASMedia Technology Inc. Device 1182 06:00.0 Ethernet controller: Realtek Semiconductor Co., Ltd. RTL8111/8168/8411 PCI Express Gigabit Ether) 07:00.0 Ethernet controller: Realtek Semiconductor Co., Ltd. RTL8111/8168/8411 Our extension card controllers are detected as follows: lspci -v -s 06:00.00 output: 06:00.0 Ethernet controller: Realtek Semiconductor Co., Ltd. RTL8111/8168/8411 PCI Express Gigabit Ethernet Controller (rev 06) Subsystem: Realtek Semiconductor Co., Ltd. Device 0123 Flags: bus master, fast devsel, latency 0, IRQ 75 I/O ports at 1000 [size=256] Memory at f7800000 (64-bit, non-prefetchable) [size=4K] Memory at f7600000 (64-bit, prefetchable) [size=16K] Capabilities: [40] Power Management version 3 Capabilities: [50] MSI: Enable+ Count=1/1 Maskable- 64bit+ Capabilities: [70] Express Endpoint, MSI 01 Capabilities: [b0] MSI-X: Enable- Count=4 Masked- Capabilities: [d0] Vital Product Data Capabilities: [100] Advanced Error Reporting Capabilities: [140] Virtual Channel Capabilities: [160] Device Serial Number 01-00-00-00-68-4c-e0-00 Kernel driver in use: r8169 lspci -v -s 07:00.00 output: 07:00.0 Ethernet controller: Realtek Semiconductor Co., Ltd. RTL8111/8168/8411 PCI Express Gigabit Ethernet Controller (rev 06) Subsystem: Realtek Semiconductor Co., Ltd. Device 0123 Flags: bus master, fast devsel, latency 0, IRQ 76 I/O ports at 2000 [size=256] Memory at f7900000 (64-bit, non-prefetchable) [size=4K] Memory at f7700000 (64-bit, prefetchable) [size=16K] Capabilities: [40] Power Management version 3 Capabilities: [50] MSI: Enable+ Count=1/1 Maskable- 64bit+ Capabilities: [70] Express Endpoint, MSI 01 Capabilities: [b0] MSI-X: Enable- Count=4 Masked- Capabilities: [d0] Vital Product Data Capabilities: [100] Advanced Error Reporting Capabilities: [140] Virtual Channel Capabilities: [160] Device Serial Number 01-00-00-00-68-4c-e0-00 Kernel driver in use: r8169","title":"Device identification"},{"location":"debug/mpcie_ethernet/#establishing-connection","text":"For the purpose of following test, automatic connection initialization was disabled by erasing /etc/network/interfaces file content. No network manager was present as well. Available Ethernet interfaces list: 2: eth0: <BROADCAST,MULTICAST> mtu 1500 qdisc noop state DOWN group default qlen 1000 link/ether 00:e0:4c:68:05:c8 brd ff:ff:ff:ff:ff:ff 3: eth1: <BROADCAST,MULTICAST> mtu 1500 qdisc noop state DOWN group default qlen 1000 link/ether 00:e0:4c:68:05:c9 brd ff:ff:ff:ff:ff:ff 4: eth2: <BROADCAST,MULTICAST> mtu 1500 qdisc noop state DOWN group default qlen 1000 link/ether 00:0d:b9:43:3f:bc brd ff:ff:ff:ff:ff:ff 5: eth3: <BROADCAST,MULTICAST> mtu 1500 qdisc noop state DOWN group default qlen 1000 link/ether 00:0d:b9:43:3f:bd brd ff:ff:ff:ff:ff:ff 6: eth4: <BROADCAST,MULTICAST> mtu 1500 qdisc noop state DOWN group default qlen 1000 link/ether 00:0d:b9:43:3f:be brd ff:ff:ff:ff:ff:ff First interface (00:e0:4c:68:05:c9 MAC address) from extension card: ifconfig eth1 up output: [ 105.204628] r8169 0000:07:00.0: firmware: direct-loading firmware rtl_nic/rtl8168e-3.fw [ 105.313609] r8169 0000:07:00.0 eth1: link down [ 105.318155] r8169 0000:07:00.0 eth1: link down [ 105.318482] IPv6: ADDRCONF(NETDEV_UP): eth1: link is not ready [ 107.209683] r8169 0000:07:00.0 eth1: link up [ 107.214014] IPv6: ADDRCONF(NETDEV_CHANGE): eth1: link becomes ready dhclient eth1 ifconfig eth1 output: eth1 Link encap:Ethernet HWaddr 00:e0:4c:68:05:c9 inet addr:192.168.0.120 Bcast:192.168.0.255 Mask:255.255.255.0 inet6 addr: fe80::2e0:4cff:fe68:5c9/64 Scope:Link UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1 RX packets:22 errors:0 dropped:0 overruns:0 frame:0 TX packets:19 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000 RX bytes:2945 (2.8 KiB) TX bytes:2060 (2.0 KiB) Pinging some internal or external addresses from APU2 works: ping 192.168.0.1 output: PING 192.168.0.1 (192.168.0.1) 56(84) bytes of data. 64 bytes from 192.168.0.1: icmp_seq=1 ttl=64 time=0.374 ms 64 bytes from 192.168.0.1: icmp_seq=2 ttl=64 time=0.266 ping google.pl output: PING google.pl (172.217.20.195) 56(84) bytes of data. 64 bytes from waw02s08-in-f195.1e100.net (172.217.20.195): icmp_seq=1 ttl=57 time=6.52 ms 64 bytes from waw02s08-in-f195.1e100.net (172.217.20.195): icmp_seq=2 ttl=57 time=6.48 ms Pinging eth1 interface address from different PC works as well: ping 192.168.0.120 output: PING 192.168.0.120 (192.168.0.120) 56(84) bytes of data. 64 bytes from 192.168.0.120: icmp_seq=1 ttl=64 time=0.592 ms 64 bytes from 192.168.0.120: icmp_seq=2 ttl=64 time=0.482 ms Second interface (00:e0:4c:68:05:c8 MAC address) from extension card: Reboot was executed first. ifconfig eth0 up output: [ 218.000514] r8169 0000:06:00.0: firmware: direct-loading firmware rtl_nic/rtl8168e-3.fw [ 218.118256] r8169 0000:06:00.0 eth0: link down [ 218.122760] r8169 0000:06:00.0 eth0: link down [ 218.127347] IPv6: ADDRCONF(NETDEV_UP): eth0: link is not ready [ 220.014881] r8169 0000:06:00.0 eth0: link up [ 220.019250] IPv6: ADDRCONF(NETDEV_CHANGE): eth0: link becomes ready dhclient eth0 ifconfig eth0 output: eth0 Link encap:Ethernet HWaddr 00:e0:4c:68:05:c8 inet addr:192.168.0.123 Bcast:192.168.0.255 Mask:255.255.255.0 inet6 addr: fe80::2e0:4cff:fe68:5c8/64 Scope:Link UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1 RX packets:3 errors:0 dropped:0 overruns:0 frame:0 TX packets:9 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000 RX bytes:1240 (1.2 KiB) TX bytes:1262 (1.2 KiB) Pinging some internal or external addresses from APU2 works: ping 192.168.0.1 output: PING 192.168.0.1 (192.168.0.1) 56(84) bytes of data. 64 bytes from 192.168.0.1: icmp_seq=1 ttl=64 time=0.391 ms 64 bytes from 192.168.0.1: icmp_seq=2 ttl=64 time=0.233 ms ping google.pl output: PING google.pl (172.217.20.195) 56(84) bytes of data. 64 bytes from waw02s08-in-f3.1e100.net (172.217.20.195): icmp_seq=1 ttl=57 time=6.59 ms 64 bytes from waw02s08-in-f3.1e100.net (172.217.20.195): icmp_seq=2 ttl=57 time=6.44 ms Pinging eth0 interface address from different PC works as well: PING 192.168.0.123 (192.168.0.123) 56(84) bytes of data. 64 bytes from 192.168.0.120: icmp_seq=1 ttl=64 time=0.592 ms 64 bytes from 192.168.0.120: icmp_seq=2 ttl=64 time=0.482 ms","title":"Establishing connection"},{"location":"debug/mpcie_ethernet/#operating-multiple-interfaces-at-once","text":"Following interfaces have been connected using separate Ethernet cables: both interfaces from mPCIe extension card two out of three interfaces from APU2 board Interfaces configuration ifconfig eth0 up output: [ 400.659117] r8169 0000:06:00.0: firmware: direct-loading firmware rtl_nic/rtl8168e-3.fw [ 400.762913] r8169 0000:06:00.0 eth0: link down [ 400.767438] r8169 0000:06:00.0 eth0: link down [ 400.772017] IPv6: ADDRCONF(NETDEV_UP): eth0: link is not ready [ 402.677778] r8169 0000:06:00.0 eth0: link up [ 402.682146] IPv6: ADDRCONF(NETDEV_CHANGE): eth0: link becomes ready dhclient eth0 ifconfig eth0 output: eth0 Link encap:Ethernet HWaddr 00:e0:4c:68:05:c8 inet addr:192.168.0.132 Bcast:192.168.0.255 Mask:255.255.255.0 inet6 addr: fe80::2e0:4cff:fe68:5c8/64 Scope:Link UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1 RX packets:7 errors:0 dropped:0 overruns:0 frame:0 TX packets:10 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000 RX bytes:1480 (1.4 KiB) TX bytes:1332 (1.3 KiB) ifconfig eth1 up output: [ 449.690659] r8169 0000:07:00.0 eth1: link down [ 449.690686] r8169 0000:07:00.0 eth1: link down [ 449.699870] IPv6: ADDRCONF(NETDEV_UP): eth1: link is not ready [ 451.626151] r8169 0000:07:00.0 eth1: link up [ 451.630502] IPv6: ADDRCONF(NETDEV_CHANGE): eth1: link becomes ready dhclient eth1 ifconfig eth1 output: eth1 Link encap:Ethernet HWaddr 00:e0:4c:68:05:c9 inet addr:192.168.0.133 Bcast:192.168.0.255 Mask:255.255.255.0 inet6 addr: fe80::2e0:4cff:fe68:5c9/64 Scope:Link UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1 RX packets:4 errors:0 dropped:0 overruns:0 frame:0 TX packets:9 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000 RX bytes:1300 (1.2 KiB) TX bytes:1262 (1.2 KiB) ifconfig eth2 up output: [ 484.573775] IPv6: ADDRCONF(NETDEV_UP): eth2: link is not ready [ 487.225321] igb 0000:01:00.0 eth2: igb: eth2 NIC Link is Up 100 Mbps Full Duplex, FlowX [ 487.234971] IPv6: ADDRCONF(NETDEV_CHANGE): eth2: link becomes ready dhclient eth2 ifconfig eth2 output: eth2 Link encap:Ethernet HWaddr 00:0d:b9:43:3f:bc inet addr:192.168.0.134 Bcast:192.168.0.255 Mask:255.255.255.0 inet6 addr: fe80::20d:b9ff:fe43:3fbc/64 Scope:Link UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1 RX packets:11 errors:0 dropped:0 overruns:0 frame:0 TX packets:10 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000 RX bytes:1720 (1.6 KiB) TX bytes:1332 (1.3 KiB) Memory:f7a00000-f7a1ffff ifconfig eth4 up output: [ 528.424071] IPv6: ADDRCONF(NETDEV_UP): eth4: link is not ready [ 531.111624] igb 0000:03:00.0 eth4: igb: eth4 NIC Link is Up 100 Mbps Full Duplex, FlowX [ 531.121238] IPv6: ADDRCONF(NETDEV_CHANGE): eth4: link becomes ready dhclient eth4 ifconfig eth4 output: eth4 Link encap:Ethernet HWaddr 00:0d:b9:43:3f:be inet addr:192.168.0.135 Bcast:192.168.0.255 Mask:255.255.255.0 inet6 addr: fe80::20d:b9ff:fe43:3fbe/64 Scope:Link UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1 RX packets:19 errors:0 dropped:0 overruns:0 frame:0 TX packets:10 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000 RX bytes:2200 (2.1 KiB) TX bytes:1332 (1.3 KiB) Memory:f7c00000-f7c1ffff Each of them can be separately reached from network ping 192.168.0.132 output: PING 192.168.0.132 (192.168.0.132) 56(84) bytes of data. 64 bytes from 192.168.0.132: icmp_seq=2 ttl=64 time=410 ms 64 bytes from 192.168.0.132: icmp_seq=3 ttl=64 time=551 ms ping 192.168.0.133 output: PING 192.168.0.133 (192.168.0.133) 56(84) bytes of data. 64 bytes from 192.168.0.133: icmp_seq=1 ttl=64 time=4.31 ms 64 bytes from 192.168.0.133: icmp_seq=2 ttl=64 time=1.49 ms ping 192.168.0.134 output: PING 192.168.0.134 (192.168.0.134) 56(84) bytes of data. 64 bytes from 192.168.0.134: icmp_seq=1 ttl=64 time=3.02 ms 64 bytes from 192.168.0.134: icmp_seq=2 ttl=64 time=1.71 ms ping 192.168.0.135 output: PING 192.168.0.135 (192.168.0.135) 56(84) bytes of data. 64 bytes from 192.168.0.135: icmp_seq=1 ttl=64 time=2.80 ms 64 bytes from 192.168.0.135: icmp_seq=2 ttl=64 time=1.71 ms","title":"Operating multiple interfaces at once"},{"location":"debug/mpcie_ethernet/#mpcie-slot-2","text":"","title":"mPCIe slot 2"},{"location":"debug/mpcie_ethernet/#device-identification_1","text":"Ethernet interfaces from extension card are not detected: lspci output: 00:00.0 Host bridge: Advanced Micro Devices, Inc. [AMD] Device 1566 00:02.0 Host bridge: Advanced Micro Devices, Inc. [AMD] Device 156b 00:02.2 PCI bridge: Advanced Micro Devices, Inc. [AMD] Family 16h Processor Functions 5:1 00:02.3 PCI bridge: Advanced Micro Devices, Inc. [AMD] Family 16h Processor Functions 5:1 00:02.4 PCI bridge: Advanced Micro Devices, Inc. [AMD] Family 16h Processor Functions 5:1 00:08.0 Encryption controller: Advanced Micro Devices, Inc. [AMD] Device 1537 00:10.0 USB controller: Advanced Micro Devices, Inc. [AMD] FCH USB XHCI Controller (rev 11) 00:11.0 SATA controller: Advanced Micro Devices, Inc. [AMD] FCH SATA Controller [IDE mode] (rev 39) 00:13.0 USB controller: Advanced Micro Devices, Inc. [AMD] FCH USB EHCI Controller (rev 39) 00:14.0 SMBus: Advanced Micro Devices, Inc. [AMD] FCH SMBus Controller (rev 42) 00:14.3 ISA bridge: Advanced Micro Devices, Inc. [AMD] FCH LPC Bridge (rev 11) 00:14.7 SD Host controller: Advanced Micro Devices, Inc. [AMD] FCH SD Flash Controller (rev 01) 00:18.0 Host bridge: Advanced Micro Devices, Inc. [AMD] Device 1580 00:18.1 Host bridge: Advanced Micro Devices, Inc. [AMD] Device 1581 00:18.2 Host bridge: Advanced Micro Devices, Inc. [AMD] Device 1582 00:18.3 Host bridge: Advanced Micro Devices, Inc. [AMD] Device 1583 00:18.4 Host bridge: Advanced Micro Devices, Inc. [AMD] Device 1584 00:18.5 Host bridge: Advanced Micro Devices, Inc. [AMD] Device 1585 01:00.0 Ethernet controller: Intel Corporation I210 Gigabit Network Connection (rev 03) 02:00.0 Ethernet controller: Intel Corporation I210 Gigabit Network Connection (rev 03) 03:00.0 Ethernet controller: Intel Corporation I210 Gigabit Network Connection (rev 03) ip a output: 1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever 2: eth0: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc mq state DOWN group default qlen 1000 link/ether 00:0d:b9:43:3f:bc brd ff:ff:ff:ff:ff:ff inet 192.168.0.135/24 brd 192.168.0.255 scope global eth0 valid_lft forever preferred_lft forever inet6 fe80::20d:b9ff:fe43:3fbc/64 scope link valid_lft forever preferred_lft forever 3: eth1: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc mq state DOWN group default qlen 1000 link/ether 00:0d:b9:43:3f:bd brd ff:ff:ff:ff:ff:ff inet 192.168.0.108/24 brd 192.168.0.255 scope global eth1 valid_lft forever preferred_lft forever inet6 fe80::20d:b9ff:fe43:3fbd/64 scope link valid_lft forever preferred_lft forever 4: eth2: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP group default qlen 1000 link/ether 00:0d:b9:43:3f:be brd ff:ff:ff:ff:ff:ff inet 192.168.0.112/24 brd 192.168.0.255 scope global eth2 valid_lft forever preferred_lft forever inet6 fe80::20d:b9ff:fe43:3fbe/64 scope link valid_lft forever preferred_lft forever","title":"Device identification"},{"location":"debug/mpcie_ethernet/#mpcie-slot-2-with-clock-always-enabled","text":"This is different from the previous one with the following change in source code: diff --git a/src/mainboard/pcengines/apu2/romstage.c b/src/mainboard/pcengines/apu2/romstage.c index a1c73d1e3424..f018ac5742ce 100644 --- a/src/mainboard/pcengines/apu2/romstage.c +++ b/src/mainboard/pcengines/apu2/romstage.c @@ -99,7 +99,9 @@ void cache_as_ram_main(unsigned long bist, unsigned long cpu_init_detectedx) data = *((u32 *)(ACPI_MMIO_BASE + MISC_BASE+FCH_MISC_REG04)); data &= 0xFFFFFF0F; - data |= 0xA << (1 * 4); // CLKREQ GFX to GFXCLK + // make GFXCLK to ignore CLKREQ# input + // force it to be always on + data |= 0xF << (1 * 4); // CLKREQ GFX to GFXCLK","title":"mPCIe slot 2 with clock always enabled"},{"location":"debug/mpcie_ethernet/#device-identification_2","text":"ip a output: 1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever 2: eth0: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc mq state DOWN group default qlen 1000 link/ether 00:0d:b9:43:3f:bc brd ff:ff:ff:ff:ff:ff inet 10.0.0.10/24 brd 10.0.0.255 scope global eth0 valid_lft forever preferred_lft forever 3: eth1: <BROADCAST,MULTICAST> mtu 1500 qdisc noop state DOWN group default qlen 1000 link/ether 00:0d:b9:43:3f:bd brd ff:ff:ff:ff:ff:ff 4: eth2: <BROADCAST,MULTICAST> mtu 1500 qdisc noop state DOWN group default qlen 1000 link/ether 00:0d:b9:43:3f:be brd ff:ff:ff:ff:ff:ff 5: eth3: <BROADCAST,MULTICAST> mtu 1500 qdisc noop state DOWN group default qlen 1000 link/ether 00:e0:4c:68:05:c8 brd ff:ff:ff:ff:ff:ff 6: eth4: <BROADCAST,MULTICAST> mtu 1500 qdisc noop state DOWN group default qlen 1000 link/ether 00:e0:4c:68:05:c9 brd ff:ff:ff:ff:ff:ff lspci output: 00:00.0 Host bridge: Advanced Micro Devices, Inc. [AMD] Device 1566 00:02.0 Host bridge: Advanced Micro Devices, Inc. [AMD] Device 156b 00:02.1 PCI bridge: Advanced Micro Devices, Inc. [AMD] Family 16h Processor Functions 5:1 00:02.2 PCI bridge: Advanced Micro Devices, Inc. [AMD] Family 16h Processor Functions 5:1 00:02.3 PCI bridge: Advanced Micro Devices, Inc. [AMD] Family 16h Processor Functions 5:1 00:02.4 PCI bridge: Advanced Micro Devices, Inc. [AMD] Family 16h Processor Functions 5:1 00:08.0 Encryption controller: Advanced Micro Devices, Inc. [AMD] Device 1537 00:10.0 USB controller: Advanced Micro Devices, Inc. [AMD] FCH USB XHCI Controller (rev 11) 00:11.0 SATA controller: Advanced Micro Devices, Inc. [AMD] FCH SATA Controller [IDE mode] (rev 39) 00:13.0 USB controller: Advanced Micro Devices, Inc. [AMD] FCH USB EHCI Controller (rev 39) 00:14.0 SMBus: Advanced Micro Devices, Inc. [AMD] FCH SMBus Controller (rev 42) 00:14.3 ISA bridge: Advanced Micro Devices, Inc. [AMD] FCH LPC Bridge (rev 11) 00:14.7 SD Host controller: Advanced Micro Devices, Inc. [AMD] FCH SD Flash Controller (rev 01) 00:18.0 Host bridge: Advanced Micro Devices, Inc. [AMD] Device 1580 00:18.1 Host bridge: Advanced Micro Devices, Inc. [AMD] Device 1581 00:18.2 Host bridge: Advanced Micro Devices, Inc. [AMD] Device 1582 00:18.3 Host bridge: Advanced Micro Devices, Inc. [AMD] Device 1583 00:18.4 Host bridge: Advanced Micro Devices, Inc. [AMD] Device 1584 00:18.5 Host bridge: Advanced Micro Devices, Inc. [AMD] Device 1585 01:00.0 PCI bridge: ASMedia Technology Inc. Device 1182 02:03.0 PCI bridge: ASMedia Technology Inc. Device 1182 02:07.0 PCI bridge: ASMedia Technology Inc. Device 1182 03:00.0 Ethernet controller: Realtek Semiconductor Co., Ltd. RTL8111/8168/8411 PCI Express Gigabit Ether) 04:00.0 Ethernet controller: Realtek Semiconductor Co., Ltd. RTL8111/8168/8411 PCI Express Gigabit Ether) 05:00.0 Ethernet controller: Intel Corporation I210 Gigabit Network Connection (rev 03) 06:00.0 Ethernet controller: Intel Corporation I210 Gigabit Network Connection (rev 03) 07:00.0 Ethernet controller: Intel Corporation I210 Gigabit Network Connection (rev 03) Our extension card controllers are detected as follows: lspci -v -s 03:00.00 output: 03:00.0 Ethernet controller: Realtek Semiconductor Co., Ltd. RTL8111/8168/8411 PCI Express Gigabit Ethernet Controller (rev 06) Subsystem: Realtek Semiconductor Co., Ltd. Device 0123 Flags: bus master, fast devsel, latency 0, IRQ 76 I/O ports at 1000 [size=256] Memory at f7800000 (64-bit, non-prefetchable) [size=4K] Memory at f7600000 (64-bit, prefetchable) [size=16K] Capabilities: [40] Power Management version 3 Capabilities: [50] MSI: Enable+ Count=1/1 Maskable- 64bit+ Capabilities: [70] Express Endpoint, MSI 01 Capabilities: [b0] MSI-X: Enable- Count=4 Masked- Capabilities: [d0] Vital Product Data Capabilities: [100] Advanced Error Reporting Capabilities: [140] Virtual Channel Capabilities: [160] Device Serial Number 01-00-00-00-68-4c-e0-00 Kernel driver in use: r8169 lspci -v -s 04:00.00 output: 04:00.0 Ethernet controller: Realtek Semiconductor Co., Ltd. RTL8111/8168/8411 PCI Express Gigabit Ethernet Controller (rev 06) Subsystem: Realtek Semiconductor Co., Ltd. Device 0123 Flags: bus master, fast devsel, latency 0, IRQ 77 I/O ports at 2000 [size=256] Memory at f7900000 (64-bit, non-prefetchable) [size=4K] Memory at f7700000 (64-bit, prefetchable) [size=16K] Capabilities: [40] Power Management version 3 Capabilities: [50] MSI: Enable+ Count=1/1 Maskable- 64bit+ Capabilities: [70] Express Endpoint, MSI 01 Capabilities: [b0] MSI-X: Enable- Count=4 Masked- Capabilities: [d0] Vital Product Data Capabilities: [100] Advanced Error Reporting Capabilities: [140] Virtual Channel Capabilities: [160] Device Serial Number 01-00-00-00-68-4c-e0-00 Kernel driver in use: r8169","title":"Device identification"},{"location":"debug/mpcie_ethernet/#establishing-connection_1","text":"For the purpose of following test, automatic connection initialization was disabled by erasing /etc/network/interfaces file content. No network manager was present as well. Available Ethernet interfaces list: 2: eth0: <BROADCAST,MULTICAST> mtu 1500 qdisc noop state DOWN group default qlen 1000 link/ether 00:e0:4c:68:05:c8 brd ff:ff:ff:ff:ff:ff 3: eth1: <BROADCAST,MULTICAST> mtu 1500 qdisc noop state DOWN group default qlen 1000 link/ether 00:e0:4c:68:05:c9 brd ff:ff:ff:ff:ff:ff 4: eth2: <BROADCAST,MULTICAST> mtu 1500 qdisc noop state DOWN group default qlen 1000 link/ether 00:0d:b9:43:3f:bc brd ff:ff:ff:ff:ff:ff 5: eth3: <BROADCAST,MULTICAST> mtu 1500 qdisc noop state DOWN group default qlen 1000 link/ether 00:0d:b9:43:3f:bd brd ff:ff:ff:ff:ff:ff 6: eth4: <BROADCAST,MULTICAST> mtu 1500 qdisc noop state DOWN group default qlen 1000 link/ether 00:0d:b9:43:3f:be brd ff:ff:ff:ff:ff:ff First interface (00:e0:4c:68:05:c9 MAC address) from extension card: Reboot was executed first. ifconfig eth1 up output: [ 702.047648] r8169 0000:04:00.0: firmware: direct-loading firmware rtl_nic/rtl8168e-3.fw [ 702.161935] r8169 0000:04:00.0 eth1: link down [ 702.166586] r8169 0000:04:00.0 eth1: link down [ 702.166817] IPv6: ADDRCONF(NETDEV_UP): eth1: link is not ready [ 704.076523] r8169 0000:04:00.0 eth1: link up [ 704.080905] IPv6: ADDRCONF(NETDEV_CHANGE): eth1: link becomes ready dhclient eth1 ifconfig eth1 output: eth1 Link encap:Ethernet HWaddr 00:e0:4c:68:05:c9 inet addr:192.168.0.120 Bcast:192.168.0.255 Mask:255.255.255.0 inet6 addr: fe80::2e0:4cff:fe68:5c9/64 Scope:Link UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1 RX packets:4 errors:0 dropped:0 overruns:0 frame:0 TX packets:10 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000 RX bytes:1300 (1.2 KiB) TX bytes:1332 (1.3 KiB) Pinging some internal or external adresses from APU2 works: ping 192.168.0.1 output: PING 192.168.0.1 (192.168.0.1) 56(84) bytes of data. 64 bytes from 192.168.0.1: icmp_seq=1 ttl=64 time=0.371 ms 64 bytes from 192.168.0.1: icmp_seq=2 ttl=64 time=0.313 ms ping google.pl output: PING google.pl (172.217.20.195) 56(84) bytes of data. 64 bytes from waw02s08-in-f195.1e100.net (172.217.20.195): icmp_seq=1 ttl=57 time=6.54 ms 64 bytes from waw02s08-in-f195.1e100.net (172.217.20.195): icmp_seq=2 ttl=57 time=6.46 ms Pinging eth1 interface address from different PC works well: ping 192.168.0.120 output: PING 192.168.0.120 (192.168.0.120) 56(84) bytes of data. 64 bytes from 192.168.0.120: icmp_seq=1 ttl=64 time=0.755 ms 64 bytes from 192.168.0.120: icmp_seq=2 ttl=64 time=0.306 ms Second interface (00:e0:4c:68:05:c8 MAC address) from extension card: Reboot was executed first. ifconfig eth0 up output: [ 63.775838] r8169 0000:03:00.0: firmware: direct-loading firmware rtl_nic/rtl8168e-3.fw [ 63.880564] r8169 0000:03:00.0 eth0: link down [ 63.885105] r8169 0000:03:00.0 eth0: link down [ 63.885192] IPv6: ADDRCONF(NETDEV_UP): eth0: link is not ready [ 65.798066] r8169 0000:03:00.0 eth0: link up [ 65.802396] IPv6: ADDRCONF(NETDEV_CHANGE): eth0: link becomes ready dhclient eth0 ifconfig eth0 output: eth0 Link encap:Ethernet HWaddr 00:e0:4c:68:05:c8 inet addr:192.168.0.123 Bcast:192.168.0.255 Mask:255.255.255.0 inet6 addr: fe80::2e0:4cff:fe68:5c8/64 Scope:Link UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1 RX packets:4 errors:0 dropped:0 overruns:0 frame:0 TX packets:10 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000 RX bytes:1300 (1.2 KiB) TX bytes:1332 (1.3 KiB) Pinging some internal or external adresses from APU2 works: ping 192.168.0.1 output: PING 192.168.0.1 (192.168.0.1) 56(84) bytes of data. 64 bytes from 192.168.0.1: icmp_seq=1 ttl=64 time=0.750 ms 64 bytes from 192.168.0.1: icmp_seq=2 ttl=64 time=0.266 ms ping google.pl output: PING google.pl (172.217.20.195) 56(84) bytes of data. 64 bytes from waw02s08-in-f195.1e100.net (172.217.20.195): icmp_seq=1 ttl=57 time=6.87 ms 64 bytes from waw02s08-in-f195.1e100.net (172.217.20.195): icmp_seq=2 ttl=57 time=6.75 ms Pinging eth0 interface address from different PC works well: ping 192.168.0.123 output: PING 192.168.0.123 (192.168.0.123) 56(84) bytes of data. 64 bytes from 192.168.0.123: icmp_seq=1 ttl=64 time=0.800 ms 64 bytes from 192.168.0.123: icmp_seq=2 ttl=64 time=0.313 ms","title":"Establishing connection"},{"location":"debug/mpcie_ethernet/#operating-multiple-interfaces-at-once_1","text":"Following interfaces have been connected using separate Ethernet cables: both interfaces from mPCIe extension card two out of three interfaces from APU2 board Interfaces configuration ifconfig eth0 up output: [ 158.770166] r8169 0000:03:00.0: firmware: direct-loading firmware rtl_nic/rtl8168e-3.fw [ 158.877942] r8169 0000:03:00.0 eth0: link down [ 158.882483] r8169 0000:03:00.0 eth0: link down [ 158.882576] IPv6: ADDRCONF(NETDEV_UP): eth0: link is not ready [ 160.847493] r8169 0000:03:00.0 eth0: link up [ 160.851821] IPv6: ADDRCONF(NETDEV_CHANGE): eth0: link becomes ready dhclient eth0 ifconfig eth0 output: eth0 Link encap:Ethernet HWaddr 00:e0:4c:68:05:c8 inet addr:192.168.0.132 Bcast:192.168.0.255 Mask:255.255.255.0 inet6 addr: fe80::2e0:4cff:fe68:5c8/64 Scope:Link UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1 RX packets:9 errors:0 dropped:0 overruns:0 frame:0 TX packets:9 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000 RX bytes:1600 (1.5 KiB) TX bytes:1262 (1.2 KiB) ifconfig eth1 up output: [ 185.188050] r8169 0000:04:00.0 eth1: link down [ 185.188107] r8169 0000:04:00.0 eth1: link down [ 185.197387] IPv6: ADDRCONF(NETDEV_UP): eth1: link is not ready root@voyage:~# dh[ 187.135453] r8169 0000:04:00.0 eth1: link up [ 187.139809] IPv6: ADDRCONF(NETDEV_CHANGE): eth1: link becomes ready client eth1 ifconfig eth1 output: eth1 Link encap:Ethernet HWaddr 00:e0:4c:68:05:c9 inet addr:192.168.0.133 Bcast:192.168.0.255 Mask:255.255.255.0 inet6 addr: fe80::2e0:4cff:fe68:5c9/64 Scope:Link UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1 RX packets:7 errors:0 dropped:0 overruns:0 frame:0 TX packets:9 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000 RX bytes:1480 (1.4 KiB) TX bytes:1262 (1.2 KiB) ifconfig eth2 up output: [ 602.484926] IPv6: ADDRCONF(NETDEV_UP): eth2: link is not ready [ 605.172947] igb 0000:05:00.0 eth2: igb: eth2 NIC Link is Up 100 Mbps Full Duplex, FlowX [ 605.182617] IPv6: ADDRCONF(NETDEV_CHANGE): eth2: link becomes ready ifconfig eth2 output: eth2 Link encap:Ethernet HWaddr 00:0d:b9:43:3f:bc inet addr:192.168.0.134 Bcast:192.168.0.255 Mask:255.255.255.0 inet6 addr: fe80::20d:b9ff:fe43:3fbc/64 Scope:Link UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1 RX packets:66 errors:0 dropped:0 overruns:0 frame:0 TX packets:10 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000 RX bytes:5675 (5.5 KiB) TX bytes:1332 (1.3 KiB) Memory:f7a00000-f7a1ffff ifconfig eth4 up output: [ 1038.772097] IPv6: ADDRCONF(NETDEV_UP): eth4: link is not ready [ 1041.441250] igb 0000:07:00.0 eth4: igb: eth4 NIC Link is Up 100 Mbps Full Duplex, FlowX [ 1041.450845] IPv6: ADDRCONF(NETDEV_CHANGE): eth4: link becomes ready dhclient eth4 output: root@voyage:~# ifconfig eth4 eth4 Link encap:Ethernet HWaddr 00:0d:b9:43:3f:be inet addr:192.168.0.135 Bcast:192.168.0.255 Mask:255.255.255.0 inet6 addr: fe80::20d:b9ff:fe43:3fbe/64 Scope:Link UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1 RX packets:13 errors:0 dropped:0 overruns:0 frame:0 TX packets:10 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000 RX bytes:1931 (1.8 KiB) TX bytes:1332 (1.3 KiB) Memory:f7c00000-f7c1ffff Each of them can be individually reached from network ping 192.168.0.132 output: PING 192.168.0.132 (192.168.0.132) 56(84) bytes of data. 64 bytes from 192.168.0.132: icmp_seq=1 ttl=64 time=26.2 ms 64 bytes from 192.168.0.132: icmp_seq=2 ttl=64 time=1.96 ms ping 192.168.0.133 output: PING 192.168.0.133 (192.168.0.133) 56(84) bytes of data. 64 bytes from 192.168.0.133: icmp_seq=1 ttl=64 time=1.35 ms 64 bytes from 192.168.0.133: icmp_seq=2 ttl=64 time=1.97 ms ping 192.168.0.134 PING 192.168.0.134 (192.168.0.134) 56(84) bytes of data. 64 bytes from 192.168.0.134: icmp_seq=1 ttl=64 time=1.42 ms 64 bytes from 192.168.0.134: icmp_seq=2 ttl=64 time=1.49 ms ping 192.168.0.135 PING 192.168.0.135 (192.168.0.135) 56(84) bytes of data. 64 bytes from 192.168.0.135: icmp_seq=1 ttl=64 time=1.81 ms 64 bytes from 192.168.0.135: icmp_seq=2 ttl=64 time=1.38 ms","title":"Operating multiple interfaces at once"},{"location":"debug/mpcie_ethernet/#conclusion","text":"Ethernet interfaces from extension card inserted into mPCIe slot 1 operate properly in terms of device enumeration and DHCP lease. Ethernet interfaces from extension card inserted into mPCIe slot 2 do not operate properly. They are not enumerated by kernel. After forcing mPCIe clock to be always on, Ethernet interfaces from extension card inserted into mPCIe 2 slot operate in the same fashion as when inserted into mPCIe slot 1 (when it comes to device enumeration and DHCP lease, at least). Note that corresponding change exists for mPCIe slot 1.","title":"Conclusion"},{"location":"debug/openwrt/","text":"Openwrt booting from SD card issue Customer reported that Openwrt is not booting from SD card. It boot from the USB drive though. After investigating this issue the conclusion is lack of SD controller driver in default kernel coming with this distribution. The problem Excerpt from the message from customer: Openwrt boots fine from USB on APU2 and from USB/SD on APU1. Boot from SD on APU2 hangs after switched to clocksource tsc message. ... [ 2.419743] TCP: cubic registered [ 2.423086] NET: Registered protocol family 17 [ 2.427641] bridge: automatic filtering via arp/ip/ip6tables has been deprecated. Update your scripts to load br_netfilter if you need this. [ 2.440287] 8021q: 802.1Q VLAN Support v1.8 [ 2.444626] NET: Registered protocol family 40 [ 2.451229] rtc_cmos 00:01: setting system clock to 2016-03-07 01:30:05 UTC (1457314205) [ 2.459720] Waiting for root device PARTUUID=87cf4590-02... [ 2.672327] usb 3-1: new high-speed USB device number 2 using ehci-pci [ 2.822997] hub 3-1:1.0: USB hub found [ 2.827164] hub 3-1:1.0: 4 ports detected [ 2.972522] Switched to clocksource tsc The solution Symptoms After inserting the USB drive with the same image as on SD card OS continues to boot. /dev/mmcblk0* devices are not present. Resolution Openwrt boots normally after using the kernel with compiled in sdhci-pci driver (in default kernels this module is disabled). For Openwrt Buildroot's: make menuconfig setup openwrt for target x86 , subtarget x86_64 in Target Images check ext4 and Build GRUB images (Linux x86 or x86_64 host only) make kernel_menuconfig - could not work at first try. Try running make target/linux/prepare or make target/linux/compile first. go into Device Drivers \u2192 MMC/SD/SDIO enable MMC block device driver , Secure Digital Host Controller Interface support , SDHCI support on PCI bus commence normal build ( make ) Tested on chaos_calmer branch from https://github.com/openwrt/openwrt.","title":"Openwrt"},{"location":"debug/openwrt/#openwrt-booting-from-sd-card-issue","text":"Customer reported that Openwrt is not booting from SD card. It boot from the USB drive though. After investigating this issue the conclusion is lack of SD controller driver in default kernel coming with this distribution.","title":"Openwrt booting from SD card issue"},{"location":"debug/openwrt/#the-problem","text":"Excerpt from the message from customer: Openwrt boots fine from USB on APU2 and from USB/SD on APU1. Boot from SD on APU2 hangs after switched to clocksource tsc message. ... [ 2.419743] TCP: cubic registered [ 2.423086] NET: Registered protocol family 17 [ 2.427641] bridge: automatic filtering via arp/ip/ip6tables has been deprecated. Update your scripts to load br_netfilter if you need this. [ 2.440287] 8021q: 802.1Q VLAN Support v1.8 [ 2.444626] NET: Registered protocol family 40 [ 2.451229] rtc_cmos 00:01: setting system clock to 2016-03-07 01:30:05 UTC (1457314205) [ 2.459720] Waiting for root device PARTUUID=87cf4590-02... [ 2.672327] usb 3-1: new high-speed USB device number 2 using ehci-pci [ 2.822997] hub 3-1:1.0: USB hub found [ 2.827164] hub 3-1:1.0: 4 ports detected [ 2.972522] Switched to clocksource tsc","title":"The problem"},{"location":"debug/openwrt/#the-solution","text":"","title":"The solution"},{"location":"debug/openwrt/#symptoms","text":"After inserting the USB drive with the same image as on SD card OS continues to boot. /dev/mmcblk0* devices are not present.","title":"Symptoms"},{"location":"debug/openwrt/#resolution","text":"Openwrt boots normally after using the kernel with compiled in sdhci-pci driver (in default kernels this module is disabled). For Openwrt Buildroot's: make menuconfig setup openwrt for target x86 , subtarget x86_64 in Target Images check ext4 and Build GRUB images (Linux x86 or x86_64 host only) make kernel_menuconfig - could not work at first try. Try running make target/linux/prepare or make target/linux/compile first. go into Device Drivers \u2192 MMC/SD/SDIO enable MMC block device driver , Secure Digital Host Controller Interface support , SDHCI support on PCI bus commence normal build ( make ) Tested on chaos_calmer branch from https://github.com/openwrt/openwrt.","title":"Resolution"},{"location":"debug/pfsense-ahci-issue/","text":"pfSense installation tests Problem description Apu boards with coreboot 4.6.x have problems with pfSense installation on hard disks and platform sometimes hangs running this system. ahcich1: Timeout on slot 4 port 0 ahcich1: is 00000008 cs 00000000 ss 00000000 rs ffffffff tfd 40 serr 00000000 cmd 00406417 (ada0:ahcich1:0:0:0): WRITE_FPDMA_QUEUED. ACB: 61 10 10 c0 d6 40 26 00 00 00 00 00 (ada0:ahcich1:0:0:0): CAM status: Command timeout (ada0:ahcich1:0:0:0): Retrying command ahcich1: Timeout on slot 5 port 0 ahcich1: is 00000002 cs 00000000 ss 00000000 rs 00000020 tfd 50 serr 00000000 cmd 00406517 (aprobe0:ahcich1:0:0:0): ATA_IDENTIFY. ACB: ec 00 00 00 00 40 00 00 00 00 00 00 (aprobe0:ahcich1:0:0:0): CAM status: Command timeout (aprobe0:ahcich1:0:0:0): Retrying command ahcich1: Timeout on slot 6 port 0 ahcich1: is 00000002 cs 00000000 ss 00000000 rs 00000040 tfd 50 serr 00000000 cmd 00406617 (aprobe0:ahcich1:0:0:0): ATA_IDENTIFY. ACB: ec 00 00 00 00 40 00 00 00 00 00 00 (aprobe0:ahcich1:0:0:0): CAM status: Command timeout (aprobe0:ahcich1:0:0:0): Error 5, Retries exhausted ahcich1: Timeout on slot 7 port 0 ahcich1: is 00000002 cs 00000000 ss 00000000 rs 00000080 tfd 50 serr 00000000 cmd 00406717 (aprobe0:ahcich1:0:0:0): ATA_IDENTIFY. ACB: ec 00 00 00 00 40 00 00 00 00 00 00 (aprobe0:ahcich1:0:0:0): CAM status: Command timeout (aprobe0:ahcich1:0:0:0): Error 5, Retry was blocked ada0 at ahcich1 bus 0 scbus1 target 0 lun 0 ada0: <ST1000LM014-SSHD-8GB LVD3> s/n W380YWQN detached After command timeout, the disk is being detached and installation stops. Possible reasons Community and tests tells that problem exist only in coreboot 4.6.x. Legacy version seems to be unaffected. After dumping the SATA controller registers at the end of ramstage for both coreboot 4.6.x and 4.0.x one can see slight differences in the content of registers. The main differences worth attention are: Watch Dog Control And Status Register(PCI dev 11 fun 0 offset 0x44): Watchdog disabled in 4.6.x Watchdog counter not set properly (reset state) in 4.6.x PHY Core Control 2 Register (PCI dev 11 fun 0 offset 0x84): PHY PLL Dynamic Shutdown enabled (reset state) in 4.6.x (disabled in legacy) HBA Capabilities Register (SATA Memory Mapped AHCI Registers offset 0x0): Command Completion Coalescing Supported bit set (reset state) in 4.6.x (disabled in legacy) - this bit is read-only so its state depends on AGESA Even if these differences are eliminated, the problem still occurs. This may lead to a conclusion, that AGESA code part that was ported from 3rdparty/blobs to src/vendorcode does not behave exactly as in legacy. Checking the disk with smartctl command does not give any clue too: SMART Error Log Version: 1 ATA Error Count: 1 CR = Command Register [HEX] FR = Features Register [HEX] SC = Sector Count Register [HEX] SN = Sector Number Register [HEX] CL = Cylinder Low Register [HEX] CH = Cylinder High Register [HEX] DH = Device/Head Register [HEX] DC = Device Command Register [HEX] ER = Error register [HEX] ST = Status register [HEX] Powered_Up_Time is measured from power on, and printed as DDd+hh:mm:SS.sss where DD=days, hh=hours, mm=minutes, SS=sec, and sss=millisec. It \"wraps\" after 49.710 days. Error 1 occurred at disk power-on lifetime: 3920 hours (163 days + 8 hours) When the command that caused the error occurred, the device was in an unknown state. After command completion occurred, registers were: ER ST SC SN CL CH DH -- -- -- -- -- -- -- 04 71 00 03 00 00 40 Device Fault; Error: ABRT Commands leading to the command that caused the error were: CR FR SC SN CL CH DH DC Powered_Up_Time Command/Feature_Name -- -- -- -- -- -- -- -- ---------------- -------------------- 00 00 00 00 00 00 00 ff 01:56:32.276 NOP [Abort queued commands] 00 00 00 00 00 00 00 ff 01:56:26.955 NOP [Abort queued commands] ea 00 00 00 00 00 a0 00 01:56:22.973 FLUSH CACHE EXT 61 00 08 ff ff ff 4f 00 01:56:22.973 WRITE FPDMA QUEUED ea 00 00 00 00 00 a0 00 01:56:22.962 FLUSH CACHE EXT Digging in the FreeBSD forums gave me a hint that migration from kernel 10.x to 11.x, which takes place between pfSense versions 2.3.x and 2.4.x, caused many problems with hard disk. There were major changes to AHCI and many users complained at the same issue mentioned in this paper. I have read that customizing the installation may solve this issue. Solution and tests I have found many possible solutions on FreeBSd forums: change power saving policy for AHCI: hint.ahcich.x.pm_level=\"y\" (x - channel, y - level [0-5]) disable ATA DMA hint.ata.0.mode=PIO4 disable Message Signaled Interrupts (MSI) for ATA hint.ahci.x.msi=\"0\" (x - SATA controller) I have tested few BIOS versions like 4.0.11, 4.0.14, 4.6.1, 4.6.4. I have used the SATA port available on port and Seagate HDD: Model Family: Seagate Laptop SSHD Device Model: ST1000LM014-SSHD-8GB Serial Number: W380YWQN LU WWN Device Id: 5 000c50 06e82fb73 Firmware Version: LVD3 User Capacity: 1,000,204,886,016 bytes [1.00 TB] Sector Sizes: 512 bytes logical, 4096 bytes physical Rotation Rate: 5400 rpm Form Factor: 2.5 inches Device is: In smartctl database [for details use: -P show] ATA Version is: ACS-2, ACS-3 T13/2161-D revision 3b SATA Version is: SATA 3.1, 6.0 Gb/s (current: 6.0 Gb/s) Local Time is: Wed Feb 7 11:06:32 2018 GMT SMART support is: Available - device has SMART capability. SMART support is: Enabled The 4.0.x versions did not need any modifications. After performing over 15 installations no error occured. Problems only appeared in 4.6.x versions. BIOS version clean PM level 0 DMA disabled MSI disabled v4.6.1 FAIL FAIL FAIL PASS v4.6.4 FAIL FAIL FAIL PASS PASS - over 15 installations finished without errors As the name of modification says, it is a hint for installer to not use such features. Tests show that when installer is not using MSI the installation goes without errors. In other cases installation fails after 0-5 good installations in a row. I have found answers on FreeBSD forums that signal races occur and this leads to timeouts on disk operations. Disabling MSI seems to solve this problem. The same solution can be utilized in the installed system. Appending hint.ahci.0.msi=\"0\" to /boot/loader.conf.local should prevent system hang.","title":"Pfsense ahci issue"},{"location":"debug/pfsense-ahci-issue/#pfsense-installation-tests","text":"","title":"pfSense installation tests"},{"location":"debug/pfsense-ahci-issue/#problem-description","text":"Apu boards with coreboot 4.6.x have problems with pfSense installation on hard disks and platform sometimes hangs running this system. ahcich1: Timeout on slot 4 port 0 ahcich1: is 00000008 cs 00000000 ss 00000000 rs ffffffff tfd 40 serr 00000000 cmd 00406417 (ada0:ahcich1:0:0:0): WRITE_FPDMA_QUEUED. ACB: 61 10 10 c0 d6 40 26 00 00 00 00 00 (ada0:ahcich1:0:0:0): CAM status: Command timeout (ada0:ahcich1:0:0:0): Retrying command ahcich1: Timeout on slot 5 port 0 ahcich1: is 00000002 cs 00000000 ss 00000000 rs 00000020 tfd 50 serr 00000000 cmd 00406517 (aprobe0:ahcich1:0:0:0): ATA_IDENTIFY. ACB: ec 00 00 00 00 40 00 00 00 00 00 00 (aprobe0:ahcich1:0:0:0): CAM status: Command timeout (aprobe0:ahcich1:0:0:0): Retrying command ahcich1: Timeout on slot 6 port 0 ahcich1: is 00000002 cs 00000000 ss 00000000 rs 00000040 tfd 50 serr 00000000 cmd 00406617 (aprobe0:ahcich1:0:0:0): ATA_IDENTIFY. ACB: ec 00 00 00 00 40 00 00 00 00 00 00 (aprobe0:ahcich1:0:0:0): CAM status: Command timeout (aprobe0:ahcich1:0:0:0): Error 5, Retries exhausted ahcich1: Timeout on slot 7 port 0 ahcich1: is 00000002 cs 00000000 ss 00000000 rs 00000080 tfd 50 serr 00000000 cmd 00406717 (aprobe0:ahcich1:0:0:0): ATA_IDENTIFY. ACB: ec 00 00 00 00 40 00 00 00 00 00 00 (aprobe0:ahcich1:0:0:0): CAM status: Command timeout (aprobe0:ahcich1:0:0:0): Error 5, Retry was blocked ada0 at ahcich1 bus 0 scbus1 target 0 lun 0 ada0: <ST1000LM014-SSHD-8GB LVD3> s/n W380YWQN detached After command timeout, the disk is being detached and installation stops.","title":"Problem description"},{"location":"debug/pfsense-ahci-issue/#possible-reasons","text":"Community and tests tells that problem exist only in coreboot 4.6.x. Legacy version seems to be unaffected. After dumping the SATA controller registers at the end of ramstage for both coreboot 4.6.x and 4.0.x one can see slight differences in the content of registers. The main differences worth attention are: Watch Dog Control And Status Register(PCI dev 11 fun 0 offset 0x44): Watchdog disabled in 4.6.x Watchdog counter not set properly (reset state) in 4.6.x PHY Core Control 2 Register (PCI dev 11 fun 0 offset 0x84): PHY PLL Dynamic Shutdown enabled (reset state) in 4.6.x (disabled in legacy) HBA Capabilities Register (SATA Memory Mapped AHCI Registers offset 0x0): Command Completion Coalescing Supported bit set (reset state) in 4.6.x (disabled in legacy) - this bit is read-only so its state depends on AGESA Even if these differences are eliminated, the problem still occurs. This may lead to a conclusion, that AGESA code part that was ported from 3rdparty/blobs to src/vendorcode does not behave exactly as in legacy. Checking the disk with smartctl command does not give any clue too: SMART Error Log Version: 1 ATA Error Count: 1 CR = Command Register [HEX] FR = Features Register [HEX] SC = Sector Count Register [HEX] SN = Sector Number Register [HEX] CL = Cylinder Low Register [HEX] CH = Cylinder High Register [HEX] DH = Device/Head Register [HEX] DC = Device Command Register [HEX] ER = Error register [HEX] ST = Status register [HEX] Powered_Up_Time is measured from power on, and printed as DDd+hh:mm:SS.sss where DD=days, hh=hours, mm=minutes, SS=sec, and sss=millisec. It \"wraps\" after 49.710 days. Error 1 occurred at disk power-on lifetime: 3920 hours (163 days + 8 hours) When the command that caused the error occurred, the device was in an unknown state. After command completion occurred, registers were: ER ST SC SN CL CH DH -- -- -- -- -- -- -- 04 71 00 03 00 00 40 Device Fault; Error: ABRT Commands leading to the command that caused the error were: CR FR SC SN CL CH DH DC Powered_Up_Time Command/Feature_Name -- -- -- -- -- -- -- -- ---------------- -------------------- 00 00 00 00 00 00 00 ff 01:56:32.276 NOP [Abort queued commands] 00 00 00 00 00 00 00 ff 01:56:26.955 NOP [Abort queued commands] ea 00 00 00 00 00 a0 00 01:56:22.973 FLUSH CACHE EXT 61 00 08 ff ff ff 4f 00 01:56:22.973 WRITE FPDMA QUEUED ea 00 00 00 00 00 a0 00 01:56:22.962 FLUSH CACHE EXT Digging in the FreeBSD forums gave me a hint that migration from kernel 10.x to 11.x, which takes place between pfSense versions 2.3.x and 2.4.x, caused many problems with hard disk. There were major changes to AHCI and many users complained at the same issue mentioned in this paper. I have read that customizing the installation may solve this issue.","title":"Possible reasons"},{"location":"debug/pfsense-ahci-issue/#solution-and-tests","text":"I have found many possible solutions on FreeBSd forums: change power saving policy for AHCI: hint.ahcich.x.pm_level=\"y\" (x - channel, y - level [0-5]) disable ATA DMA hint.ata.0.mode=PIO4 disable Message Signaled Interrupts (MSI) for ATA hint.ahci.x.msi=\"0\" (x - SATA controller) I have tested few BIOS versions like 4.0.11, 4.0.14, 4.6.1, 4.6.4. I have used the SATA port available on port and Seagate HDD: Model Family: Seagate Laptop SSHD Device Model: ST1000LM014-SSHD-8GB Serial Number: W380YWQN LU WWN Device Id: 5 000c50 06e82fb73 Firmware Version: LVD3 User Capacity: 1,000,204,886,016 bytes [1.00 TB] Sector Sizes: 512 bytes logical, 4096 bytes physical Rotation Rate: 5400 rpm Form Factor: 2.5 inches Device is: In smartctl database [for details use: -P show] ATA Version is: ACS-2, ACS-3 T13/2161-D revision 3b SATA Version is: SATA 3.1, 6.0 Gb/s (current: 6.0 Gb/s) Local Time is: Wed Feb 7 11:06:32 2018 GMT SMART support is: Available - device has SMART capability. SMART support is: Enabled The 4.0.x versions did not need any modifications. After performing over 15 installations no error occured. Problems only appeared in 4.6.x versions. BIOS version clean PM level 0 DMA disabled MSI disabled v4.6.1 FAIL FAIL FAIL PASS v4.6.4 FAIL FAIL FAIL PASS PASS - over 15 installations finished without errors As the name of modification says, it is a hint for installer to not use such features. Tests show that when installer is not using MSI the installation goes without errors. In other cases installation fails after 0-5 good installations in a row. I have found answers on FreeBSD forums that signal races occur and this leads to timeouts on disk operations. Disabling MSI seems to solve this problem. The same solution can be utilized in the installed system. Appending hint.ahci.0.msi=\"0\" to /boot/loader.conf.local should prevent system hang.","title":"Solution and tests"},{"location":"debug/sd_registers_bad/","text":"Change SD controller registers BAD card acts like there is no card (logs BAD from cold boot vs no card and Card Detect tied to ground are the same in terms of command flow) Results of below test are the same: GOOD appears in bootmenu after coldboot, BAD doesn't. SDHC registers values in release v4.0.1.1: pci_write_config32(dev, 0xA4, 0x21FE32B2); //0b 0010 0001 1101 1110 0011 0010 1011 0010 pci_write_config32(dev, 0xA8, 0x00000070); //0b 0000 0000 0000 0000 0000 0000 0111 0000 pci_write_config32(dev, 0xB0, 0x01180C01); //0b 0000 0001 0001 1000 0000 1100 0000 0001 pci_write_config32(dev, 0xD0, 0x0000078B); //0b 0000 0000 0000 0000 0000 0111 1000 1011 Change from Removable card slot to Embedded slot for one device pci_write_config32(dev, 0xA4, 0x61FE32B2); //0b 0110 0001 1111 1110 0011 0010 1011 0010 Disable: Suspend/resume support, DMA support, High speed support, ADMA support, ADMA2 support, MMC8-bit support pci_write_config32(dev, 0xA4, 0x210232B2); //0b 0010 0001 0000 0010 0011 0010 1011 0010 Combination of 1. and 2. (disabled features and embedded slot ) pci_write_config32(dev, 0xA4, 0x610232B2); //0b 0110 0001 0000 0010 0011 0010 1011 0010 Disabled features and Shared Bus Slot instead: pci_write_config32(dev, 0xA4, 0xA10232B2); //0b 1010 0001 0000 0010 0011 0010 1011 0010 Disabled features + TimeOut clock from internal pci_write_config32(dev, 0xA4, 0xA1023232); //0b 1010 0001 0000 0010 0011 0010 0011 0010 Change TmoFreq from 0x32 to 0x02: pci_write_config32(dev, 0xA4, 0xA1023202); //0b 1010 0001 0000 0010 0011 0010 0000 0010 Disable features from 0xB0 register: Memory deep sleep mode, memory shutdown mode, Master Read prefetch: pci_write_config32(dev, 0xB0, 0x01180000); //0b 0000 0001 0001 1000 0000 0000 0000 0000 Force 3.3V: pci_write_config32(dev, 0xD0, 0x0004078B); //0b 0000 0000 0000 0100 0000 0111 1000 1011 SD Power pin disable: pci_write_config32(dev, 0xD0, 0x0004070B); Voltage on TP27 drops from 3.3V to 0.25V Change driver strength value: Initially 0xB8 register value was: REGISTER B8 = 0x88000400 two first bytes are: Specifies the SN driver strength value for 3.3V. Specifies the SP driver strength value for 3.3V. changes: pci_write_config32(dev, 0xB8, 0xFF000400); pci_write_config32(dev, 0xB8, 0xAA000400); pci_write_config32(dev, 0xB8, 0x55000400); pci_write_config32(dev, 0xB8, 0x00000400);","title":"Sd registers bad"},{"location":"debug/sd_registers_bad/#change-sd-controller-registers","text":"BAD card acts like there is no card (logs BAD from cold boot vs no card and Card Detect tied to ground are the same in terms of command flow) Results of below test are the same: GOOD appears in bootmenu after coldboot, BAD doesn't. SDHC registers values in release v4.0.1.1: pci_write_config32(dev, 0xA4, 0x21FE32B2); //0b 0010 0001 1101 1110 0011 0010 1011 0010 pci_write_config32(dev, 0xA8, 0x00000070); //0b 0000 0000 0000 0000 0000 0000 0111 0000 pci_write_config32(dev, 0xB0, 0x01180C01); //0b 0000 0001 0001 1000 0000 1100 0000 0001 pci_write_config32(dev, 0xD0, 0x0000078B); //0b 0000 0000 0000 0000 0000 0111 1000 1011 Change from Removable card slot to Embedded slot for one device pci_write_config32(dev, 0xA4, 0x61FE32B2); //0b 0110 0001 1111 1110 0011 0010 1011 0010 Disable: Suspend/resume support, DMA support, High speed support, ADMA support, ADMA2 support, MMC8-bit support pci_write_config32(dev, 0xA4, 0x210232B2); //0b 0010 0001 0000 0010 0011 0010 1011 0010 Combination of 1. and 2. (disabled features and embedded slot ) pci_write_config32(dev, 0xA4, 0x610232B2); //0b 0110 0001 0000 0010 0011 0010 1011 0010 Disabled features and Shared Bus Slot instead: pci_write_config32(dev, 0xA4, 0xA10232B2); //0b 1010 0001 0000 0010 0011 0010 1011 0010 Disabled features + TimeOut clock from internal pci_write_config32(dev, 0xA4, 0xA1023232); //0b 1010 0001 0000 0010 0011 0010 0011 0010 Change TmoFreq from 0x32 to 0x02: pci_write_config32(dev, 0xA4, 0xA1023202); //0b 1010 0001 0000 0010 0011 0010 0000 0010 Disable features from 0xB0 register: Memory deep sleep mode, memory shutdown mode, Master Read prefetch: pci_write_config32(dev, 0xB0, 0x01180000); //0b 0000 0001 0001 1000 0000 0000 0000 0000 Force 3.3V: pci_write_config32(dev, 0xD0, 0x0004078B); //0b 0000 0000 0000 0100 0000 0111 1000 1011 SD Power pin disable: pci_write_config32(dev, 0xD0, 0x0004070B); Voltage on TP27 drops from 3.3V to 0.25V Change driver strength value: Initially 0xB8 register value was: REGISTER B8 = 0x88000400 two first bytes are: Specifies the SN driver strength value for 3.3V. Specifies the SP driver strength value for 3.3V. changes: pci_write_config32(dev, 0xB8, 0xFF000400); pci_write_config32(dev, 0xB8, 0xAA000400); pci_write_config32(dev, 0xB8, 0x55000400); pci_write_config32(dev, 0xB8, 0x00000400);","title":"Change SD controller registers"},{"location":"debug/sdcard_debug/","text":"BAD vs GOOD card in debian No card inserted - coldboot root@debian:~# cat /proc/interrupts | grep mmc 16: 13 13 13 13 IO-APIC-fasteoi mmc0 root@debian:~# cat /sys/kernel/debug/mmc0/ios clock: 0 Hz vdd: 0 (invalid) bus mode: 1 (open drain) chip select: 0 (don't care) power mode: 0 (off) bus width: 0 (1 bits) timing spec: 0 (legacy) signal voltage: 0 (3.30 V) root@debian:~# cat /sys/kernel/debug/mmc0/clock 0 BAD card inserted - coldboot root@debian:~# cat /proc/interrupts | grep mmc 16: 13 13 13 13 IO-APIC-fasteoi mmc0 after card removal: root@debian:~# cat /proc/interrupts | grep mmc 16: 13 14 13 13 IO-APIC-fasteoi mmc0 root@debian:~# cat /sys/kernel/debug/mmc0/ios clock: 0 Hz vdd: 0 (invalid) bus mode: 1 (open drain) chip select: 0 (don't care) power mode: 0 (off) bus width: 0 (1 bits) timing spec: 0 (legacy) signal voltage: 0 (3.30 V) root@debian:~# cat /sys/kernel/debug/mmc0/clock 0 BAD card inserted - coldboot root@debian:~# cat /proc/interrupts | grep mmc 16: 187 197 197 204 IO-APIC-fasteoi mmc0 root@debian:~# cat /sys/kernel/debug/mmc0/ios clock: 50000000 Hz actual clock: 50000000 Hz vdd: 21 (3.3 ~ 3.4 V) bus mode: 2 (push-pull) chip select: 0 (don't care) power mode: 2 (on) bus width: 2 (4 bits) timing spec: 2 (sd high-speed) signal voltage: 0 (3.30 V) cat /sys/kernel/debug/mmc0/clock 50000000","title":"Sdcard debug"},{"location":"debug/sdcard_debug/#bad-vs-good-card-in-debian","text":"No card inserted - coldboot root@debian:~# cat /proc/interrupts | grep mmc 16: 13 13 13 13 IO-APIC-fasteoi mmc0 root@debian:~# cat /sys/kernel/debug/mmc0/ios clock: 0 Hz vdd: 0 (invalid) bus mode: 1 (open drain) chip select: 0 (don't care) power mode: 0 (off) bus width: 0 (1 bits) timing spec: 0 (legacy) signal voltage: 0 (3.30 V) root@debian:~# cat /sys/kernel/debug/mmc0/clock 0 BAD card inserted - coldboot root@debian:~# cat /proc/interrupts | grep mmc 16: 13 13 13 13 IO-APIC-fasteoi mmc0 after card removal: root@debian:~# cat /proc/interrupts | grep mmc 16: 13 14 13 13 IO-APIC-fasteoi mmc0 root@debian:~# cat /sys/kernel/debug/mmc0/ios clock: 0 Hz vdd: 0 (invalid) bus mode: 1 (open drain) chip select: 0 (don't care) power mode: 0 (off) bus width: 0 (1 bits) timing spec: 0 (legacy) signal voltage: 0 (3.30 V) root@debian:~# cat /sys/kernel/debug/mmc0/clock 0 BAD card inserted - coldboot root@debian:~# cat /proc/interrupts | grep mmc 16: 187 197 197 204 IO-APIC-fasteoi mmc0 root@debian:~# cat /sys/kernel/debug/mmc0/ios clock: 50000000 Hz actual clock: 50000000 Hz vdd: 21 (3.3 ~ 3.4 V) bus mode: 2 (push-pull) chip select: 0 (don't care) power mode: 2 (on) bus width: 2 (4 bits) timing spec: 2 (sd high-speed) signal voltage: 0 (3.30 V) cat /sys/kernel/debug/mmc0/clock 50000000","title":"BAD vs GOOD card in debian"},{"location":"debug/sdcard_test/","text":"GOOD-inserted Card is inserted into slot before power on. Check if card appears as a bootitem in bootmenu. (IT IS) GOOD-not-inserted Card is not inserted into slot Enter boot menu and insert card Go to setup, exit without save ( x ). Go to boot menu again and check if card appears as a bootitem (IT IS) BAD-inserted Card is inserted into slot before power on. Check if card appears as a bootitem in bootmenu. (IT IS NOT) BAD-not-inserted Card is not inserted into slot. Enter boot menu and insert card. Go to setup, exit without save ( x ). Go to boot menu again and check if card appears as a bootitem. (IT IS) Diff analyze GOOD-not-inserted.cap vs BAD-not-inserted.cap No differences other than timing differences such as: BS: BS_PAYLOAD_LOAD times (us): entry 0 run 48848 exit 0 vs BS: BS_PAYLOAD_LOAD times (us): entry 0 run 48978 exit 0 GOOD-inserted.cap vs BAD-inserted.cap 77f59000 is card initialization thread |77f5d000| phys_alloc zone=0x77f6df10 size=4096 align=1000 ret=77f59000 (detail=0x77f5eb80) GOOD: phys_alloc zone=0x77f6df10 size=4096 align=1000 ret=77f59000 (detail=0x77f61110) /77f59000\\ Start thread |77f59000| Searching bootorder for: /pci@i0cf8/*@14,7 |77f59000| sdhci@0xfeb25500 ver=1001 cap=21fe32b2 70 |77f59000| phys_alloc zone=0x77f6df18 size=44 align=10 ret=f0920 (detail=0x77f5eef0) |77f59000| sdcard_set_frequency 50 400 4000 |77f59000| sdcard_set_frequency 50 200000 0 |77f59000| host_control contains 0x00000f04 |77f59000| phys_alloc zone=0x77f6df10 size=80 align=10 ret=77f5ef30 (detail=0x77f611e0) |77f59000| Found sdcard at 0xfeb25500: SD card SS08G 7580MiB |77f59000| phys_alloc zone=0x77f6df10 size=24 align=10 ret=77f61140 (detail=0x77f5ee90) |77f59000| Registering bootable: SD card SS08G 7580MiB (type:2 prio:5 data:f0920) \\77f59000/ End thread phys_free 77f59000 (detail=0x77f61110) |77f5d000| phys_alloc zone=0x77f6df10 size=4096 align=1000 ret=77f59000 (detail=0x77f5eca0) /77f59000\\ Start thread |77f59000| ehci_send_pipe qh=0x77f5ef80 dir=128 data=0x77f59f64 size=4 |77f59000| ehci_send_pipe qh=0x77f5ef80 dir=128 data=0x77f59f64 size=4 |77f59000| ehci_send_pipe qh=0x77f5ef80 dir=128 data=0x77f59f64 size=4 |77f59000| ehci_send_pipe qh=0x77f5ef80 dir=128 data=0x77f59f64 size=4 |77f59000| phys_free 77f5ed00 (detail=0x77f5ecd0) \\77f59000/ End thread phys_free 77f59000 (detail=0x77f5eca0) BAD: phys_alloc zone=0x77f6df10 size=4096 align=1000 ret=77f59000 (detail=0x77f61110) /77f59000\\ Start thread |77f59000| Searching bootorder for: /pci@i0cf8/*@14,7 |77f59000| sdhci@0xfeb25500 ver=1001 cap=21fe32b2 70 |77f59000| phys_alloc zone=0x77f6df18 size=44 align=10 ret=f0920 (detail=0x77f5ecc0) |77f59000| sdcard_set_frequency 50 400 4000 |77f59000| sdcard_pio command stop (code=1) |77f59000| sdcard_pio command stop (code=1) |77f59000| sdcard_pio command stop (code=1) |77f59000| phys_free f0920 (detail=0x77f5ecc0) \\77f59000/ End thread phys_free 77f59000 (detail=0x77f61110) |77f5d000| phys_alloc zone=0x77f6df10 size=4096 align=1000 ret=77f59000 (detail=0x77f5eb80) /77f59000\\ Start thread |77f59000| ehci_send_pipe qh=0x77f5ed80 dir=128 data=0x77f59f64 size=4 |77f59000| ehci_send_pipe qh=0x77f5ed80 dir=128 data=0x77f59f64 size=4 |77f59000| ehci_send_pipe qh=0x77f5ed80 dir=128 data=0x77f59f64 size=4 |77f59000| ehci_send_pipe qh=0x77f5ed80 dir=128 data=0x77f59f64 size=4 |77f59000| ehci_send_pipe qh=0x77f5ed80 dir=128 data=0x77f59f64 size=4 |77f59000| phys_free 77f5ebe0 (detail=0x77f5ebb0) \\77f59000/ End thread phys_free 77f59000 (detail=0x77f5eb80) BAD-not-inserted proper initializaton of bad card: phys_alloc zone=0x77f6df10 size=4096 align=1000 ret=77f59000 (detail=0x77f61110) /77f59000\\ Start thread |77f59000| Searching bootorder for: /pci@i0cf8/*@14,7 |77f59000| sdhci@0xfeb25500 ver=1001 cap=21fe32b2 70 |77f59000| phys_alloc zone=0x77f6df18 size=44 align=10 ret=f0920 (detail=0x77f5eef0) |77f59000| sdcard_set_frequency 50 400 4000 |77f59000| sdcard_set_frequency 50 200000 0 |77f59000| host_control contains 0x00000f04 |77f59000| phys_alloc zone=0x77f6df10 size=80 align=10 ret=77f5ef30 (detail=0x77f611e0) |77f59000| Found sdcard at 0xfeb25500: SD card SS08G 7580MiB |77f59000| phys_alloc zone=0x77f6df10 size=24 align=10 ret=77f61140 (detail=0x77f5ee90) |77f59000| Registering bootable: SD card SS08G 7580MiB (type:2 prio:5 data:f0920) \\77f59000/ End thread phys_free 77f59000 (detail=0x77f61110) |77f5d000| phys_alloc zone=0x77f6df10 size=4096 align=1000 ret=77f59000 (detail=0x77f5eca0) /77f59000\\ Start thread |77f59000| ehci_send_pipe qh=0x77f5ef80 dir=128 data=0x77f59f64 size=4 |77f59000| ehci_send_pipe qh=0x77f5ef80 dir=128 data=0x77f59f64 size=4 |77f59000| ehci_send_pipe qh=0x77f5ef80 dir=128 data=0x77f59f64 size=4 |77f59000| ehci_send_pipe qh=0x77f5ef80 dir=128 data=0x77f59f64 size=4 |77f59000| phys_free 77f5ed00 (detail=0x77f5ecd0) \\77f59000/ End thread phys_free 77f59000 (detail=0x77f5eca0) It is exactly the same as GOOD BAD card does not respond to CMD8 - timeout |77f59000| sdcard_pio cmd 0 0 1ff0000 |77f59000| sdcard cmd 0 response 0 0 0 0 |77f59000| Reset card. ret = 0 |77f59000| param[0] = 0 |77f59000| error irq status = 0 |77f59000| sdcard_pio cmd 81a 1aa 1ff0000 |77f59000| sdcard_pio command stop (code=1) GOOD card responds to CMD8 properly |77f59000| sdcard_pio cmd 0 0 1ff0000 |77f59000| sdcard cmd 0 response 0 0 0 0 |77f59000| Reset card. ret = 0 |77f59000| param[0] = 0 |77f59000| error irq status = 0 |77f59000| sdcard_pio cmd 81a 1aa 1ff0000 |77f59000| sdcard cmd 81a response 1aa 0 0 0 When BAD card is inserted before powering on platform, it does not respond to any command. If it is being inserted during boot (or reinserted after boot) it responds to commands properly. Cards that are in inactive state does not respond to any command. This may suggest that BAD card is for some reason in inactive state after power-on. CMD0 makes card to go into idle state from any other state (except from inactive state ). According to specification there should be no need to check if card is in fact in idle state . In this state only a few commands can be executed. We can send CMD55 (which serves for prepending application-specific command). It responds with R1 type response, which contains information about card's current state. GOOD card was in fact in idle state after reboot. BAD card has not been responding to this command even in case of multiple CMD0 prepending it, no matter how long the time before those two commands was. Note that there is no specified time for entering in idle state so card should be ready to respond right after receiving CMD0 and no additional time window should be necessary. There is no software way (no command) that forces the card to change state from inactive state to any other. It can change state from inactive to idle after Power Cycle - drop voltage below 0.5V for at least 1ms or hot-plug ( BAD card responds properly after reinsert). But the same (entering idle state ) should take place during powering on a board. We are up-to-date with mainline SeaBIOS when it comes to sdcard service.","title":"Sdcard test"},{"location":"debug/sdcard_test/#good-inserted","text":"Card is inserted into slot before power on. Check if card appears as a bootitem in bootmenu. (IT IS)","title":"GOOD-inserted"},{"location":"debug/sdcard_test/#good-not-inserted","text":"Card is not inserted into slot Enter boot menu and insert card Go to setup, exit without save ( x ). Go to boot menu again and check if card appears as a bootitem (IT IS)","title":"GOOD-not-inserted"},{"location":"debug/sdcard_test/#bad-inserted","text":"Card is inserted into slot before power on. Check if card appears as a bootitem in bootmenu. (IT IS NOT)","title":"BAD-inserted"},{"location":"debug/sdcard_test/#bad-not-inserted","text":"Card is not inserted into slot. Enter boot menu and insert card. Go to setup, exit without save ( x ). Go to boot menu again and check if card appears as a bootitem. (IT IS)","title":"BAD-not-inserted"},{"location":"debug/sdcard_test/#diff-analyze","text":"GOOD-not-inserted.cap vs BAD-not-inserted.cap No differences other than timing differences such as: BS: BS_PAYLOAD_LOAD times (us): entry 0 run 48848 exit 0 vs BS: BS_PAYLOAD_LOAD times (us): entry 0 run 48978 exit 0 GOOD-inserted.cap vs BAD-inserted.cap 77f59000 is card initialization thread |77f5d000| phys_alloc zone=0x77f6df10 size=4096 align=1000 ret=77f59000 (detail=0x77f5eb80) GOOD: phys_alloc zone=0x77f6df10 size=4096 align=1000 ret=77f59000 (detail=0x77f61110) /77f59000\\ Start thread |77f59000| Searching bootorder for: /pci@i0cf8/*@14,7 |77f59000| sdhci@0xfeb25500 ver=1001 cap=21fe32b2 70 |77f59000| phys_alloc zone=0x77f6df18 size=44 align=10 ret=f0920 (detail=0x77f5eef0) |77f59000| sdcard_set_frequency 50 400 4000 |77f59000| sdcard_set_frequency 50 200000 0 |77f59000| host_control contains 0x00000f04 |77f59000| phys_alloc zone=0x77f6df10 size=80 align=10 ret=77f5ef30 (detail=0x77f611e0) |77f59000| Found sdcard at 0xfeb25500: SD card SS08G 7580MiB |77f59000| phys_alloc zone=0x77f6df10 size=24 align=10 ret=77f61140 (detail=0x77f5ee90) |77f59000| Registering bootable: SD card SS08G 7580MiB (type:2 prio:5 data:f0920) \\77f59000/ End thread phys_free 77f59000 (detail=0x77f61110) |77f5d000| phys_alloc zone=0x77f6df10 size=4096 align=1000 ret=77f59000 (detail=0x77f5eca0) /77f59000\\ Start thread |77f59000| ehci_send_pipe qh=0x77f5ef80 dir=128 data=0x77f59f64 size=4 |77f59000| ehci_send_pipe qh=0x77f5ef80 dir=128 data=0x77f59f64 size=4 |77f59000| ehci_send_pipe qh=0x77f5ef80 dir=128 data=0x77f59f64 size=4 |77f59000| ehci_send_pipe qh=0x77f5ef80 dir=128 data=0x77f59f64 size=4 |77f59000| phys_free 77f5ed00 (detail=0x77f5ecd0) \\77f59000/ End thread phys_free 77f59000 (detail=0x77f5eca0) BAD: phys_alloc zone=0x77f6df10 size=4096 align=1000 ret=77f59000 (detail=0x77f61110) /77f59000\\ Start thread |77f59000| Searching bootorder for: /pci@i0cf8/*@14,7 |77f59000| sdhci@0xfeb25500 ver=1001 cap=21fe32b2 70 |77f59000| phys_alloc zone=0x77f6df18 size=44 align=10 ret=f0920 (detail=0x77f5ecc0) |77f59000| sdcard_set_frequency 50 400 4000 |77f59000| sdcard_pio command stop (code=1) |77f59000| sdcard_pio command stop (code=1) |77f59000| sdcard_pio command stop (code=1) |77f59000| phys_free f0920 (detail=0x77f5ecc0) \\77f59000/ End thread phys_free 77f59000 (detail=0x77f61110) |77f5d000| phys_alloc zone=0x77f6df10 size=4096 align=1000 ret=77f59000 (detail=0x77f5eb80) /77f59000\\ Start thread |77f59000| ehci_send_pipe qh=0x77f5ed80 dir=128 data=0x77f59f64 size=4 |77f59000| ehci_send_pipe qh=0x77f5ed80 dir=128 data=0x77f59f64 size=4 |77f59000| ehci_send_pipe qh=0x77f5ed80 dir=128 data=0x77f59f64 size=4 |77f59000| ehci_send_pipe qh=0x77f5ed80 dir=128 data=0x77f59f64 size=4 |77f59000| ehci_send_pipe qh=0x77f5ed80 dir=128 data=0x77f59f64 size=4 |77f59000| phys_free 77f5ebe0 (detail=0x77f5ebb0) \\77f59000/ End thread phys_free 77f59000 (detail=0x77f5eb80) BAD-not-inserted proper initializaton of bad card: phys_alloc zone=0x77f6df10 size=4096 align=1000 ret=77f59000 (detail=0x77f61110) /77f59000\\ Start thread |77f59000| Searching bootorder for: /pci@i0cf8/*@14,7 |77f59000| sdhci@0xfeb25500 ver=1001 cap=21fe32b2 70 |77f59000| phys_alloc zone=0x77f6df18 size=44 align=10 ret=f0920 (detail=0x77f5eef0) |77f59000| sdcard_set_frequency 50 400 4000 |77f59000| sdcard_set_frequency 50 200000 0 |77f59000| host_control contains 0x00000f04 |77f59000| phys_alloc zone=0x77f6df10 size=80 align=10 ret=77f5ef30 (detail=0x77f611e0) |77f59000| Found sdcard at 0xfeb25500: SD card SS08G 7580MiB |77f59000| phys_alloc zone=0x77f6df10 size=24 align=10 ret=77f61140 (detail=0x77f5ee90) |77f59000| Registering bootable: SD card SS08G 7580MiB (type:2 prio:5 data:f0920) \\77f59000/ End thread phys_free 77f59000 (detail=0x77f61110) |77f5d000| phys_alloc zone=0x77f6df10 size=4096 align=1000 ret=77f59000 (detail=0x77f5eca0) /77f59000\\ Start thread |77f59000| ehci_send_pipe qh=0x77f5ef80 dir=128 data=0x77f59f64 size=4 |77f59000| ehci_send_pipe qh=0x77f5ef80 dir=128 data=0x77f59f64 size=4 |77f59000| ehci_send_pipe qh=0x77f5ef80 dir=128 data=0x77f59f64 size=4 |77f59000| ehci_send_pipe qh=0x77f5ef80 dir=128 data=0x77f59f64 size=4 |77f59000| phys_free 77f5ed00 (detail=0x77f5ecd0) \\77f59000/ End thread phys_free 77f59000 (detail=0x77f5eca0) It is exactly the same as GOOD BAD card does not respond to CMD8 - timeout |77f59000| sdcard_pio cmd 0 0 1ff0000 |77f59000| sdcard cmd 0 response 0 0 0 0 |77f59000| Reset card. ret = 0 |77f59000| param[0] = 0 |77f59000| error irq status = 0 |77f59000| sdcard_pio cmd 81a 1aa 1ff0000 |77f59000| sdcard_pio command stop (code=1) GOOD card responds to CMD8 properly |77f59000| sdcard_pio cmd 0 0 1ff0000 |77f59000| sdcard cmd 0 response 0 0 0 0 |77f59000| Reset card. ret = 0 |77f59000| param[0] = 0 |77f59000| error irq status = 0 |77f59000| sdcard_pio cmd 81a 1aa 1ff0000 |77f59000| sdcard cmd 81a response 1aa 0 0 0 When BAD card is inserted before powering on platform, it does not respond to any command. If it is being inserted during boot (or reinserted after boot) it responds to commands properly. Cards that are in inactive state does not respond to any command. This may suggest that BAD card is for some reason in inactive state after power-on. CMD0 makes card to go into idle state from any other state (except from inactive state ). According to specification there should be no need to check if card is in fact in idle state . In this state only a few commands can be executed. We can send CMD55 (which serves for prepending application-specific command). It responds with R1 type response, which contains information about card's current state. GOOD card was in fact in idle state after reboot. BAD card has not been responding to this command even in case of multiple CMD0 prepending it, no matter how long the time before those two commands was. Note that there is no specified time for entering in idle state so card should be ready to respond right after receiving CMD0 and no additional time window should be necessary. There is no software way (no command) that forces the card to change state from inactive state to any other. It can change state from inactive to idle after Power Cycle - drop voltage below 0.5V for at least 1ms or hot-plug ( BAD card responds properly after reinsert). But the same (entering idle state ) should take place during powering on a board. We are up-to-date with mainline SeaBIOS when it comes to sdcard service.","title":"Diff analyze"},{"location":"debug/tplink_hg/","text":"TP-LInk stick test Power on with WLAN stick attached: *SeaBIOS logs: /dff5b000\\ Start thread /dff5a000\\ Start thread |dff5e000| sdcard_set_frequency 50 400 4000 /dff59000\\ Start thread **|dff59000| xhci_hub_reset port #3: 0x000202e1, powered, pls 7, speed 0 [ - ] |dff5d000| set_address 0xdff616a0 /dff58000\\ Start thread |dff5d000| config_usb: 0xdff57fd0 |dff5d000| device rev=0200 cls=09 sub=00 proto=01 size=64 /dff56000\\ Start thread /dff55000\\ Start thread /dff54000\\ Start thread /dff53000\\ Start thread **|dff59000| XHCI port #3: 0x00200e03, powered, enabled, pls 0, speed 3 [High] **|dff59000| set_address 0xdffadfb0 **|dff59000| xhci_alloc_pipe: usbdev 0xdff61130, ring 0xdffad900, slotid 0, epid 1 |dff59000| xhci_cmd_enable_slot: |dff59000| xhci_process_events port #3: 0x00200e03, powered, enabled, pls 0, speed 3 [High] |dff59000| xhci_pross_events port #3: 0x00000e03, powered, enabled, pls 0, speed 3 [High] |dff59000| xhci_alloc_pipe: enable slot: got slotid 1 |dff59000| xhci_cmd_address_device: slotid 1 dff59000| xhci_realloc_pipe: usbdev 0xdff61130, ring 0xdffad900, slotid 1, epid 1 |dff59000| config_usb: 0xdffada20 |dff59000| device rev=0200 cls=ff sub=ff proto=ff size=64 |dff59000| xhci_realloc_pipe: usbdev 0xdff61130, ring 0xdffad900, slotid 1, epid 1 \\dff59000/ End thread |dff5e000| sdcard_set_frequency 50 200000 0 |dff5e000| host_control contains 0x00000f04 |dff5e000| Found sdcard at 0xfeb25500: SD card SD8GB 7600MiB |dff5e000| Registering bootable: SD card SD8GB 7600MiB (type:2 prio:5 data:f14e0)\\dff5e000/ End thread dff5b000/ End thread \\dff58000/ End thread \\dff5a000/ End thread \\dff5c000/ End thread **|dff60000| XHCI no devices found \\dff60000/ End thread dff53000/ End thread \\dff54000/ End thread \\dff55000/ End thread \\dff56000/ End thread **|dff5d000| Initialized USB HUB (0 ports used) \\dff5d000/ End thread \\dff5f000/ End thread *dmesg log after power on: [ 6.191070] usb 2-1: ath9k_htc: Firmware htc_9271.fw requested [ 6.191152] usb 2-1: firmware: failed to load htc_9271.fw (-2) [ 6.197100] usb 2-1: Direct firmware load failed with error -2 [ 6.197110] usb 2-1: Falling back to user helper [ 6.197515] usbcore: registered new interface driver ath9k_htc [ 6.199886] kvm: Nested Virtualization enabled [ 6.199898] kvm: Nested Paging enabled [ 6.204528] usb 2-1: ath9k_htc: USB layer deinitialized *dmesg log after reattach stick: [ 729.384964] usb 2-1: USB disconnect, device number 2 [ 745.206019] usb 2-1: new high-speed USB device number 3 using xhci_hcd [ 745.353530] usb 2-1: New USB device found, idVendor0cf3, idProduct=9271 [ 745.353546] usb 2-1: New USB device strings: Mfr=16, Product=32, SerialNumber=48 [ 745.353558] usb 2-1: Product: USB2.0 WLAN [ 745.353568] usb 2-1: Manufacturer: ATHEROS [ 745.353578] usb 2-1: SerialNumber: 12345 [ 745.355595] usb 2-1: ath9k_htc: Firmware htc_9271.fw requested [ 745.356341] usb 2-1: firmware: failed to load htc_9271.fw (-2) [ 745.362233] usb 2-1: Direct firmware load failed with error -2 [ 745.362254] usb 2-1: Falling back to user helper [ 745.364167] usb 2-1: ath9k_htc: USB layer deinitialized It seems that there is no driver. Solution: wget http://linuxwireless.org/download/htc_fw/1.3/htc_9271.fw mv htc_9271.fw /lib/firmware *dmesg output after getting driver: [ 1341.890122] usb 2-1: USB disconnect, device number 8 [ 1341.997705] usb 2-1: ath9k_htc: USB layer deinitialized [ 1345.673776] usb 2-1: new high-speed USB device number 9 using xhci_hcd [ 1345.821304] usb 2-1: New USB device found, idVendor=0cf3, idProduct=9271 [ 1345.821320] usb 2-1: New USB device strings: Mfr=16, Product=32, SerialNumber=48 [ 1345.821332] usb 2-1: Product: USB2.0 WLAN [ 1345.821342] usb 2-1: Manufacturer: ATHEROS [ 1345.821352] usb 2-1: SerialNumber: 12345 [ 1345.823393] usb 2-1: ath9k_htc: Firmware htc_9271.fw requested [ 1345.824238] usb 2-1: firmware: direct-loading firmware htc_9271.fw [ 1346.286718] usb 2-1: ath9k_htc: Transferred FW: htc_9271.fw, size: 51272 [ 1346.522733] ath9k_htc 2-1:1.0: ath9k_htc: HTC initialized with 33 credits [ 1346.749872] ath9k_htc 2-1:1.0: ath9k_htc: FW Version: 1.3 [ 1346.749884] ath: EEPROM regdomain: 0x809c [ 1346.749890] ath: EEPROM indicates we should expect a country code [ 1346.749898] ath: doing EEPROM country->regdmn map search [ 1346.749907] ath: country maps to regdmn code: 0x52 [ 1346.749913] ath: Country alpha2 being used: CN [ 1346.749920] ath: Regpair used: 0x52 [ 1346.754781] ieee80211 phy3: Atheros AR9271 Rev:1 [ 1346.754850] cfg80211: Calling CRDA to update world regulatory domain [ 1346.786394] systemd-udevd[818]: renamed network interface wlan0 to wlan1 Reboot with WLAN stick attached /dff5b000\\ Start thread /dff5a000\\ Start thread |dff5e000| sdcard_set_frequency 50 400 4000 /dff59000\\ Start thread |dff59000| xhci_hub_reset port #3: 0x000202e1, powered, pls 7, speed 0 [ - ] |dff5d000| set_address 0xdff616a0 /dff58000\\ Start thread |dff5e000| sdcard_set_frequency 50 200000 0 |dff5e000| host_control contains 0x00000f04 |dff5e000| Found sdcard at 0xfeb25500: SD card SD8GB 7600MiB |dff5e000| Registering bootable: SD card SD8GB 7600MiB (type:2 prio:5 data:f14e0) \\dff5e000/ End thread |dff5d000| config_usb: 0xdff57fd0 |dff5d000| device rev=0200 cls=09 sub=00 proto=01 size=64 /dff56000\\ Start thread /dff55000\\ Start thread /dff54000\\ Start thread /dff53000\\ Start thread **|dff59000| XHCI port #3: 0x00200e03, powered, enabled, pls 0, speed 3 [High] **|dff59000| set_address 0xdffadfb0 |dff59000| xhci_alloc_pipe: usbdev 0xdff61130, ring 0xdffad900, slotid 0,epid 1 |dff59000| xhci_cmd_enable_slot: |dff59000| xhci_process_events port #3: 0x00200e03, powered, enabled, pls 0, speed 3 [High] |dff59000| xhci_process_events port #3: 0x00000e03, powered, enabled, pls 0, speed 3 [High] |dff59000| xhci_alloc_pipe: enable slot: got slotid 1 |dff59000| xhci_cmd_address_device: slotid 1 dff5b000/ End thread \\dff58000/ End thread \\dff5a000/ End thread \\dff5c000/ End thread dff53000/ End thread \\dff54000/ End thread \\dff55000/ End thread \\dff56000/ End thread **|dff5d000| Initialized USB HUB (0 ports used) \\dff5d000/ End thread \\dff5f000/ End thread **** dff59000| WARNING - Timeout at xhci_event_wait:701! |dff59000| xhci_alloc_pipe: address device: failed (cc -1) |dff59000| xhci_cmd_disable_slot: slotid 1 |dff59000| WARNING - Timeout at xhci_event_wait:701! |dff59000| xhci_alloc_pipe: disable failed (cc -1) \\dff59000/ End thread |dff60000| XHCI no devices found dff60000| WARNING - Timeout at wait_bit:295! **** \\dff60000/ End thread","title":"Tplink hg"},{"location":"debug/tplink_hg/#tp-link-stick-test","text":"Power on with WLAN stick attached: *SeaBIOS logs: /dff5b000\\ Start thread /dff5a000\\ Start thread |dff5e000| sdcard_set_frequency 50 400 4000 /dff59000\\ Start thread **|dff59000| xhci_hub_reset port #3: 0x000202e1, powered, pls 7, speed 0 [ - ] |dff5d000| set_address 0xdff616a0 /dff58000\\ Start thread |dff5d000| config_usb: 0xdff57fd0 |dff5d000| device rev=0200 cls=09 sub=00 proto=01 size=64 /dff56000\\ Start thread /dff55000\\ Start thread /dff54000\\ Start thread /dff53000\\ Start thread **|dff59000| XHCI port #3: 0x00200e03, powered, enabled, pls 0, speed 3 [High] **|dff59000| set_address 0xdffadfb0 **|dff59000| xhci_alloc_pipe: usbdev 0xdff61130, ring 0xdffad900, slotid 0, epid 1 |dff59000| xhci_cmd_enable_slot: |dff59000| xhci_process_events port #3: 0x00200e03, powered, enabled, pls 0, speed 3 [High] |dff59000| xhci_pross_events port #3: 0x00000e03, powered, enabled, pls 0, speed 3 [High] |dff59000| xhci_alloc_pipe: enable slot: got slotid 1 |dff59000| xhci_cmd_address_device: slotid 1 dff59000| xhci_realloc_pipe: usbdev 0xdff61130, ring 0xdffad900, slotid 1, epid 1 |dff59000| config_usb: 0xdffada20 |dff59000| device rev=0200 cls=ff sub=ff proto=ff size=64 |dff59000| xhci_realloc_pipe: usbdev 0xdff61130, ring 0xdffad900, slotid 1, epid 1 \\dff59000/ End thread |dff5e000| sdcard_set_frequency 50 200000 0 |dff5e000| host_control contains 0x00000f04 |dff5e000| Found sdcard at 0xfeb25500: SD card SD8GB 7600MiB |dff5e000| Registering bootable: SD card SD8GB 7600MiB (type:2 prio:5 data:f14e0)\\dff5e000/ End thread dff5b000/ End thread \\dff58000/ End thread \\dff5a000/ End thread \\dff5c000/ End thread **|dff60000| XHCI no devices found \\dff60000/ End thread dff53000/ End thread \\dff54000/ End thread \\dff55000/ End thread \\dff56000/ End thread **|dff5d000| Initialized USB HUB (0 ports used) \\dff5d000/ End thread \\dff5f000/ End thread *dmesg log after power on: [ 6.191070] usb 2-1: ath9k_htc: Firmware htc_9271.fw requested [ 6.191152] usb 2-1: firmware: failed to load htc_9271.fw (-2) [ 6.197100] usb 2-1: Direct firmware load failed with error -2 [ 6.197110] usb 2-1: Falling back to user helper [ 6.197515] usbcore: registered new interface driver ath9k_htc [ 6.199886] kvm: Nested Virtualization enabled [ 6.199898] kvm: Nested Paging enabled [ 6.204528] usb 2-1: ath9k_htc: USB layer deinitialized *dmesg log after reattach stick: [ 729.384964] usb 2-1: USB disconnect, device number 2 [ 745.206019] usb 2-1: new high-speed USB device number 3 using xhci_hcd [ 745.353530] usb 2-1: New USB device found, idVendor0cf3, idProduct=9271 [ 745.353546] usb 2-1: New USB device strings: Mfr=16, Product=32, SerialNumber=48 [ 745.353558] usb 2-1: Product: USB2.0 WLAN [ 745.353568] usb 2-1: Manufacturer: ATHEROS [ 745.353578] usb 2-1: SerialNumber: 12345 [ 745.355595] usb 2-1: ath9k_htc: Firmware htc_9271.fw requested [ 745.356341] usb 2-1: firmware: failed to load htc_9271.fw (-2) [ 745.362233] usb 2-1: Direct firmware load failed with error -2 [ 745.362254] usb 2-1: Falling back to user helper [ 745.364167] usb 2-1: ath9k_htc: USB layer deinitialized It seems that there is no driver. Solution: wget http://linuxwireless.org/download/htc_fw/1.3/htc_9271.fw mv htc_9271.fw /lib/firmware *dmesg output after getting driver: [ 1341.890122] usb 2-1: USB disconnect, device number 8 [ 1341.997705] usb 2-1: ath9k_htc: USB layer deinitialized [ 1345.673776] usb 2-1: new high-speed USB device number 9 using xhci_hcd [ 1345.821304] usb 2-1: New USB device found, idVendor=0cf3, idProduct=9271 [ 1345.821320] usb 2-1: New USB device strings: Mfr=16, Product=32, SerialNumber=48 [ 1345.821332] usb 2-1: Product: USB2.0 WLAN [ 1345.821342] usb 2-1: Manufacturer: ATHEROS [ 1345.821352] usb 2-1: SerialNumber: 12345 [ 1345.823393] usb 2-1: ath9k_htc: Firmware htc_9271.fw requested [ 1345.824238] usb 2-1: firmware: direct-loading firmware htc_9271.fw [ 1346.286718] usb 2-1: ath9k_htc: Transferred FW: htc_9271.fw, size: 51272 [ 1346.522733] ath9k_htc 2-1:1.0: ath9k_htc: HTC initialized with 33 credits [ 1346.749872] ath9k_htc 2-1:1.0: ath9k_htc: FW Version: 1.3 [ 1346.749884] ath: EEPROM regdomain: 0x809c [ 1346.749890] ath: EEPROM indicates we should expect a country code [ 1346.749898] ath: doing EEPROM country->regdmn map search [ 1346.749907] ath: country maps to regdmn code: 0x52 [ 1346.749913] ath: Country alpha2 being used: CN [ 1346.749920] ath: Regpair used: 0x52 [ 1346.754781] ieee80211 phy3: Atheros AR9271 Rev:1 [ 1346.754850] cfg80211: Calling CRDA to update world regulatory domain [ 1346.786394] systemd-udevd[818]: renamed network interface wlan0 to wlan1 Reboot with WLAN stick attached /dff5b000\\ Start thread /dff5a000\\ Start thread |dff5e000| sdcard_set_frequency 50 400 4000 /dff59000\\ Start thread |dff59000| xhci_hub_reset port #3: 0x000202e1, powered, pls 7, speed 0 [ - ] |dff5d000| set_address 0xdff616a0 /dff58000\\ Start thread |dff5e000| sdcard_set_frequency 50 200000 0 |dff5e000| host_control contains 0x00000f04 |dff5e000| Found sdcard at 0xfeb25500: SD card SD8GB 7600MiB |dff5e000| Registering bootable: SD card SD8GB 7600MiB (type:2 prio:5 data:f14e0) \\dff5e000/ End thread |dff5d000| config_usb: 0xdff57fd0 |dff5d000| device rev=0200 cls=09 sub=00 proto=01 size=64 /dff56000\\ Start thread /dff55000\\ Start thread /dff54000\\ Start thread /dff53000\\ Start thread **|dff59000| XHCI port #3: 0x00200e03, powered, enabled, pls 0, speed 3 [High] **|dff59000| set_address 0xdffadfb0 |dff59000| xhci_alloc_pipe: usbdev 0xdff61130, ring 0xdffad900, slotid 0,epid 1 |dff59000| xhci_cmd_enable_slot: |dff59000| xhci_process_events port #3: 0x00200e03, powered, enabled, pls 0, speed 3 [High] |dff59000| xhci_process_events port #3: 0x00000e03, powered, enabled, pls 0, speed 3 [High] |dff59000| xhci_alloc_pipe: enable slot: got slotid 1 |dff59000| xhci_cmd_address_device: slotid 1 dff5b000/ End thread \\dff58000/ End thread \\dff5a000/ End thread \\dff5c000/ End thread dff53000/ End thread \\dff54000/ End thread \\dff55000/ End thread \\dff56000/ End thread **|dff5d000| Initialized USB HUB (0 ports used) \\dff5d000/ End thread \\dff5f000/ End thread **** dff59000| WARNING - Timeout at xhci_event_wait:701! |dff59000| xhci_alloc_pipe: address device: failed (cc -1) |dff59000| xhci_cmd_disable_slot: slotid 1 |dff59000| WARNING - Timeout at xhci_event_wait:701! |dff59000| xhci_alloc_pipe: disable failed (cc -1) \\dff59000/ End thread |dff60000| XHCI no devices found dff60000| WARNING - Timeout at wait_bit:295! **** \\dff60000/ End thread","title":"TP-LInk stick test"},{"location":"debug/tpm/","text":"TPM support for apu platforms Mainline TPM status Recently sent patches regarding TPM2.0 support for apu2 boards have been merged: https://review.coreboot.org/c/coreboot/+/21983 https://review.coreboot.org/c/coreboot/+/28000 The Infineon SLB9665 TT 2.0 was not detected properly in coreboot, which caused wrong TPM startup procedure for this particular chip to be invoked. TPM enabling in coreboot for apu2 Currently TPM2.0 can be enabled in mainline menuconfig by selecting option: Security -> Trusted Platform Module -> Trusted Platform Module -> 2.0 With this setting TPM is initialized properly now and can be used in OS. Issues SeaBIOS does not display the TPM configuration menu despite coreboot initialize the TPM properly and creates TCPA ACPI table. It looks like SeaBIOS sees it as TPM 1.2: TCGBIOS: Detected a TPM 1.2. TCGBIOS: Starting with TPM_Startup(ST_CLEAR) Return from tpm_simple_cmd(99, 1) = 1e TCGBIOS: TPM malfunctioning (line 874). Return from tpm_simple_cmd(73, 0) = 1e Issusng wrong TPM startup leads to TPM malfunctioning output. After investigating the code which determines the TPM version, one can see, that if certain field in TPM register is 0, then it is TPM 2.0, TPM 1.2 otherwise: /* TPM 2 has an interface register */ u32 ifaceid = readl(TIS_REG(0, TIS_REG_IFACE_ID)); if ((ifaceid & 0xf) == 0) { /* TPM 2 */ return TPM_VERSION_2; } return TPM_VERSION_1_2; The first condition fails and code falls down to TPM 1.2. Fix According to Infineon datasheet , the CHIP complies to TPM Main Specification, Family \"2.0\", Level 00, Revision 01.16 . However I could nto find there any information about hardware registers. After digging in TPM PTP specification it turns out, that it is not only method to identificate TPM2.0. Looking at Interface Identifier register (which is used to identify TPM on SeaBIOS rel-1.11.2) we can see that Interface Type must be 0 for TPM2.0 (page 54). But... 1. A value of 1111b in this field SHALL be interpreted to mean the TPM supports a PC Client TPM Interface Specification v1.3 compliant FIFO interface. 2. If the TPM supports this specification, the value of this field SHALL NOT be 1111b. ... 4. If this field is set to 0000b: a. The TPM SHALL correctly report all other capabilities for TPM_INTERFACE_ID_x fields b. The TPM SHALL support TPM_INTERFACE_ID_x.InterfaceVersion, which SHALL be defined for the FIFO interface as 0h. And note 925: TPMs implemented to support PC Client Specific TPM Interface Specification 1.3 or earlier will return 1111b for InterfaceType. If this field returns 1111b, a TPM may be a TPM family 2.0 implemented with a FIFO interface compliant with TIS 1.3. If this is the case, PTP specific features will be implemented as part of the TPM_INTF_CAPABILITY_x register, not this register. That means there is also Interface Capability register which reports interface version. See page 100 of PTP specification, bits 28:30: 011: Interface 1.3 for TPM 2.0 as defined in this specification. After correcting the conditions, the TPM should work fine. See work on SeaBIOS repository Utilizing TPM_INTF_CAPABILITY_x leads to proper initialization of TPM2.0. TPM ifaceid: ffffffff TPM ifacecap: 300000ff TCGBIOS: Detected a TPM 2. Return from tpm_simple_cmd(144, 0) = 100 TCGBIOS: Return value from sending TPM2_CC_Startup(SU_CLEAR) = 0x00000100 Return from tpm_simple_cmd(143, 1) = 0 TCGBIOS: Return value from sending TPM2_CC_SelfTest = 0x00000000 TCGBIOS: Return value from sending TPM2_CC_GetCapability = 0x00000000 TCGBIOS: LASA = 0xcfe9a000, next entry = 0xcfe9a000 TCGBIOS: SMBIOS at 0x000f6ee0 TCGBIOS: LASA = 0xcfe9a000, next entry = 0xcfe9a048 TCGBIOS: LASA = 0xcfe9a000, next entry = 0xcfe9a0ac One can see that Interface Identifier register value is completely invalid. SeaBIOS must rely on TPM_INTF_CAPABILITY_x register. NOTE: unfortunately this fix is already present in SeaBIOS mainline repository, but still on master branch. It is not available on rel-1.11.2 or 1.11-stable This and few other commits extending TPM support are present: d1343e6 tpm: Request access to locality 0 4922d6c tpm: when CRB is active, select, lock it, and check addresses 8bd306e tpm: revert return values for successful/failed CRB probing 408630e tpm: Wait for tpmRegValidSts flag on CRB interface before probing 5adc8bd tpm: Handle unimplemented TIS_REG_IFACE_ID in tis_get_tpm_version() 96060ad tpm: Wait for interface startup when probing 559b3e2 tpm: Refactor duplicated wait code in tis_wait_sts() & crb_wait_reg() 9c6e73b tpm: add TPM CRB device support a197e20 tpm: use get_tpm_version() callback c75d45a tpm: generalize init_timeout() Conclusion To use Infineon SLB9665 TPM2.0 in SeaBIOS, one should use master branch to get it working.","title":"Tpm"},{"location":"debug/tpm/#tpm-support-for-apu-platforms","text":"","title":"TPM support for apu platforms"},{"location":"debug/tpm/#mainline-tpm-status","text":"Recently sent patches regarding TPM2.0 support for apu2 boards have been merged: https://review.coreboot.org/c/coreboot/+/21983 https://review.coreboot.org/c/coreboot/+/28000 The Infineon SLB9665 TT 2.0 was not detected properly in coreboot, which caused wrong TPM startup procedure for this particular chip to be invoked.","title":"Mainline TPM status"},{"location":"debug/tpm/#tpm-enabling-in-coreboot-for-apu2","text":"Currently TPM2.0 can be enabled in mainline menuconfig by selecting option: Security -> Trusted Platform Module -> Trusted Platform Module -> 2.0 With this setting TPM is initialized properly now and can be used in OS.","title":"TPM enabling in coreboot for apu2"},{"location":"debug/tpm/#issues","text":"SeaBIOS does not display the TPM configuration menu despite coreboot initialize the TPM properly and creates TCPA ACPI table. It looks like SeaBIOS sees it as TPM 1.2: TCGBIOS: Detected a TPM 1.2. TCGBIOS: Starting with TPM_Startup(ST_CLEAR) Return from tpm_simple_cmd(99, 1) = 1e TCGBIOS: TPM malfunctioning (line 874). Return from tpm_simple_cmd(73, 0) = 1e Issusng wrong TPM startup leads to TPM malfunctioning output. After investigating the code which determines the TPM version, one can see, that if certain field in TPM register is 0, then it is TPM 2.0, TPM 1.2 otherwise: /* TPM 2 has an interface register */ u32 ifaceid = readl(TIS_REG(0, TIS_REG_IFACE_ID)); if ((ifaceid & 0xf) == 0) { /* TPM 2 */ return TPM_VERSION_2; } return TPM_VERSION_1_2; The first condition fails and code falls down to TPM 1.2.","title":"Issues"},{"location":"debug/tpm/#fix","text":"According to Infineon datasheet , the CHIP complies to TPM Main Specification, Family \"2.0\", Level 00, Revision 01.16 . However I could nto find there any information about hardware registers. After digging in TPM PTP specification it turns out, that it is not only method to identificate TPM2.0. Looking at Interface Identifier register (which is used to identify TPM on SeaBIOS rel-1.11.2) we can see that Interface Type must be 0 for TPM2.0 (page 54). But... 1. A value of 1111b in this field SHALL be interpreted to mean the TPM supports a PC Client TPM Interface Specification v1.3 compliant FIFO interface. 2. If the TPM supports this specification, the value of this field SHALL NOT be 1111b. ... 4. If this field is set to 0000b: a. The TPM SHALL correctly report all other capabilities for TPM_INTERFACE_ID_x fields b. The TPM SHALL support TPM_INTERFACE_ID_x.InterfaceVersion, which SHALL be defined for the FIFO interface as 0h. And note 925: TPMs implemented to support PC Client Specific TPM Interface Specification 1.3 or earlier will return 1111b for InterfaceType. If this field returns 1111b, a TPM may be a TPM family 2.0 implemented with a FIFO interface compliant with TIS 1.3. If this is the case, PTP specific features will be implemented as part of the TPM_INTF_CAPABILITY_x register, not this register. That means there is also Interface Capability register which reports interface version. See page 100 of PTP specification, bits 28:30: 011: Interface 1.3 for TPM 2.0 as defined in this specification. After correcting the conditions, the TPM should work fine. See work on SeaBIOS repository Utilizing TPM_INTF_CAPABILITY_x leads to proper initialization of TPM2.0. TPM ifaceid: ffffffff TPM ifacecap: 300000ff TCGBIOS: Detected a TPM 2. Return from tpm_simple_cmd(144, 0) = 100 TCGBIOS: Return value from sending TPM2_CC_Startup(SU_CLEAR) = 0x00000100 Return from tpm_simple_cmd(143, 1) = 0 TCGBIOS: Return value from sending TPM2_CC_SelfTest = 0x00000000 TCGBIOS: Return value from sending TPM2_CC_GetCapability = 0x00000000 TCGBIOS: LASA = 0xcfe9a000, next entry = 0xcfe9a000 TCGBIOS: SMBIOS at 0x000f6ee0 TCGBIOS: LASA = 0xcfe9a000, next entry = 0xcfe9a048 TCGBIOS: LASA = 0xcfe9a000, next entry = 0xcfe9a0ac One can see that Interface Identifier register value is completely invalid. SeaBIOS must rely on TPM_INTF_CAPABILITY_x register. NOTE: unfortunately this fix is already present in SeaBIOS mainline repository, but still on master branch. It is not available on rel-1.11.2 or 1.11-stable This and few other commits extending TPM support are present: d1343e6 tpm: Request access to locality 0 4922d6c tpm: when CRB is active, select, lock it, and check addresses 8bd306e tpm: revert return values for successful/failed CRB probing 408630e tpm: Wait for tpmRegValidSts flag on CRB interface before probing 5adc8bd tpm: Handle unimplemented TIS_REG_IFACE_ID in tis_get_tpm_version() 96060ad tpm: Wait for interface startup when probing 559b3e2 tpm: Refactor duplicated wait code in tis_wait_sts() & crb_wait_reg() 9c6e73b tpm: add TPM CRB device support a197e20 tpm: use get_tpm_version() callback c75d45a tpm: generalize init_timeout()","title":"Fix"},{"location":"debug/tpm/#conclusion","text":"To use Infineon SLB9665 TPM2.0 in SeaBIOS, one should use master branch to get it working.","title":"Conclusion"},{"location":"debug/usb-debugging/","text":"apu2 USB xHCi debugging SeaBIOS debug output The first step was to analyze verbose output on SeaBIOS. The minimal necessary debug level is 5 to get the xHCI verbosity. The first thing which can be noticed is: |cff49000| xhci_process_events port #2: 0x00021203, powered, enabled, pls 0, speed 4 [Super] |cff49000| WARNING - Timeout at xhci_event_wait:743! |cff49000| xhci_alloc_pipe: address device: failed (cc -1) |cff49000| xhci_cmd_disable_slot: slotid 1 |cff49000| xhci_trb_queue: ring 0xcff9ed00 [nidx 3, len 0] |cff49000| xhci_doorbell: slotid 0, epid 0 |cff49000| WARNING - Timeout at xhci_event_wait:743! |cff49000| xhci_alloc_pipe: disable failed (cc -1) According to xHCI specification, the proper initialization procedure is as follows: Reset the device on the hub Perform enable slot Send adress device command Configure the device As seen above in the log, adress command fails with timeout. After adjusting the timeouts to get rid of these problems: |cff47000| XHCI port #2: 0x00001203, powered, enabled, pls 0, speed 4 [Super] |cff47000| set_address 0xcff9efb0 |cff47000| xhci_alloc_pipe: usbdev 0xcff4dc60, ring 0xcff9e200, slotid 0, epid 1 |cff47000| xhci_cmd_enable_slot: |cff47000| xhci_trb_queue: ring 0xcff9ed00 [nidx 7, len 0] |cff47000| xhci_doorbell: slotid 0, epid 0 |cff47000| xhci_process_events: ring 0xcff9ed00 [trb 0xcff9ed60, evt 0xcff9ee00, type 33, eidx 7, cc 1] |cff47000| xhci_alloc_pipe: enable slot: got slotid 2 |cff47000| xhci_cmd_address_device: slotid 2 |cff47000| xhci_trb_queue: ring 0xcff9ed00 [nidx 8, len 0] |cff47000| xhci_doorbell: slotid 0, epid 0 |cff47000| xhci_process_events: ring 0xcff9ed00 [trb 0xcff9ed70, evt 0xcff9ee00, type 33, eidx 8, cc 4] |cff47000| xhci_alloc_pipe: address device: failed (cc 4) |cff47000| xhci_cmd_disable_slot: slotid 2 |cff47000| xhci_trb_queue: ring 0xcff9ed00 [nidx 9, len 0] |cff47000| xhci_doorbell: slotid 0, epid 0 |cff47000| xhci_process_events: ring 0xcff9ed00 [trb 0xcff9ed80, evt 0xcff9ee00, type 33, eidx 9, cc 1] This time the address command returned status 4 which stands for Transaction Error. xHCI specification says: If the SET_ADDRESS request was unsuccessful, system software may issue a Disable Slot Command for the slot or reset the device and attempt the Address Device Command again. An unsuccessful Address Device Command shall leave the Device Slot in the Default state. A USB Transaction Error Completion Code for an Address Device Command may be due to a Stall response from a device. Software should issue a Disable Slot Command for the Device Slot then an Enable Slot Command to recover from this error. Tried both approaches without success. The result is the same, device respond with Transaction Error ( cc 4 ). USB protocol 3.0 vs 3.1 I have accidentally discovered that some sticks are properly detected regardless of the warmboot or coldboot. I started wondering what is the difference between them (price, quality?). So I had two different sticks: Device Descriptor: bLength 18 bDescriptorType 1 bcdUSB 3.10 bDeviceClass 0 (Defined at Interface level) bDeviceSubClass 0 bDeviceProtocol 0 bMaxPacketSize0 9 idVendor 0x0951 Kingston Technology idProduct 0x1666 bcdDevice 0.01 iManufacturer 1 Kingston iProduct 2 DataTraveler 3.0 iSerial 3 60A44C4252A8F17059930048 bNumConfigurations 1 Device Descriptor: bLength 18 bDescriptorType 1 bcdUSB 3.00 bDeviceClass 0 (Defined at Interface level) bDeviceSubClass 0 bDeviceProtocol 0 bMaxPacketSize0 9 idVendor 0x054c Sony Corp. idProduct 0x09c2 bcdDevice 1.10 iManufacturer 1 Sony iProduct 2 Storage Media iSerial 3 5C0710618C3915CF56 bNumConfigurations 1 The one that had problem with detection in SeaBIOS is Kingston which supports USB 3.1 protocol. On the contrary the Sony stick was always detected and supports USB 3.0 protocol. Although USB 3.1 should be back-compatible with USB 3.0, I have dug a little bit into the changes between 3.0 and 3.1 and found that: USB 3.1 brings changes in every layer for both the host and device, including hubs that are in-between. But one of the ideas in USB 3.1 is to not require changes to the software, so a hardware-based, enhanced SuperSpeed device notification mechanism was introduced so that devices can communicate with hosts at a lower layer and report that they are operating at this higher rate. New SuperSpeedPlus host controllers must utilize this extra bandwidth without requiring changes to the existing host drivers. The higher frequency involved with the 10 Gbps data rate means that there is a good chance that system designers will need to include repeaters. If the host or device loss is greater than 7dB at 5GHz, a repeater may be necessary on both the host and the device to travel across the cable. SuperSpeed posed a problem because a single bit error could cause the link to go into recovery in two cases: with skip ordered sets or with start link commands. This caused an error rate of up to 5.7^-15. USB 3.1 introduces a new start-up speed negotiation protocol. The goal of this protocol is to get the link up to the highest rate supported by both devices. The way this works is that it uses the low frequency periodic signal (LFPS) that was introduced in USB 3.0 and it changes it slightly to turn into a pulse width modulation message, called the LFPS-Based PWM Messaging (LBPM). That made me a hint, what if USB 3.1 memsticks respond in a slightly different way causing SeaBIOS to fail to initialize them? Another test I did was coldboot tests. I have noticed that USB 3.1 stick was detected properly after coldbooting the platform in 1 minute interval. That leads to a conclusion that some capacitance or even impedance is making the device respone stall (as xHCI spec says). Comparing the temperture of stick connectors I also noticed that 3.1 stick emits much more heat than 3.0 stick. This can have significant impact on the electrical characteristics of the hub. Another thing that is worth mentioning is that SeaBIOS recognizes only two types of USB protocol on xHCI, 3.0 and 2.0: XHCI init on dev 00:10.0: regs @ 0xf7f22000, 4 ports, 32 slots, 32 byte contexts XHCI extcap 0x1 @ 0xf7f22500 XHCI protocol USB 3.00, 2 ports (offset 1), def 0 XHCI protocol USB 2.00, 2 ports (offset 3), def 10 XHCI extcap 0xa @ 0xf7f22540 Unfortunately these aspects need much more investigation with many more different USB sticks 3.0 and 3.1. Another problem is I have no idea why the Transaction Error code is received (no possibility to look at the lwo level signals on the USB lines). What does xHCI spec mean by stall? To answer that question, maybe much more specialized hardware and tools would be required. Test results I have run a RF test on the USB 3.0 stick and it survived 50 coldboots. The interval between relay switching was 5 seconds on coldboots. It could not pass the warmboot test, although it survived only 7 cycles (still better than 0 cycles in case of USB 3.1). The same test on the USB3.1 stick did not pass the 50 warmboots. I achieved a pass on coldboots when I was waiting between relay switches for 30 seconds. That leads to conclusion that the platform needs to \"cool down\" before it will attempt to initialize USB 3.1 stick (maybe some capacitance discharging or wire impedance fall because of the temperature fall). apu4 and xHCI problems apu4 boards seem to have problems with detecting two USB 3.x sticks simultaneously. To ensure repeatable results, identical sticks with identical content were used in the tests: Device Descriptor: bLength 18 bDescriptorType 1 bcdUSB 3.00 bDeviceClass 0 (Defined at Interface level) bDeviceSubClass 0 bDeviceProtocol 0 bMaxPacketSize0 9 idVendor 0x0951 Kingston Technology idProduct 0x1666 bcdDevice 1.10 iManufacturer 1 Kingston iProduct 2 DataTraveler 3.0 iSerial 3 0015F284C2ADB04189554426 bNumConfigurations 1 In the first place it is worth mentioning that xHCI initialisation is done in coreboot by setting just one boolean variable to TRUE. AGESA handles out the rest (xHCI fimrware loading, setting port routing, power management etc.) as specified in BKDG. Used xHCI firmware is the newest available. Interfacing with with USB devices is done in SeaBIOS via dedicated xHCI PCI registers and xHCI memory mapped IO configuration registers, so there is no mistake in the implementation (however not all registers are documented in BKDG, we had to assume some register content according to Intel e8000 SoC datasheet which described every register and every bit, example: BKDG describes only 1 bit in port status and control register, rest is \"reserved\"). After deep investigation with verbose debug output in SeaBIOS we have discovered that one port is not functioning properly (bottom one). It turned out that after a hub reset, when SeaBIOS is polling USB Port Status and Control register for Current Connect Status bit (device detection procedure), this bit is not being asserted even if polling time is significantly increased (this bit is updated by hardware). If this bit is not asserted, USB 3.0 protocol can not kick in. Given that we suspect an electrical issue on the Super Speed TX and RX lines which are used in the device detection procedure. USB2.0 sticks does not have such problems because they do not use Super Speed TX and RX lines. When the device is detected the USB protocol kicks in and USB stick is configured properly (although a KINGSTON USB3.1 stick gives weird responses during adress command which were described earlier in this document). SeaBIOS has also implemented a delay called XHCI_TIME_POST_POWER defined as 100ms. After host controller reset, platform waits 100ms for power stabilization on USB hub. Unfortunately increasing the delay to 200 or 250 seconds does not make any difference in device detection. We did some improvements in the terms of timings again, increased slightly the detection maximum time etc. As a result we were able to improve the detection rate slightly and even make two ports work on the apu4b Serial Number: WN1226344_1749. But still the other two apu4a boards we had available do not detect USB stick in bottom port ( Current Connect Status bit not asserted). We have carried out some test on the debug binary to show the statistics of detection and Current Connect Status bit assertion. The problem exists only on apu4 boards, so to compare the results, apu2 board was used too: port\\board apu2c apu4a apu4b top 100% 100% 100% bottom 100% 0% 100% apu4a Serial Number: WN1142380_1708 apu4b Serial Number: WN1226344_1749 apu2c Serial Number: WN1101743_1629 Both boards used the same coreboot base v4.6.8 and the same SeaBIOS version. The table shows the rate of Current Connect Status bit assertion in corresponding hub ports. The table clearly shows the \"toxic\" port, but it is not affecting the neighbouring port. What is interesting, on the apu4a board when cross-swapped the sticks, the top port started to be \"toxic\". It turned out that one stick is not detected on any port on that particular apu4a board (however it is detected on apu4b and apu2c tested boards). Despite identical manufacturer, product id and content the sticks behave in different way on this particular board. To confirm it, a not working stick was exchanged with following stick: Device Descriptor: bLength 18 bDescriptorType 1 bcdUSB 3.00 bDeviceClass 0 (Defined at Interface level) bDeviceSubClass 0 bDeviceProtocol 0 bMaxPacketSize0 9 idVendor 0x090c Silicon Motion, Inc. - Taiwan (formerly Feiya Technology Corp.) idProduct 0x1000 Flash Drive bcdDevice 11.00 iManufacturer 1 Intenso iProduct 2 Intenso Premium Line iSerial 3 0130000000021889 Now both ports detected USB3.0 sticks: Select boot device: 1. USB MSC Drive Kingston DataTraveler 3.0 PMAP 2. USB MSC Drive Intenso Premium Line 1100 3. AHCI/0: SATA SSD ATA-10 Hard-Disk (15272 MiBytes) 4. Payload [memtest] 5. Payload [setup] Taking all results above into consideration, we suspect an eletrical problems on the USB3.0 lines or on the physical connection. After looking onto not-working USB3.0 stick I noticed that SSTX+ line was a little bit curved downside, which could possibly prevent the stick from proper detection. After manual lifting the SSTX+ pin upside the stick was suddenly detected properly. Proper detection has been confirmed with automated validation test with apu4_v4.6.8 image: port\\board apu4a 1 apu4a 2 apu4b top cold:54%, warm:OK, reset:OK cold:OK, warm:OK, reset:OK cold:OK, warm:OK, reset:OK bottom cold:OK, warm:OK, reset:OK cold:OK, warm:OK, reset:68% cold:OK, warm:OK, reset:OK Test conditions: - 2x same USB3.0 sticks Kingston DataTraveler 3.0 - 50x coldboot, warmboot, reset cycles - two USB entries should appear in boot menu - apu4a 1 Serial Number: WN1142380_1708 - apu4a 2 Serial Number: WN1142383_1708 - apu4b Serial Number: WN1226344_1749 apu4a 1 has a 46% detection rate of two sticks after coldboot(1 stick sometimes do not appear in boot menu). apu4a 2 has a 68% detection rate of two sticks after shorting reset pin (1 stick sometimes do not appear in boot menu). Taking all results above into consideration, we still suspect an eletrical problem on the USB3.0 lines. The eletrical level detection according to USB3.x spec is as follows: The Rx detection operates on the principle of the RC time constant of the circuit. This time constant changes based on the presence of the receiver termination. 1. A Transmitter must start at a stable voltage prior to the detect common mode shift. 2. A Transmitter changes the common mode voltage on Txp and Txn consistent with detection of Receiver high impedance which is bounded by parameter Z_RX-HIGH-IMP-DC-POS listed in Table 6-13. 3. A Receiver is detected based on the rate that the lines change to the new voltage: - The Receiver is not present if the voltage at the Transmitter charges at a rate dictated only by the Transmitter impedance and the capacitance of the interconnect and series capacitor. - The Receiver is present if the voltage at the Transmitter charges at a rate dictated by the Transmitter impedance, the series capacitor, the interconnect capacitance, and the Receiver termination. So basically if impedance of the USB3.x lines does not change due to stick presence, the charge time will remain the same, causing hardware be unable to detect device. Eletrical engineer should investigate the USB3.0 lines and check them on apu4 board (the not-working scenario) and other working board like apu2 in order to exclude the possibility of wrong board layout, wiring etc. Without a report we can not possibly make any step further. Testing UEFI (Tianocore) stack Similar tests were performed with debug tianocore payload. First of all, USB sticks rarely were detected as SuperSpeed (3.0) devices, usually only in a few boots after platform was turned off for some time. This is log from first boot: XhcClearRootHubPortFeature: status Success UsbEnumeratePort: port 1 state - 803, change - 01 on CF71FD18 UsbEnumeratePort: Device Connect/Disconnect Normally UsbEnumeratePort: new device connected at port 1 XhcUsbPortReset! XhcSetRootHubPortFeature: status Success XhcClearRootHubPortFeature: status Success XhcClearRootHubPortFeature: status Success Enable Slot Successfully, The Slot ID = 0x2 Address 2 assigned successfully UsbEnumerateNewDev: hub port 1 is reset UsbEnumerateNewDev: PortStatus - 803 PortChangeStatus - 0 UsbEnumerateNewDev: device is of 3 speed UsbEnumerateNewDev: device uses translator (0, 0) UsbEnumerateNewDev: device is now ADDRESSED at 2 UsbEnumerateNewDev: max packet size for EP 0 is 512 Evaluate context UsbBuildDescTable: device has 1 configures UsbGetOneConfig: total length is 44 UsbParseConfigDesc: config 1 has 1 interfaces UsbParseInterfaceDesc: interface 0(setting 0) has 2 endpoints Endpoint[81]: Created BULK ring [CF729200~CF72A200) Endpoint[2]: Created BULK ring [CF72A200~CF72B200) Configure Endpoint UsbEnumerateNewDev: device 2 is now in CONFIGED state UsbSelectConfig: config 1 selected for device 2 UsbSelectSetting: setting 0 selected for interface 0 This is from another boot: XhcClearRootHubPortFeature: status Success UsbEnumeratePort: port 3 state - 01, change - 01 on CF71FD18 UsbEnumeratePort: Device Connect/Disconnect Normally UsbEnumeratePort: new device connected at port 3 XhcUsbPortReset! XhcSetRootHubPortFeature: status Success XhcClearRootHubPortFeature: status Success XhcClearRootHubPortFeature: status Success Enable Slot Successfully, The Slot ID = 0x2 Address 2 assigned successfully UsbEnumerateNewDev: hub port 3 is reset UsbEnumerateNewDev: device is of 2 speed UsbEnumerateNewDev: device uses translator (0, 0) UsbEnumerateNewDev: device is now ADDRESSED at 2 UsbEnumerateNewDev: max packet size for EP 0 is 64 Evaluate context UsbBuildDescTable: device has 1 configures UsbGetOneConfig: total length is 32 UsbParseConfigDesc: config 1 has 1 interfaces UsbParseInterfaceDesc: interface 0(setting 0) has 2 endpoints Endpoint[81]: Created BULK ring [CF729200~CF72A200) Endpoint[2]: Created BULK ring [CF72A200~CF72B200) Configure Endpoint UsbEnumerateNewDev: device 2 is now in CONFIGED state UsbSelectConfig: config 1 selected for device 2 UsbSelectSetting: setting 0 selected for interface 0 These are taken from the same platform and stick, nothing was changed between them, but device speed is different. This could point to hardware problem, either thermal issue or some parasite capacitance. When a stick isn't recognized as a SuperSpeed one, it is initialized as HighSpeed device usually, but not always. lsusb started from Debian seems to match the speed detected by UEFI, but not much tests from Linux were done. For some reason hot-plug was not working, it is unclear if this issue is connected. Total detection rate is about 80% for cold boot (success means that both sticks were detected). It gets lower for longer tests, down to 70% for 1000 iterations. Warm boot and reset results are better, but it is possible that these depend on initial cold boot result. Most runs for warm boot and reboot showed 100% success rate, while for a few this rate was significantly lower (about 40-50%), intermediate values were not observed. In very rare cases firmware hang during boot process. This is an example of such a hang: (...) UsbSelectSetting: setting 0 selected for interface 0 InstallProtocolInterface: 09576E91-6D3F-11D2-8E39-00A0C969723B CF71F598 InstallProtocolInterface: 2B2F68D6-0CD2-44CF-8E8B-BBA20B1B5B75 CF71EEC0 UsbConnectDriver: TPL before connect is 8, CF71F398 Stop Slot = 1,Dci = 3 XhcStopEndpoint: Slot = 0x1, Dci = 0x3 XhcSetTrDequeuePointer: Slot = 0x1, Dci = 0x3, Urb = 0xCF71DD98 XhcBulkTransfer: error - Time out, transfer - 40 UsbBotDataTransfer: (Time out) Stop Slot = 1,Dci = 3 XhcStopEndpoint: Slot = 0x1, Dci = 0x3 XhcSetTrDequeuePointer: Slot = 0x1, Dci = 0x3, Urb = 0xCF71DD98 XhcBulkTransfer: error - Time out, transfer - 40 Stop Slot = 1,Dci = 3 XhcStopEndpoint: Slot = 0x1, Dci = 0x3 XhcSetTrDequeuePointer: Slot = 0x1, Dci = 0x3, Urb = 0xCF71DD98 XhcBulkTransfer: error - Time out, transfer - 40 Last lines are repeated every 60 seconds or so. This particular log is from reboot test immediately after failed cold boot (only one stick was detected). Full boot logs: tiano.log - both sticks detected tiano2.log - one stick detected The stick that was not detected for some reason is still visible as a boot option in the second log, but boot order was changed. Note that there are more USB devices connected to mPCIe connectors, they are also visible in log files, along with Device Error : UsbBuildDescTable: device has 1 configures UsbGetOneConfig: total length is 25 UsbParseConfigDesc: config 1 has 1 interfaces UsbParseInterfaceDesc: interface 0(setting 0) has 1 endpoints EhcExecTransfer: transfer failed with 2 EhcControlTransfer: error - Device Error, transfer - 2 UsbBuildDescTable: get language ID table Unsupported UsbEnumerateNewDev: device 1 is now in CONFIGED state UsbSelectConfig: config 1 selected for device 1 UsbSelectSetting: setting 0 selected for interface 0 Turning off all EHCI controllers doesn't affect USB stick detection rate.","title":"apu2 USB xHCi debugging"},{"location":"debug/usb-debugging/#apu2-usb-xhci-debugging","text":"","title":"apu2 USB xHCi debugging"},{"location":"debug/usb-debugging/#seabios-debug-output","text":"The first step was to analyze verbose output on SeaBIOS. The minimal necessary debug level is 5 to get the xHCI verbosity. The first thing which can be noticed is: |cff49000| xhci_process_events port #2: 0x00021203, powered, enabled, pls 0, speed 4 [Super] |cff49000| WARNING - Timeout at xhci_event_wait:743! |cff49000| xhci_alloc_pipe: address device: failed (cc -1) |cff49000| xhci_cmd_disable_slot: slotid 1 |cff49000| xhci_trb_queue: ring 0xcff9ed00 [nidx 3, len 0] |cff49000| xhci_doorbell: slotid 0, epid 0 |cff49000| WARNING - Timeout at xhci_event_wait:743! |cff49000| xhci_alloc_pipe: disable failed (cc -1) According to xHCI specification, the proper initialization procedure is as follows: Reset the device on the hub Perform enable slot Send adress device command Configure the device As seen above in the log, adress command fails with timeout. After adjusting the timeouts to get rid of these problems: |cff47000| XHCI port #2: 0x00001203, powered, enabled, pls 0, speed 4 [Super] |cff47000| set_address 0xcff9efb0 |cff47000| xhci_alloc_pipe: usbdev 0xcff4dc60, ring 0xcff9e200, slotid 0, epid 1 |cff47000| xhci_cmd_enable_slot: |cff47000| xhci_trb_queue: ring 0xcff9ed00 [nidx 7, len 0] |cff47000| xhci_doorbell: slotid 0, epid 0 |cff47000| xhci_process_events: ring 0xcff9ed00 [trb 0xcff9ed60, evt 0xcff9ee00, type 33, eidx 7, cc 1] |cff47000| xhci_alloc_pipe: enable slot: got slotid 2 |cff47000| xhci_cmd_address_device: slotid 2 |cff47000| xhci_trb_queue: ring 0xcff9ed00 [nidx 8, len 0] |cff47000| xhci_doorbell: slotid 0, epid 0 |cff47000| xhci_process_events: ring 0xcff9ed00 [trb 0xcff9ed70, evt 0xcff9ee00, type 33, eidx 8, cc 4] |cff47000| xhci_alloc_pipe: address device: failed (cc 4) |cff47000| xhci_cmd_disable_slot: slotid 2 |cff47000| xhci_trb_queue: ring 0xcff9ed00 [nidx 9, len 0] |cff47000| xhci_doorbell: slotid 0, epid 0 |cff47000| xhci_process_events: ring 0xcff9ed00 [trb 0xcff9ed80, evt 0xcff9ee00, type 33, eidx 9, cc 1] This time the address command returned status 4 which stands for Transaction Error. xHCI specification says: If the SET_ADDRESS request was unsuccessful, system software may issue a Disable Slot Command for the slot or reset the device and attempt the Address Device Command again. An unsuccessful Address Device Command shall leave the Device Slot in the Default state. A USB Transaction Error Completion Code for an Address Device Command may be due to a Stall response from a device. Software should issue a Disable Slot Command for the Device Slot then an Enable Slot Command to recover from this error. Tried both approaches without success. The result is the same, device respond with Transaction Error ( cc 4 ).","title":"SeaBIOS debug output"},{"location":"debug/usb-debugging/#usb-protocol-30-vs-31","text":"I have accidentally discovered that some sticks are properly detected regardless of the warmboot or coldboot. I started wondering what is the difference between them (price, quality?). So I had two different sticks: Device Descriptor: bLength 18 bDescriptorType 1 bcdUSB 3.10 bDeviceClass 0 (Defined at Interface level) bDeviceSubClass 0 bDeviceProtocol 0 bMaxPacketSize0 9 idVendor 0x0951 Kingston Technology idProduct 0x1666 bcdDevice 0.01 iManufacturer 1 Kingston iProduct 2 DataTraveler 3.0 iSerial 3 60A44C4252A8F17059930048 bNumConfigurations 1 Device Descriptor: bLength 18 bDescriptorType 1 bcdUSB 3.00 bDeviceClass 0 (Defined at Interface level) bDeviceSubClass 0 bDeviceProtocol 0 bMaxPacketSize0 9 idVendor 0x054c Sony Corp. idProduct 0x09c2 bcdDevice 1.10 iManufacturer 1 Sony iProduct 2 Storage Media iSerial 3 5C0710618C3915CF56 bNumConfigurations 1 The one that had problem with detection in SeaBIOS is Kingston which supports USB 3.1 protocol. On the contrary the Sony stick was always detected and supports USB 3.0 protocol. Although USB 3.1 should be back-compatible with USB 3.0, I have dug a little bit into the changes between 3.0 and 3.1 and found that: USB 3.1 brings changes in every layer for both the host and device, including hubs that are in-between. But one of the ideas in USB 3.1 is to not require changes to the software, so a hardware-based, enhanced SuperSpeed device notification mechanism was introduced so that devices can communicate with hosts at a lower layer and report that they are operating at this higher rate. New SuperSpeedPlus host controllers must utilize this extra bandwidth without requiring changes to the existing host drivers. The higher frequency involved with the 10 Gbps data rate means that there is a good chance that system designers will need to include repeaters. If the host or device loss is greater than 7dB at 5GHz, a repeater may be necessary on both the host and the device to travel across the cable. SuperSpeed posed a problem because a single bit error could cause the link to go into recovery in two cases: with skip ordered sets or with start link commands. This caused an error rate of up to 5.7^-15. USB 3.1 introduces a new start-up speed negotiation protocol. The goal of this protocol is to get the link up to the highest rate supported by both devices. The way this works is that it uses the low frequency periodic signal (LFPS) that was introduced in USB 3.0 and it changes it slightly to turn into a pulse width modulation message, called the LFPS-Based PWM Messaging (LBPM). That made me a hint, what if USB 3.1 memsticks respond in a slightly different way causing SeaBIOS to fail to initialize them? Another test I did was coldboot tests. I have noticed that USB 3.1 stick was detected properly after coldbooting the platform in 1 minute interval. That leads to a conclusion that some capacitance or even impedance is making the device respone stall (as xHCI spec says). Comparing the temperture of stick connectors I also noticed that 3.1 stick emits much more heat than 3.0 stick. This can have significant impact on the electrical characteristics of the hub. Another thing that is worth mentioning is that SeaBIOS recognizes only two types of USB protocol on xHCI, 3.0 and 2.0: XHCI init on dev 00:10.0: regs @ 0xf7f22000, 4 ports, 32 slots, 32 byte contexts XHCI extcap 0x1 @ 0xf7f22500 XHCI protocol USB 3.00, 2 ports (offset 1), def 0 XHCI protocol USB 2.00, 2 ports (offset 3), def 10 XHCI extcap 0xa @ 0xf7f22540 Unfortunately these aspects need much more investigation with many more different USB sticks 3.0 and 3.1. Another problem is I have no idea why the Transaction Error code is received (no possibility to look at the lwo level signals on the USB lines). What does xHCI spec mean by stall? To answer that question, maybe much more specialized hardware and tools would be required.","title":"USB protocol 3.0 vs 3.1"},{"location":"debug/usb-debugging/#test-results","text":"I have run a RF test on the USB 3.0 stick and it survived 50 coldboots. The interval between relay switching was 5 seconds on coldboots. It could not pass the warmboot test, although it survived only 7 cycles (still better than 0 cycles in case of USB 3.1). The same test on the USB3.1 stick did not pass the 50 warmboots. I achieved a pass on coldboots when I was waiting between relay switches for 30 seconds. That leads to conclusion that the platform needs to \"cool down\" before it will attempt to initialize USB 3.1 stick (maybe some capacitance discharging or wire impedance fall because of the temperature fall).","title":"Test results"},{"location":"debug/usb-debugging/#apu4-and-xhci-problems","text":"apu4 boards seem to have problems with detecting two USB 3.x sticks simultaneously. To ensure repeatable results, identical sticks with identical content were used in the tests: Device Descriptor: bLength 18 bDescriptorType 1 bcdUSB 3.00 bDeviceClass 0 (Defined at Interface level) bDeviceSubClass 0 bDeviceProtocol 0 bMaxPacketSize0 9 idVendor 0x0951 Kingston Technology idProduct 0x1666 bcdDevice 1.10 iManufacturer 1 Kingston iProduct 2 DataTraveler 3.0 iSerial 3 0015F284C2ADB04189554426 bNumConfigurations 1 In the first place it is worth mentioning that xHCI initialisation is done in coreboot by setting just one boolean variable to TRUE. AGESA handles out the rest (xHCI fimrware loading, setting port routing, power management etc.) as specified in BKDG. Used xHCI firmware is the newest available. Interfacing with with USB devices is done in SeaBIOS via dedicated xHCI PCI registers and xHCI memory mapped IO configuration registers, so there is no mistake in the implementation (however not all registers are documented in BKDG, we had to assume some register content according to Intel e8000 SoC datasheet which described every register and every bit, example: BKDG describes only 1 bit in port status and control register, rest is \"reserved\"). After deep investigation with verbose debug output in SeaBIOS we have discovered that one port is not functioning properly (bottom one). It turned out that after a hub reset, when SeaBIOS is polling USB Port Status and Control register for Current Connect Status bit (device detection procedure), this bit is not being asserted even if polling time is significantly increased (this bit is updated by hardware). If this bit is not asserted, USB 3.0 protocol can not kick in. Given that we suspect an electrical issue on the Super Speed TX and RX lines which are used in the device detection procedure. USB2.0 sticks does not have such problems because they do not use Super Speed TX and RX lines. When the device is detected the USB protocol kicks in and USB stick is configured properly (although a KINGSTON USB3.1 stick gives weird responses during adress command which were described earlier in this document). SeaBIOS has also implemented a delay called XHCI_TIME_POST_POWER defined as 100ms. After host controller reset, platform waits 100ms for power stabilization on USB hub. Unfortunately increasing the delay to 200 or 250 seconds does not make any difference in device detection. We did some improvements in the terms of timings again, increased slightly the detection maximum time etc. As a result we were able to improve the detection rate slightly and even make two ports work on the apu4b Serial Number: WN1226344_1749. But still the other two apu4a boards we had available do not detect USB stick in bottom port ( Current Connect Status bit not asserted). We have carried out some test on the debug binary to show the statistics of detection and Current Connect Status bit assertion. The problem exists only on apu4 boards, so to compare the results, apu2 board was used too: port\\board apu2c apu4a apu4b top 100% 100% 100% bottom 100% 0% 100% apu4a Serial Number: WN1142380_1708 apu4b Serial Number: WN1226344_1749 apu2c Serial Number: WN1101743_1629 Both boards used the same coreboot base v4.6.8 and the same SeaBIOS version. The table shows the rate of Current Connect Status bit assertion in corresponding hub ports. The table clearly shows the \"toxic\" port, but it is not affecting the neighbouring port. What is interesting, on the apu4a board when cross-swapped the sticks, the top port started to be \"toxic\". It turned out that one stick is not detected on any port on that particular apu4a board (however it is detected on apu4b and apu2c tested boards). Despite identical manufacturer, product id and content the sticks behave in different way on this particular board. To confirm it, a not working stick was exchanged with following stick: Device Descriptor: bLength 18 bDescriptorType 1 bcdUSB 3.00 bDeviceClass 0 (Defined at Interface level) bDeviceSubClass 0 bDeviceProtocol 0 bMaxPacketSize0 9 idVendor 0x090c Silicon Motion, Inc. - Taiwan (formerly Feiya Technology Corp.) idProduct 0x1000 Flash Drive bcdDevice 11.00 iManufacturer 1 Intenso iProduct 2 Intenso Premium Line iSerial 3 0130000000021889 Now both ports detected USB3.0 sticks: Select boot device: 1. USB MSC Drive Kingston DataTraveler 3.0 PMAP 2. USB MSC Drive Intenso Premium Line 1100 3. AHCI/0: SATA SSD ATA-10 Hard-Disk (15272 MiBytes) 4. Payload [memtest] 5. Payload [setup] Taking all results above into consideration, we suspect an eletrical problems on the USB3.0 lines or on the physical connection. After looking onto not-working USB3.0 stick I noticed that SSTX+ line was a little bit curved downside, which could possibly prevent the stick from proper detection. After manual lifting the SSTX+ pin upside the stick was suddenly detected properly. Proper detection has been confirmed with automated validation test with apu4_v4.6.8 image: port\\board apu4a 1 apu4a 2 apu4b top cold:54%, warm:OK, reset:OK cold:OK, warm:OK, reset:OK cold:OK, warm:OK, reset:OK bottom cold:OK, warm:OK, reset:OK cold:OK, warm:OK, reset:68% cold:OK, warm:OK, reset:OK Test conditions: - 2x same USB3.0 sticks Kingston DataTraveler 3.0 - 50x coldboot, warmboot, reset cycles - two USB entries should appear in boot menu - apu4a 1 Serial Number: WN1142380_1708 - apu4a 2 Serial Number: WN1142383_1708 - apu4b Serial Number: WN1226344_1749 apu4a 1 has a 46% detection rate of two sticks after coldboot(1 stick sometimes do not appear in boot menu). apu4a 2 has a 68% detection rate of two sticks after shorting reset pin (1 stick sometimes do not appear in boot menu). Taking all results above into consideration, we still suspect an eletrical problem on the USB3.0 lines. The eletrical level detection according to USB3.x spec is as follows: The Rx detection operates on the principle of the RC time constant of the circuit. This time constant changes based on the presence of the receiver termination. 1. A Transmitter must start at a stable voltage prior to the detect common mode shift. 2. A Transmitter changes the common mode voltage on Txp and Txn consistent with detection of Receiver high impedance which is bounded by parameter Z_RX-HIGH-IMP-DC-POS listed in Table 6-13. 3. A Receiver is detected based on the rate that the lines change to the new voltage: - The Receiver is not present if the voltage at the Transmitter charges at a rate dictated only by the Transmitter impedance and the capacitance of the interconnect and series capacitor. - The Receiver is present if the voltage at the Transmitter charges at a rate dictated by the Transmitter impedance, the series capacitor, the interconnect capacitance, and the Receiver termination. So basically if impedance of the USB3.x lines does not change due to stick presence, the charge time will remain the same, causing hardware be unable to detect device. Eletrical engineer should investigate the USB3.0 lines and check them on apu4 board (the not-working scenario) and other working board like apu2 in order to exclude the possibility of wrong board layout, wiring etc. Without a report we can not possibly make any step further.","title":"apu4 and xHCI problems"},{"location":"debug/usb-debugging/#testing-uefi-tianocore-stack","text":"Similar tests were performed with debug tianocore payload. First of all, USB sticks rarely were detected as SuperSpeed (3.0) devices, usually only in a few boots after platform was turned off for some time. This is log from first boot: XhcClearRootHubPortFeature: status Success UsbEnumeratePort: port 1 state - 803, change - 01 on CF71FD18 UsbEnumeratePort: Device Connect/Disconnect Normally UsbEnumeratePort: new device connected at port 1 XhcUsbPortReset! XhcSetRootHubPortFeature: status Success XhcClearRootHubPortFeature: status Success XhcClearRootHubPortFeature: status Success Enable Slot Successfully, The Slot ID = 0x2 Address 2 assigned successfully UsbEnumerateNewDev: hub port 1 is reset UsbEnumerateNewDev: PortStatus - 803 PortChangeStatus - 0 UsbEnumerateNewDev: device is of 3 speed UsbEnumerateNewDev: device uses translator (0, 0) UsbEnumerateNewDev: device is now ADDRESSED at 2 UsbEnumerateNewDev: max packet size for EP 0 is 512 Evaluate context UsbBuildDescTable: device has 1 configures UsbGetOneConfig: total length is 44 UsbParseConfigDesc: config 1 has 1 interfaces UsbParseInterfaceDesc: interface 0(setting 0) has 2 endpoints Endpoint[81]: Created BULK ring [CF729200~CF72A200) Endpoint[2]: Created BULK ring [CF72A200~CF72B200) Configure Endpoint UsbEnumerateNewDev: device 2 is now in CONFIGED state UsbSelectConfig: config 1 selected for device 2 UsbSelectSetting: setting 0 selected for interface 0 This is from another boot: XhcClearRootHubPortFeature: status Success UsbEnumeratePort: port 3 state - 01, change - 01 on CF71FD18 UsbEnumeratePort: Device Connect/Disconnect Normally UsbEnumeratePort: new device connected at port 3 XhcUsbPortReset! XhcSetRootHubPortFeature: status Success XhcClearRootHubPortFeature: status Success XhcClearRootHubPortFeature: status Success Enable Slot Successfully, The Slot ID = 0x2 Address 2 assigned successfully UsbEnumerateNewDev: hub port 3 is reset UsbEnumerateNewDev: device is of 2 speed UsbEnumerateNewDev: device uses translator (0, 0) UsbEnumerateNewDev: device is now ADDRESSED at 2 UsbEnumerateNewDev: max packet size for EP 0 is 64 Evaluate context UsbBuildDescTable: device has 1 configures UsbGetOneConfig: total length is 32 UsbParseConfigDesc: config 1 has 1 interfaces UsbParseInterfaceDesc: interface 0(setting 0) has 2 endpoints Endpoint[81]: Created BULK ring [CF729200~CF72A200) Endpoint[2]: Created BULK ring [CF72A200~CF72B200) Configure Endpoint UsbEnumerateNewDev: device 2 is now in CONFIGED state UsbSelectConfig: config 1 selected for device 2 UsbSelectSetting: setting 0 selected for interface 0 These are taken from the same platform and stick, nothing was changed between them, but device speed is different. This could point to hardware problem, either thermal issue or some parasite capacitance. When a stick isn't recognized as a SuperSpeed one, it is initialized as HighSpeed device usually, but not always. lsusb started from Debian seems to match the speed detected by UEFI, but not much tests from Linux were done. For some reason hot-plug was not working, it is unclear if this issue is connected. Total detection rate is about 80% for cold boot (success means that both sticks were detected). It gets lower for longer tests, down to 70% for 1000 iterations. Warm boot and reset results are better, but it is possible that these depend on initial cold boot result. Most runs for warm boot and reboot showed 100% success rate, while for a few this rate was significantly lower (about 40-50%), intermediate values were not observed. In very rare cases firmware hang during boot process. This is an example of such a hang: (...) UsbSelectSetting: setting 0 selected for interface 0 InstallProtocolInterface: 09576E91-6D3F-11D2-8E39-00A0C969723B CF71F598 InstallProtocolInterface: 2B2F68D6-0CD2-44CF-8E8B-BBA20B1B5B75 CF71EEC0 UsbConnectDriver: TPL before connect is 8, CF71F398 Stop Slot = 1,Dci = 3 XhcStopEndpoint: Slot = 0x1, Dci = 0x3 XhcSetTrDequeuePointer: Slot = 0x1, Dci = 0x3, Urb = 0xCF71DD98 XhcBulkTransfer: error - Time out, transfer - 40 UsbBotDataTransfer: (Time out) Stop Slot = 1,Dci = 3 XhcStopEndpoint: Slot = 0x1, Dci = 0x3 XhcSetTrDequeuePointer: Slot = 0x1, Dci = 0x3, Urb = 0xCF71DD98 XhcBulkTransfer: error - Time out, transfer - 40 Stop Slot = 1,Dci = 3 XhcStopEndpoint: Slot = 0x1, Dci = 0x3 XhcSetTrDequeuePointer: Slot = 0x1, Dci = 0x3, Urb = 0xCF71DD98 XhcBulkTransfer: error - Time out, transfer - 40 Last lines are repeated every 60 seconds or so. This particular log is from reboot test immediately after failed cold boot (only one stick was detected). Full boot logs: tiano.log - both sticks detected tiano2.log - one stick detected The stick that was not detected for some reason is still visible as a boot option in the second log, but boot order was changed. Note that there are more USB devices connected to mPCIe connectors, they are also visible in log files, along with Device Error : UsbBuildDescTable: device has 1 configures UsbGetOneConfig: total length is 25 UsbParseConfigDesc: config 1 has 1 interfaces UsbParseInterfaceDesc: interface 0(setting 0) has 1 endpoints EhcExecTransfer: transfer failed with 2 EhcControlTransfer: error - Device Error, transfer - 2 UsbBuildDescTable: get language ID table Unsupported UsbEnumerateNewDev: device 1 is now in CONFIGED state UsbSelectConfig: config 1 selected for device 1 UsbSelectSetting: setting 0 selected for interface 0 Turning off all EHCI controllers doesn't affect USB stick detection rate.","title":"Testing UEFI (Tianocore) stack"},{"location":"debug/usb-sticks/","text":"USB sticks Intenso Device Descriptor: bLength 18 bDescriptorType 1 bcdUSB 3.00 bDeviceClass 0 (Defined at Interface level) bDeviceSubClass 0 bDeviceProtocol 0 bMaxPacketSize0 9 idVendor 0x090c Silicon Motion, Inc. - Taiwan (formerly Feiya Technology Corp.) idProduct 0x1000 Flash Drive bcdDevice 11.00 iManufacturer 1 Intenso iProduct 2 Intenso Premium Line iSerial 3 0130000000020180 bNumConfigurations 1 Configuration Descriptor: bLength 9 bDescriptorType 2 wTotalLength 44 bNumInterfaces 1 bConfigurationValue 1 iConfiguration 0 bmAttributes 0x80 (Bus Powered) MaxPower 76mA Interface Descriptor: bLength 9 bDescriptorType 4 bInterfaceNumber 0 bAlternateSetting 0 bNumEndpoints 2 bInterfaceClass 8 Mass Storage bInterfaceSubClass 6 SCSI bInterfaceProtocol 80 Bulk-Only iInterface 0 Endpoint Descriptor: bLength 7 bDescriptorType 5 bEndpointAddress 0x01 EP 1 OUT bmAttributes 2 Transfer Type Bulk Synch Type None Usage Type Data wMaxPacketSize 0x0400 1x 1024 bytes bInterval 0 bMaxBurst 8 Endpoint Descriptor: bLength 7 bDescriptorType 5 bEndpointAddress 0x82 EP 2 IN bmAttributes 2 Transfer Type Bulk Synch Type None Usage Type Data wMaxPacketSize 0x0400 1x 1024 bytes bInterval 0 bMaxBurst 8 Binary Object Store Descriptor: bLength 5 bDescriptorType 15 wTotalLength 22 bNumDeviceCaps 2 USB 2.0 Extension Device Capability: bLength 7 bDescriptorType 16 bDevCapabilityType 2 bmAttributes 0x00000002 Link Power Management (LPM) Supported SuperSpeed USB Device Capability: bLength 10 bDescriptorType 16 bDevCapabilityType 3 bmAttributes 0x00 wSpeedsSupported 0x000c Device can operate at High Speed (480Mbps) Device can operate at SuperSpeed (5Gbps) bFunctionalitySupport 2 Lowest fully-functional device speed is High Speed (480Mbps) bU1DevExitLat 4 micro seconds bU2DevExitLat 4 micro seconds Device Status: 0x0000 (Bus Powered) Kingston Data Traveler Device Descriptor: bLength 18 bDescriptorType 1 bcdUSB 3.00 bDeviceClass 0 (Defined at Interface level) bDeviceSubClass 0 bDeviceProtocol 0 bMaxPacketSize0 9 idVendor 0x0951 Kingston Technology idProduct 0x1666 bcdDevice 1.10 iManufacturer 1 Kingston iProduct 2 DataTraveler 3.0 iSerial 3 0015F284C2ADB04189554426 bNumConfigurations 1 Configuration Descriptor: bLength 9 bDescriptorType 2 wTotalLength 44 bNumInterfaces 1 bConfigurationValue 1 iConfiguration 0 bmAttributes 0x80 (Bus Powered) MaxPower 126mA Interface Descriptor: bLength 9 bDescriptorType 4 bInterfaceNumber 0 bAlternateSetting 0 bNumEndpoints 2 bInterfaceClass 8 Mass Storage bInterfaceSubClass 6 SCSI bInterfaceProtocol 80 Bulk-Only iInterface 0 Endpoint Descriptor: bLength 7 bDescriptorType 5 bEndpointAddress 0x81 EP 1 IN bmAttributes 2 Transfer Type Bulk Synch Type None Usage Type Data wMaxPacketSize 0x0400 1x 1024 bytes bInterval 0 bMaxBurst 3 Endpoint Descriptor: bLength 7 bDescriptorType 5 bEndpointAddress 0x02 EP 2 OUT bmAttributes 2 Transfer Type Bulk Synch Type None Usage Type Data wMaxPacketSize 0x0400 1x 1024 bytes bInterval 0 bMaxBurst 3 Binary Object Store Descriptor: bLength 5 bDescriptorType 15 wTotalLength 22 bNumDeviceCaps 2 USB 2.0 Extension Device Capability: bLength 7 bDescriptorType 16 bDevCapabilityType 2 bmAttributes 0x00000006 Link Power Management (LPM) Supported SuperSpeed USB Device Capability: bLength 10 bDescriptorType 16 bDevCapabilityType 3 bmAttributes 0x00 wSpeedsSupported 0x000e Device can operate at Full Speed (12Mbps) Device can operate at High Speed (480Mbps) Device can operate at SuperSpeed (5Gbps) bFunctionalitySupport 2 Lowest fully-functional device speed is High Speed (480Mbps) bU1DevExitLat 10 micro seconds bU2DevExitLat 2047 micro seconds Device Status: 0x0000 (Bus Powered) Corsair Voyager Vega Device Descriptor: bLength 18 bDescriptorType 1 bcdUSB 3.10 bDeviceClass 0 (Defined at Interface level) bDeviceSubClass 0 bDeviceProtocol 0 bMaxPacketSize0 9 idVendor 0x1b1c Corsair idProduct 0x1a14 bcdDevice 1.10 iManufacturer 1 iProduct 2 iSerial 3 bNumConfigurations 1 Configuration Descriptor: bLength 9 bDescriptorType 2 wTotalLength 44 bNumInterfaces 1 bConfigurationValue 1 iConfiguration 0 bmAttributes 0x80 (Bus Powered) MaxPower 126mA Interface Descriptor: bLength 9 bDescriptorType 4 bInterfaceNumber 0 bAlternateSetting 0 bNumEndpoints 2 bInterfaceClass 8 Mass Storage bInterfaceSubClass 6 SCSI bInterfaceProtocol 80 Bulk-Only iInterface 0 Endpoint Descriptor: bLength 7 bDescriptorType 5 bEndpointAddress 0x81 EP 1 IN bmAttributes 2 Transfer Type Bulk Synch Type None Usage Type Data wMaxPacketSize 0x0400 1x 1024 bytes bInterval 0 bMaxBurst 3 Endpoint Descriptor: bLength 7 bDescriptorType 5 bEndpointAddress 0x02 EP 2 OUT bmAttributes 2 Transfer Type Bulk Synch Type None Usage Type Data wMaxPacketSize 0x0400 1x 1024 bytes bInterval 0 bMaxBurst 3 ADATA DashDrive UV131 Device Descriptor: bLength 18 bDescriptorType 1 bcdUSB 3.00 bDeviceClass 0 (Defined at Interface level) bDeviceSubClass 0 bDeviceProtocol 0 bMaxPacketSize0 9 idVendor 0x125f A-DATA Technology Co., Ltd. idProduct 0xdd1a bcdDevice 11.00 iManufacturer 1 iProduct 2 iSerial 3 bNumConfigurations 1 Configuration Descriptor: bLength 9 bDescriptorType 2 wTotalLength 44 bNumInterfaces 1 bConfigurationValue 1 iConfiguration 0 bmAttributes 0x80 (Bus Powered) MaxPower 126mA Interface Descriptor: bLength 9 bDescriptorType 4 bInterfaceNumber 0 bAlternateSetting 0 bNumEndpoints 2 bInterfaceClass 8 Mass Storage bInterfaceSubClass 6 SCSI bInterfaceProtocol 80 Bulk-Only iInterface 0 Endpoint Descriptor: bLength 7 bDescriptorType 5 bEndpointAddress 0x01 EP 1 OUT bmAttributes 2 Transfer Type Bulk Synch Type None Usage Type Data wMaxPacketSize 0x0400 1x 1024 bytes bInterval 0 bMaxBurst 8 Endpoint Descriptor: bLength 7 bDescriptorType 5 bEndpointAddress 0x82 EP 2 IN bmAttributes 2 Transfer Type Bulk Synch Type None Usage Type Data wMaxPacketSize 0x0400 1x 1024 bytes bInterval 0 bMaxBurst 8 SanDisk Ultra Flair Device Descriptor: bLength 18 bDescriptorType 1 bcdUSB 3.00 bDeviceClass 0 (Defined at Interface level) bDeviceSubClass 0 bDeviceProtocol 0 bMaxPacketSize0 9 idVendor 0x0781 SanDisk Corp. idProduct 0x5591 bcdDevice 1.00 iManufacturer 1 iProduct 2 iSerial 3 bNumConfigurations 1 Configuration Descriptor: bLength 9 bDescriptorType 2 wTotalLength 44 bNumInterfaces 1 bConfigurationValue 1 iConfiguration 0 bmAttributes 0x80 (Bus Powered) MaxPower 224mA Interface Descriptor: bLength 9 bDescriptorType 4 bInterfaceNumber 0 bAlternateSetting 0 bNumEndpoints 2 bInterfaceClass 8 Mass Storage bInterfaceSubClass 6 SCSI bInterfaceProtocol 80 Bulk-Only iInterface 0 Endpoint Descriptor: bLength 7 bDescriptorType 5 bEndpointAddress 0x81 EP 1 IN bmAttributes 2 Transfer Type Bulk Synch Type None Usage Type Data wMaxPacketSize 0x0400 1x 1024 bytes bInterval 0 bMaxBurst 1 Endpoint Descriptor: bLength 7 bDescriptorType 5 bEndpointAddress 0x02 EP 2 OUT bmAttributes 2 Transfer Type Bulk Synch Type None Usage Type Data wMaxPacketSize 0x0400 1x 1024 bytes bInterval 0 bMaxBurst 15","title":"Usb sticks"},{"location":"debug/usb-sticks/#usb-sticks","text":"","title":"USB sticks"},{"location":"debug/usb-sticks/#intenso","text":"Device Descriptor: bLength 18 bDescriptorType 1 bcdUSB 3.00 bDeviceClass 0 (Defined at Interface level) bDeviceSubClass 0 bDeviceProtocol 0 bMaxPacketSize0 9 idVendor 0x090c Silicon Motion, Inc. - Taiwan (formerly Feiya Technology Corp.) idProduct 0x1000 Flash Drive bcdDevice 11.00 iManufacturer 1 Intenso iProduct 2 Intenso Premium Line iSerial 3 0130000000020180 bNumConfigurations 1 Configuration Descriptor: bLength 9 bDescriptorType 2 wTotalLength 44 bNumInterfaces 1 bConfigurationValue 1 iConfiguration 0 bmAttributes 0x80 (Bus Powered) MaxPower 76mA Interface Descriptor: bLength 9 bDescriptorType 4 bInterfaceNumber 0 bAlternateSetting 0 bNumEndpoints 2 bInterfaceClass 8 Mass Storage bInterfaceSubClass 6 SCSI bInterfaceProtocol 80 Bulk-Only iInterface 0 Endpoint Descriptor: bLength 7 bDescriptorType 5 bEndpointAddress 0x01 EP 1 OUT bmAttributes 2 Transfer Type Bulk Synch Type None Usage Type Data wMaxPacketSize 0x0400 1x 1024 bytes bInterval 0 bMaxBurst 8 Endpoint Descriptor: bLength 7 bDescriptorType 5 bEndpointAddress 0x82 EP 2 IN bmAttributes 2 Transfer Type Bulk Synch Type None Usage Type Data wMaxPacketSize 0x0400 1x 1024 bytes bInterval 0 bMaxBurst 8 Binary Object Store Descriptor: bLength 5 bDescriptorType 15 wTotalLength 22 bNumDeviceCaps 2 USB 2.0 Extension Device Capability: bLength 7 bDescriptorType 16 bDevCapabilityType 2 bmAttributes 0x00000002 Link Power Management (LPM) Supported SuperSpeed USB Device Capability: bLength 10 bDescriptorType 16 bDevCapabilityType 3 bmAttributes 0x00 wSpeedsSupported 0x000c Device can operate at High Speed (480Mbps) Device can operate at SuperSpeed (5Gbps) bFunctionalitySupport 2 Lowest fully-functional device speed is High Speed (480Mbps) bU1DevExitLat 4 micro seconds bU2DevExitLat 4 micro seconds Device Status: 0x0000 (Bus Powered)","title":"Intenso"},{"location":"debug/usb-sticks/#kingston-data-traveler","text":"Device Descriptor: bLength 18 bDescriptorType 1 bcdUSB 3.00 bDeviceClass 0 (Defined at Interface level) bDeviceSubClass 0 bDeviceProtocol 0 bMaxPacketSize0 9 idVendor 0x0951 Kingston Technology idProduct 0x1666 bcdDevice 1.10 iManufacturer 1 Kingston iProduct 2 DataTraveler 3.0 iSerial 3 0015F284C2ADB04189554426 bNumConfigurations 1 Configuration Descriptor: bLength 9 bDescriptorType 2 wTotalLength 44 bNumInterfaces 1 bConfigurationValue 1 iConfiguration 0 bmAttributes 0x80 (Bus Powered) MaxPower 126mA Interface Descriptor: bLength 9 bDescriptorType 4 bInterfaceNumber 0 bAlternateSetting 0 bNumEndpoints 2 bInterfaceClass 8 Mass Storage bInterfaceSubClass 6 SCSI bInterfaceProtocol 80 Bulk-Only iInterface 0 Endpoint Descriptor: bLength 7 bDescriptorType 5 bEndpointAddress 0x81 EP 1 IN bmAttributes 2 Transfer Type Bulk Synch Type None Usage Type Data wMaxPacketSize 0x0400 1x 1024 bytes bInterval 0 bMaxBurst 3 Endpoint Descriptor: bLength 7 bDescriptorType 5 bEndpointAddress 0x02 EP 2 OUT bmAttributes 2 Transfer Type Bulk Synch Type None Usage Type Data wMaxPacketSize 0x0400 1x 1024 bytes bInterval 0 bMaxBurst 3 Binary Object Store Descriptor: bLength 5 bDescriptorType 15 wTotalLength 22 bNumDeviceCaps 2 USB 2.0 Extension Device Capability: bLength 7 bDescriptorType 16 bDevCapabilityType 2 bmAttributes 0x00000006 Link Power Management (LPM) Supported SuperSpeed USB Device Capability: bLength 10 bDescriptorType 16 bDevCapabilityType 3 bmAttributes 0x00 wSpeedsSupported 0x000e Device can operate at Full Speed (12Mbps) Device can operate at High Speed (480Mbps) Device can operate at SuperSpeed (5Gbps) bFunctionalitySupport 2 Lowest fully-functional device speed is High Speed (480Mbps) bU1DevExitLat 10 micro seconds bU2DevExitLat 2047 micro seconds Device Status: 0x0000 (Bus Powered)","title":"Kingston Data Traveler"},{"location":"debug/usb-sticks/#corsair-voyager-vega","text":"Device Descriptor: bLength 18 bDescriptorType 1 bcdUSB 3.10 bDeviceClass 0 (Defined at Interface level) bDeviceSubClass 0 bDeviceProtocol 0 bMaxPacketSize0 9 idVendor 0x1b1c Corsair idProduct 0x1a14 bcdDevice 1.10 iManufacturer 1 iProduct 2 iSerial 3 bNumConfigurations 1 Configuration Descriptor: bLength 9 bDescriptorType 2 wTotalLength 44 bNumInterfaces 1 bConfigurationValue 1 iConfiguration 0 bmAttributes 0x80 (Bus Powered) MaxPower 126mA Interface Descriptor: bLength 9 bDescriptorType 4 bInterfaceNumber 0 bAlternateSetting 0 bNumEndpoints 2 bInterfaceClass 8 Mass Storage bInterfaceSubClass 6 SCSI bInterfaceProtocol 80 Bulk-Only iInterface 0 Endpoint Descriptor: bLength 7 bDescriptorType 5 bEndpointAddress 0x81 EP 1 IN bmAttributes 2 Transfer Type Bulk Synch Type None Usage Type Data wMaxPacketSize 0x0400 1x 1024 bytes bInterval 0 bMaxBurst 3 Endpoint Descriptor: bLength 7 bDescriptorType 5 bEndpointAddress 0x02 EP 2 OUT bmAttributes 2 Transfer Type Bulk Synch Type None Usage Type Data wMaxPacketSize 0x0400 1x 1024 bytes bInterval 0 bMaxBurst 3","title":"Corsair Voyager Vega"},{"location":"debug/usb-sticks/#adata-dashdrive-uv131","text":"Device Descriptor: bLength 18 bDescriptorType 1 bcdUSB 3.00 bDeviceClass 0 (Defined at Interface level) bDeviceSubClass 0 bDeviceProtocol 0 bMaxPacketSize0 9 idVendor 0x125f A-DATA Technology Co., Ltd. idProduct 0xdd1a bcdDevice 11.00 iManufacturer 1 iProduct 2 iSerial 3 bNumConfigurations 1 Configuration Descriptor: bLength 9 bDescriptorType 2 wTotalLength 44 bNumInterfaces 1 bConfigurationValue 1 iConfiguration 0 bmAttributes 0x80 (Bus Powered) MaxPower 126mA Interface Descriptor: bLength 9 bDescriptorType 4 bInterfaceNumber 0 bAlternateSetting 0 bNumEndpoints 2 bInterfaceClass 8 Mass Storage bInterfaceSubClass 6 SCSI bInterfaceProtocol 80 Bulk-Only iInterface 0 Endpoint Descriptor: bLength 7 bDescriptorType 5 bEndpointAddress 0x01 EP 1 OUT bmAttributes 2 Transfer Type Bulk Synch Type None Usage Type Data wMaxPacketSize 0x0400 1x 1024 bytes bInterval 0 bMaxBurst 8 Endpoint Descriptor: bLength 7 bDescriptorType 5 bEndpointAddress 0x82 EP 2 IN bmAttributes 2 Transfer Type Bulk Synch Type None Usage Type Data wMaxPacketSize 0x0400 1x 1024 bytes bInterval 0 bMaxBurst 8","title":"ADATA DashDrive UV131"},{"location":"debug/usb-sticks/#sandisk-ultra-flair","text":"Device Descriptor: bLength 18 bDescriptorType 1 bcdUSB 3.00 bDeviceClass 0 (Defined at Interface level) bDeviceSubClass 0 bDeviceProtocol 0 bMaxPacketSize0 9 idVendor 0x0781 SanDisk Corp. idProduct 0x5591 bcdDevice 1.00 iManufacturer 1 iProduct 2 iSerial 3 bNumConfigurations 1 Configuration Descriptor: bLength 9 bDescriptorType 2 wTotalLength 44 bNumInterfaces 1 bConfigurationValue 1 iConfiguration 0 bmAttributes 0x80 (Bus Powered) MaxPower 224mA Interface Descriptor: bLength 9 bDescriptorType 4 bInterfaceNumber 0 bAlternateSetting 0 bNumEndpoints 2 bInterfaceClass 8 Mass Storage bInterfaceSubClass 6 SCSI bInterfaceProtocol 80 Bulk-Only iInterface 0 Endpoint Descriptor: bLength 7 bDescriptorType 5 bEndpointAddress 0x81 EP 1 IN bmAttributes 2 Transfer Type Bulk Synch Type None Usage Type Data wMaxPacketSize 0x0400 1x 1024 bytes bInterval 0 bMaxBurst 1 Endpoint Descriptor: bLength 7 bDescriptorType 5 bEndpointAddress 0x02 EP 2 OUT bmAttributes 2 Transfer Type Bulk Synch Type None Usage Type Data wMaxPacketSize 0x0400 1x 1024 bytes bInterval 0 bMaxBurst 15","title":"SanDisk Ultra Flair"},{"location":"debug/usb-tests/","text":"USB tests Tested 3 sticks: Intenso x2 Kingston Data Traveler Tested coreboot v4.6.4 with SeaBIOS 1.11.0.3: 50x coldboots USB detection 50x warmboots USB detection 50x boot Voyage Linux 0.11 and reboot USB detection Stick no. Coldboot Warmboot Reboot 1 PASS PASS PASS 2 PASS PASS PASS Tested coreboot v4.0.14 with SeaBIOS 1.11.0.3: 50x coldboots USB detection 50x warmboots USB detection 50x boot Voyage Linux 0.11 and reboot USB detection Stick no. Coldboot Warmboot Reboot 1 PASS PASS PASS 2 PASS PASS PASS Other results of not-working sticks are presented in this document Next test iteration Test date: 29.05.2018 Firmware version: v4.6.9 Platforms: apu4a S/N: WN1142383_1708 apu4a S/N: WN1142380_1708 Sticks: Corsair Voyager Vega ADATA DashDrive UV131 SanDisk Ultra Flair Test conditions: coldboot x50 warmboot x50 boot Debian over PXE and reboot then check USB presence x50 two identical USB 3.x sticks plugged simultaneously in both slots Detection rate: Stick no./ platform. no Coldboot Warmboot Reboot 1/1 100% 100% unable to test (platform hangs after few reboots) 2/2 92% 96% unable to test (platform hangs after few reboots) 3/1 0% 0% unable to test (platform hangs after few reboots) Other observations: Sticks no. 1 and 2 work pretty good. They advertise as USB 3.x sticks almost immediately after host controller reset and seem to not collide with corresponding USB 2.0 ports. Stick no. 3 when plugged causes the reset of the host controller to fail (timeout). It is necessary to increase the timeout value for host controller reset. Even if the timeout is increased, the sticks do not advertise as USB 3.x. The are handled the same as USB 2.0 sticks. Stick no. 2 was not detected with 100% accuracy, i.e. sometimes only one of two sticks were detected in one boot iteration. Issue related to port \"toxicity\" observed on apu4. Results for stick no 3. after timeout adjustment: Stick no./ platform. no Coldboot Warmboot Reboot 3/2 80% 100% unable to test (platform hangs after few reboots) Stick no. 3 was not detected with 100% accuracy, i.e. sometimes only one of two sticks were detected in one boot iteration. Issue related to port \"toxicity\" observed on apu4.","title":"Usb tests"},{"location":"debug/usb-tests/#usb-tests","text":"Tested 3 sticks: Intenso x2 Kingston Data Traveler Tested coreboot v4.6.4 with SeaBIOS 1.11.0.3: 50x coldboots USB detection 50x warmboots USB detection 50x boot Voyage Linux 0.11 and reboot USB detection Stick no. Coldboot Warmboot Reboot 1 PASS PASS PASS 2 PASS PASS PASS Tested coreboot v4.0.14 with SeaBIOS 1.11.0.3: 50x coldboots USB detection 50x warmboots USB detection 50x boot Voyage Linux 0.11 and reboot USB detection Stick no. Coldboot Warmboot Reboot 1 PASS PASS PASS 2 PASS PASS PASS Other results of not-working sticks are presented in this document","title":"USB tests"},{"location":"debug/usb-tests/#next-test-iteration","text":"Test date: 29.05.2018 Firmware version: v4.6.9 Platforms: apu4a S/N: WN1142383_1708 apu4a S/N: WN1142380_1708 Sticks: Corsair Voyager Vega ADATA DashDrive UV131 SanDisk Ultra Flair Test conditions: coldboot x50 warmboot x50 boot Debian over PXE and reboot then check USB presence x50 two identical USB 3.x sticks plugged simultaneously in both slots Detection rate: Stick no./ platform. no Coldboot Warmboot Reboot 1/1 100% 100% unable to test (platform hangs after few reboots) 2/2 92% 96% unable to test (platform hangs after few reboots) 3/1 0% 0% unable to test (platform hangs after few reboots) Other observations: Sticks no. 1 and 2 work pretty good. They advertise as USB 3.x sticks almost immediately after host controller reset and seem to not collide with corresponding USB 2.0 ports. Stick no. 3 when plugged causes the reset of the host controller to fail (timeout). It is necessary to increase the timeout value for host controller reset. Even if the timeout is increased, the sticks do not advertise as USB 3.x. The are handled the same as USB 2.0 sticks. Stick no. 2 was not detected with 100% accuracy, i.e. sometimes only one of two sticks were detected in one boot iteration. Issue related to port \"toxicity\" observed on apu4. Results for stick no 3. after timeout adjustment: Stick no./ platform. no Coldboot Warmboot Reboot 3/2 80% 100% unable to test (platform hangs after few reboots) Stick no. 3 was not detected with 100% accuracy, i.e. sometimes only one of two sticks were detected in one boot iteration. Issue related to port \"toxicity\" observed on apu4.","title":"Next test iteration"},{"location":"debug/warmboot_reset/","text":"Doubled sign of life Problem description Sometimes sign of life happens twice. It is caused by reset of platform during warmboot (doing rte_ctrl -pon when the platform is in S5). Problem does not occur when doing coldboot or reboot. Initial ideas AGESA specification 44065 Rev. 3.04 on page 38 and followings in the operational overview says: E \u2014 Main boot path. Proceed with full hardware initialization. Warm reset may be needed to instantiate new values into some registers. Page 40, about AGESA software call entry points' duties: AmdInitReset initialize heap ctl Primary ncHt link initialization SB initialization @ reset NB after HT AmdInitEarly register load full HT initialization uCode patch load AP launch PwrMgmt Init NB post initialization Detect need for warm reset It looks like moving SOL after call to AmdInitEarly() would fix the issue, but then it gets printed after a relatively long period - user might think that platform isn't booting, also it almost immediately disappears. PMxC0 S5/Reset Status As the issue depends on state from which platform is booted I looked through power management registers in BKDG for AMD Family 16h Models 30h-3Fh Processors, 52740 Rev 3.06 . Registers of interest were those with Cold reset value, as they were remembered through resets and transitions to/from S5, but not after full power cycle. The most important one is PMxC0 S5/Reset Status: This register shows the source of previous reset. This register is also defined in AGESA headers in coreboot repository: #define FCH_PMIOxC0_S5ResetStatus 0xFED803C0ul Reading content of PMxC0 right before printing sign of life after different ways of (re)booting the platform resulted in the following values: Entering/leaving S5 PMxC0 during SOL Bits set full power cycle * 0x00000800 SlpS3ToLtdPwrGdEn hold PWR button ** 0x40200402 SleepReset, FourSecondPwrBtn thermal/power on ** 0x40200401 SleepReset, ThermalTrip reboot 0x40080400 DoReset reset button 0x40010400 UsrReset halt/power on 0x40200400 SleepReset 0x001003FF S5ResetStatus_All_Status *) not S5, included for completeness **) results in doubled SOL. Value in table corresponds to first iteration, then platform is reset and during second boot PMxC0 has the same value as after reboot Table is stripped from some common bits that don't seem to affect the problem: - 0x40000000 - reserved - 0x00000400 - PwrGdDwnBeforeSlp3 - BKDG, p. 932 : PwrGdDwnBeforeSlpS3 . Read-write. Cold reset: 0. BIOS: 1. 1=Delay SLP_S3 by 64 \u03bcs and also qualify the FCH PwrGood with SLP_S3; This allows internal logic to put signals into correct states before turning off the S0 power. Last row shows value of FCH_PMIOxC0_S5ResetStatus_All_Status , which is what AGESA checks when deciding whether platform needs a reset or not.","title":"Warmboot reset"},{"location":"debug/warmboot_reset/#doubled-sign-of-life","text":"","title":"Doubled sign of life"},{"location":"debug/warmboot_reset/#problem-description","text":"Sometimes sign of life happens twice. It is caused by reset of platform during warmboot (doing rte_ctrl -pon when the platform is in S5). Problem does not occur when doing coldboot or reboot.","title":"Problem description"},{"location":"debug/warmboot_reset/#initial-ideas","text":"AGESA specification 44065 Rev. 3.04 on page 38 and followings in the operational overview says: E \u2014 Main boot path. Proceed with full hardware initialization. Warm reset may be needed to instantiate new values into some registers. Page 40, about AGESA software call entry points' duties: AmdInitReset initialize heap ctl Primary ncHt link initialization SB initialization @ reset NB after HT AmdInitEarly register load full HT initialization uCode patch load AP launch PwrMgmt Init NB post initialization Detect need for warm reset It looks like moving SOL after call to AmdInitEarly() would fix the issue, but then it gets printed after a relatively long period - user might think that platform isn't booting, also it almost immediately disappears.","title":"Initial ideas"},{"location":"debug/warmboot_reset/#pmxc0-s5reset-status","text":"As the issue depends on state from which platform is booted I looked through power management registers in BKDG for AMD Family 16h Models 30h-3Fh Processors, 52740 Rev 3.06 . Registers of interest were those with Cold reset value, as they were remembered through resets and transitions to/from S5, but not after full power cycle. The most important one is PMxC0 S5/Reset Status: This register shows the source of previous reset. This register is also defined in AGESA headers in coreboot repository: #define FCH_PMIOxC0_S5ResetStatus 0xFED803C0ul Reading content of PMxC0 right before printing sign of life after different ways of (re)booting the platform resulted in the following values: Entering/leaving S5 PMxC0 during SOL Bits set full power cycle * 0x00000800 SlpS3ToLtdPwrGdEn hold PWR button ** 0x40200402 SleepReset, FourSecondPwrBtn thermal/power on ** 0x40200401 SleepReset, ThermalTrip reboot 0x40080400 DoReset reset button 0x40010400 UsrReset halt/power on 0x40200400 SleepReset 0x001003FF S5ResetStatus_All_Status *) not S5, included for completeness **) results in doubled SOL. Value in table corresponds to first iteration, then platform is reset and during second boot PMxC0 has the same value as after reboot Table is stripped from some common bits that don't seem to affect the problem: - 0x40000000 - reserved - 0x00000400 - PwrGdDwnBeforeSlp3 - BKDG, p. 932 : PwrGdDwnBeforeSlpS3 . Read-write. Cold reset: 0. BIOS: 1. 1=Delay SLP_S3 by 64 \u03bcs and also qualify the FCH PwrGood with SLP_S3; This allows internal logic to put signals into correct states before turning off the S0 power. Last row shows value of FCH_PMIOxC0_S5ResetStatus_All_Status , which is what AGESA checks when deciding whether platform needs a reset or not.","title":"PMxC0 S5/Reset Status"},{"location":"research/Orange_Pi_flasher/","text":"Orange Pi flasher Contents Orange Pi flasher Contents Installing armbian on Orange Pi Installing flashrom on Orange Pi Connection Flashing Customizing kernel for armbian Updating kernel on Orange Pi Zero Installing armbian on Orange Pi Prepare a SD card with armbian image on it first. Download the image from here and extract it to your SD card. Installing flashrom on Orange Pi Put the SD card into Orange Pi and boot it. Then install flashrom using the following commands: git clone https://github.com/flashrom/flashrom.git cd flashrom make CONFIG_ENABLE_LIBPCI_PROGRAMMERS=no install Enable SPI on Orange Pi: echo \"overlays=spi-spidev\" >> /boot/armbianEnv.txt echo \"param_spidev_spi_bus=1\" >> /boot/armbianEnv.txt reboot Important! Put these lines in armbianEnv.txt file only once. This file contains overall system configuration and should not contain duplicates. Connection Orange Pi pinout: Orange Pi pins APU2 pin J6 GND 2 SPI1_CS 3 SPI1_CLK 4 SPI1_MISO 5 SPI1_MOSI 6 Also shorten 2-3 pins on APU2 J2 to enable S5 state. Flashing Make sure that APU2 was powered up with shortened 2-3 pins on J2. After Orange Pi reboot type following command: flashrom -p linux_spi:dev=/dev/spidev1.0 -w coreboot.rom Note that coreboot.rom should be the rom file You are trying to write. Correct output should look like this: root@orangepizero:~# flashrom -w ./apu2_v4.6.0.rom -p linux_spi:dev=/dev/spidev1.0 flashrom 0.9.9-45-g4d440a7 on Linux 4.11.3-sun8i (armv7l) flashrom is free software, get the source code at https://flashrom.org Using clock_gettime for delay loops (clk_id: 1, resolution: 1ns). Found Winbond flash chip \"W25Q64.V\" (8192 kB, SPI) on linux_spi. Reading old flash chip contents... done. Erasing and writing flash chip... Warning: Chip content is identical to the requested image. Erase/write done. Be sure to use stable power supply. Do no supply OrangePi from PC USB. Its efficiency is not enough for proper operating of Orange Pi. It is strongly recommended to use 5V power supply connected to microUSB socket (a trusted USB charger will make it too). Using uncertain power supply leads to flash writing errors, which may brick your target device. Customizing kernel for armbian Clone the repository first and then run script compile.sh (must run as root): git clone --depth 1 https://github.com/armbian/build cd build sudo ./compile.sh compile.sh takes care of everything. Downloads cross compilation toolchain and all necessary tools. It works only with Ubuntu Xenial (16.04), other distros are supposed to be not supported. Refer to README This command will pop up a menu. Many options can be chosen there, but the most important options are: Select to build only kernel and uboot packages Show a kernel configuration menu before compilation Choose target board (in this case orangepizero ) Select the target kernel branch as dev for newest development version Accept to enter export mode I followed this approach and I strongly recommend to use it this way. Now the kernel menuconfig should pop up and the customization process begin. Make changes here for Your use case and needs, then save the changes and exit. If do not want to make changes, just leave menuconfig by saving the configuration and exiting. Kernel will be built with default configuration. After saving config and exiting, the kernel compilation will start. Updating kernel on Orange Pi Zero Debian packages created after compilation are in /repodir/build/output/debs . build/output/debs$ ls extra linux-firmware-image-dev-sun8i_5.32_armhf.deb linux-image-dev-sun8i_5.32_armhf.deb linux-u-boot-dev-orangepizero_5.32_armhf.deb linux-dtb-dev-sun8i_5.32_armhf.deb linux-headers-dev-sun8i_5.32_armhf.deb linux-source-dev-sun8i_5.32_all.deb There are also headers and source packages which are not necessary to update the Orange Pi. Send the following four packages to Orange Pi, via SCP for example: scp linux-image-dev-sun8i_5.32_armhf.deb root@192.168.0.112:/root/ scp linux-dtb-dev-sun8i_5.32_armhf.deb root@192.168.0.112:/root/ scp linux-firmware-image-dev-sun8i_5.32_armhf.deb root@192.168.0.112:/root/ scp linux-u-boot-dev-orangepizero_5.32_armhf.deb root@192.168.0.112:/root/ Now connect to Orange Pi, via SSH for example, as root. Default password is armbian1234 . Install the packages: cd dpkg -i linux-firmware-image-dev-sun8i_5.32_armhf.deb dpkg -i linux-dtb-dev-sun8i_5.32_armhf.deb dpkg -i linux-image-dev-sun8i_5.32_armhf.deb dpkg -i linux-u-boot-dev-orangepizero_5.32_armhf.deb I recommend to install them one by one, because the operation takes some time and happens to hang.","title":"Orange Pi flasher"},{"location":"research/Orange_Pi_flasher/#orange-pi-flasher","text":"","title":"Orange Pi flasher"},{"location":"research/Orange_Pi_flasher/#contents","text":"Orange Pi flasher Contents Installing armbian on Orange Pi Installing flashrom on Orange Pi Connection Flashing Customizing kernel for armbian Updating kernel on Orange Pi Zero","title":"Contents"},{"location":"research/Orange_Pi_flasher/#installing-armbian-on-orange-pi","text":"Prepare a SD card with armbian image on it first. Download the image from here and extract it to your SD card.","title":"Installing armbian on Orange Pi"},{"location":"research/Orange_Pi_flasher/#installing-flashrom-on-orange-pi","text":"Put the SD card into Orange Pi and boot it. Then install flashrom using the following commands: git clone https://github.com/flashrom/flashrom.git cd flashrom make CONFIG_ENABLE_LIBPCI_PROGRAMMERS=no install Enable SPI on Orange Pi: echo \"overlays=spi-spidev\" >> /boot/armbianEnv.txt echo \"param_spidev_spi_bus=1\" >> /boot/armbianEnv.txt reboot Important! Put these lines in armbianEnv.txt file only once. This file contains overall system configuration and should not contain duplicates.","title":"Installing flashrom on Orange Pi"},{"location":"research/Orange_Pi_flasher/#connection","text":"Orange Pi pinout: Orange Pi pins APU2 pin J6 GND 2 SPI1_CS 3 SPI1_CLK 4 SPI1_MISO 5 SPI1_MOSI 6 Also shorten 2-3 pins on APU2 J2 to enable S5 state.","title":"Connection"},{"location":"research/Orange_Pi_flasher/#flashing","text":"Make sure that APU2 was powered up with shortened 2-3 pins on J2. After Orange Pi reboot type following command: flashrom -p linux_spi:dev=/dev/spidev1.0 -w coreboot.rom Note that coreboot.rom should be the rom file You are trying to write. Correct output should look like this: root@orangepizero:~# flashrom -w ./apu2_v4.6.0.rom -p linux_spi:dev=/dev/spidev1.0 flashrom 0.9.9-45-g4d440a7 on Linux 4.11.3-sun8i (armv7l) flashrom is free software, get the source code at https://flashrom.org Using clock_gettime for delay loops (clk_id: 1, resolution: 1ns). Found Winbond flash chip \"W25Q64.V\" (8192 kB, SPI) on linux_spi. Reading old flash chip contents... done. Erasing and writing flash chip... Warning: Chip content is identical to the requested image. Erase/write done. Be sure to use stable power supply. Do no supply OrangePi from PC USB. Its efficiency is not enough for proper operating of Orange Pi. It is strongly recommended to use 5V power supply connected to microUSB socket (a trusted USB charger will make it too). Using uncertain power supply leads to flash writing errors, which may brick your target device.","title":"Flashing"},{"location":"research/Orange_Pi_flasher/#customizing-kernel-for-armbian","text":"Clone the repository first and then run script compile.sh (must run as root): git clone --depth 1 https://github.com/armbian/build cd build sudo ./compile.sh compile.sh takes care of everything. Downloads cross compilation toolchain and all necessary tools. It works only with Ubuntu Xenial (16.04), other distros are supposed to be not supported. Refer to README This command will pop up a menu. Many options can be chosen there, but the most important options are: Select to build only kernel and uboot packages Show a kernel configuration menu before compilation Choose target board (in this case orangepizero ) Select the target kernel branch as dev for newest development version Accept to enter export mode I followed this approach and I strongly recommend to use it this way. Now the kernel menuconfig should pop up and the customization process begin. Make changes here for Your use case and needs, then save the changes and exit. If do not want to make changes, just leave menuconfig by saving the configuration and exiting. Kernel will be built with default configuration. After saving config and exiting, the kernel compilation will start.","title":"Customizing kernel for armbian"},{"location":"research/Orange_Pi_flasher/#updating-kernel-on-orange-pi-zero","text":"Debian packages created after compilation are in /repodir/build/output/debs . build/output/debs$ ls extra linux-firmware-image-dev-sun8i_5.32_armhf.deb linux-image-dev-sun8i_5.32_armhf.deb linux-u-boot-dev-orangepizero_5.32_armhf.deb linux-dtb-dev-sun8i_5.32_armhf.deb linux-headers-dev-sun8i_5.32_armhf.deb linux-source-dev-sun8i_5.32_all.deb There are also headers and source packages which are not necessary to update the Orange Pi. Send the following four packages to Orange Pi, via SCP for example: scp linux-image-dev-sun8i_5.32_armhf.deb root@192.168.0.112:/root/ scp linux-dtb-dev-sun8i_5.32_armhf.deb root@192.168.0.112:/root/ scp linux-firmware-image-dev-sun8i_5.32_armhf.deb root@192.168.0.112:/root/ scp linux-u-boot-dev-orangepizero_5.32_armhf.deb root@192.168.0.112:/root/ Now connect to Orange Pi, via SSH for example, as root. Default password is armbian1234 . Install the packages: cd dpkg -i linux-firmware-image-dev-sun8i_5.32_armhf.deb dpkg -i linux-dtb-dev-sun8i_5.32_armhf.deb dpkg -i linux-image-dev-sun8i_5.32_armhf.deb dpkg -i linux-u-boot-dev-orangepizero_5.32_armhf.deb I recommend to install them one by one, because the operation takes some time and happens to hang.","title":"Updating kernel on Orange Pi Zero"},{"location":"research/ROCA/","text":"ROCA TPM vulnerability verification and status ROCA vulnerability was discovered (October 2017) in a software library, RSALib, provided by Infineon Technologies. That library is also used in TPM modules. When this vulnerability is present, a pair of prime numbers used for generating RSA keys is chosen from a small subset of all available prime numbers. This results in a great loss of entropy. Details and exact numbers can be found here . Generating RSA key pairs with TPM RSA keys can be generated with tpm2-tools . SLB 9665 used in TPM module doesn't support 512-bit RSA, so either 1024 or 2048-bit keys must be used. Context is used for key generation, so it must be generated first: tpm2_createprimary -g 'sha1' -G 'rsa1024:null:aes128cfb' -o tpm.ctx tpm2_create -C tpm.ctx -Grsa1024 -u key.pub -r key.priv Only the public key is actually required by vulnerability check. It is a good idea to generate more than one pair, probably using different key sizes - chances for false positives are extremely low, but not zero. TPM has limited internal RAM and runs out of memory after 3 operations with error: ERROR: Tss2_Sys_CreatePrimary(0x902) - tpm:warn(2.0): out of memory for object contexts In this case either rebooting or flushing open handles manually helps. Only handles-transient need to be flushed: $ tpm2_getcap -c handles-transient - 0x80000000 - 0x80000001 - 0x80000002 $ tpm2_flushcontext -c 0x80000000 $ tpm2_flushcontext -c 0x80000001 $ tpm2_flushcontext -c 0x80000002 Extracting keys hashes File key.pub is a binary file with a TPM-specific header. It is not supported by the tool for checking for ROCA vulnerability, so the key needs to be extracted and saved in one of the supported formats, e.g. hex coded number. This can be done with the following script: #!/bin/bash rm -f keys.txt for file in *.pub do dd if=${file} bs=1 skip=24 | hexdump -v -e '/1 \"%02x\"' >> keys.txt echo \"\" >> keys.txt done Testing for ROCA vulnerability A tool for checking for ROCA TPM vulnerability can be found here . The easiest way is to install it with pip : pip install roca-detect All parsed keys can be checked using just one command: roca-detect keys.txt More use cases can be found on the main page of this tool, including tests for saved SSH hosts keys. This operation should take no more than a couple of seconds, as it only checks if the key was generated from insecure prime numbers, without finding the exact numbers used. It does not generate private keys. Results This is output from test run on 2 different modules, with both 1024 and 2048-bit keys generated on each of them: 2019-03-25 18:31:17 [11915] WARNING Fingerprint found in modulus keys.txt idx 0 {\"type\": \"mod-hex\", \"fname\": \"keys.txt\", \"idx\": 0, \"aux\": null, \"n\": \"0x94b79a35a5d47040df1503670080a7714ae1ee751aeb32071b3db388b3bf80b11f661c4b8819ebd1c716239c9ec5a202b08a2aa3c17ad6cd17075ba49fcd005d8b8fa50c29433db35c1421727472deddd77bced7e6438db4d447008b11cdb018139bfef2e06c4b4a3e672543a7e9333040fd881815e14b1f1338e90180fd0865\", \"marked\": true, \"time_years\": 0.16104529886799998, \"price_aws_c4\": 70.5861544938444} (...) 2019-03-25 18:31:17 [11915] INFO ### SUMMARY #################### 2019-03-25 18:31:17 [11915] INFO Records tested: 8 2019-03-25 18:31:17 [11915] INFO .. PEM certs: . . . 0 2019-03-25 18:31:17 [11915] INFO .. DER certs: . . . 0 2019-03-25 18:31:17 [11915] INFO .. RSA key files: . 0 2019-03-25 18:31:17 [11915] INFO .. PGP master keys: 0 2019-03-25 18:31:17 [11915] INFO .. PGP total keys: 0 2019-03-25 18:31:17 [11915] INFO .. SSH keys: . . . 0 2019-03-25 18:31:17 [11915] INFO .. APK keys: . . . 0 2019-03-25 18:31:17 [11915] INFO .. JSON keys: . . . 0 2019-03-25 18:31:17 [11915] INFO .. LDIFF certs: . . 0 2019-03-25 18:31:17 [11915] INFO .. JKS certs: . . . 0 2019-03-25 18:31:17 [11915] INFO .. PKCS7: . . . . . 0 2019-03-25 18:31:17 [11915] INFO Fingerprinted keys found: 4 2019-03-25 18:31:17 [11915] INFO WARNING: Potential vulnerability 2019-03-25 18:31:17 [11915] INFO ################################ It shows that ROCA vulnerability is present on this TPM module model. TPM firmware update will be required. Note that ROCA is connected only with RSA, it doesn't affect any other security functions, as long as they don't use RSALib. Updating TPM firmware Tools for updating Infineon TPM firmware can be easily found, unfortunately, most of them are either UEFI or Windows applications. A Linux port of them can be found here . First, check if TPMFactoryUpd was built successfully and TPM is detected properly: $ ./TPMFactoryUpd -info ********************************************************************** * Infineon Technologies AG TPMFactoryUpd Ver 01.01.2459.00 * ********************************************************************** TPM information: ---------------- Firmware valid : Yes TPM family : 2.0 TPM firmware version : 5.61.2785.0 TPM platformAuth : Empty Buffer Remaining updates : 64 Remember the current firmware version number, it will be needed later. Also note what is the value of TPM platformAuth - it must be Empty Buffer in order to perform an update. To do this, build and flash coreboot with TPM disabled in config menu, or use older version of BIOS - none of the v4.8.0.* versions have TPM support enabled. SeaBIOS doesn't need any modifications, it will not initialize TPM unless coreboot does. TPM firmwares are available with some of the UEFI and Windows images, like these . Only 9665FW update package_1.5/Firmware/TPM20_<old_version>_to_TPM20_5.63.3144.0.BIN file is required. Extract this file to the same directory as the TPMFactoryUpd and run: $ ./TPMFactoryUpd -update tpm20-emptyplatformauth -firmware TPM20_<old_version>_to_TPM20_5.63.3144.0.BIN ********************************************************************** * Infineon Technologies AG TPMFactoryUpd Ver 01.01.2459.00 * ********************************************************************** TPM update information: ----------------------- Firmware valid : Yes TPM family : 2.0 TPM firmware version : 5.61.2785.0 TPM platformAuth : Empty Buffer Remaining updates : 64 New firmware valid for TPM : Yes TPM family after update : 2.0 TPM firmware version after update : 5.63.3144.0 Preparation steps: TPM2.0 policy session created to authorize the update. DO NOT TURN OFF OR SHUT DOWN THE SYSTEM DURING THE UPDATE PROCESS! Updating the TPM firmware ... Completion: 100 % TPM Firmware Update completed successfully. This can take 3-5 minutes, depending on the firmware update size. After it completes, TPM is not useful until the next reboot: $ ./TPMFactoryUpd -info ********************************************************************** * Infineon Technologies AG TPMFactoryUpd Ver 01.01.2459.00 * ********************************************************************** TPM information: ---------------- Firmware valid : Yes TPM family : 2.0 TPM firmware version : 5.63.3144.0 TPM platformAuth : N/A - System restart required Remaining updates : N/A - System restart required Reboot platform immediately. Using TPM functions in this state isn't safe. After successful reboot and flashing original coreboot firmware the result should be: $ ./TPMFactoryUpd -info ********************************************************************** * Infineon Technologies AG TPMFactoryUpd Ver 01.01.2459.00 * ********************************************************************** TPM information: ---------------- Firmware valid : Yes TPM family : 2.0 TPM firmware version : 5.63.3144.0 TPM platformAuth : Not Empty Buffer Remaining updates : 63 Updating TPM firmware - automatic version detection Assuming that a whole Firmware directory was extracted to directory containing TPMFactoryUpd from the update package , one can use single command to do the update. Appropriate file is chosen automatically, depending on the old version. The command is: $ ./TPMFactoryUpd -update config-file -config Firmware/TPM20_latest.cfg ********************************************************************** * Infineon Technologies AG TPMFactoryUpd Ver 01.01.2459.00 * ********************************************************************** TPM update information: ----------------------- Firmware valid : Yes TPM family : 2.0 TPM firmware version : 5.51.2098.0 TPM platformAuth : Empty Buffer Remaining updates : 64 New firmware valid for TPM : Yes TPM family after update : 2.0 TPM firmware version after update : 5.63.3144.0 Selected firmware image: TPM20_5.51.2098.0_to_TPM20_5.63.3144.0.BIN Preparation steps: TPM2.0 policy session created to authorize the update. DO NOT TURN OFF OR SHUT DOWN THE SYSTEM DURING THE UPDATE PROCESS! Updating the TPM firmware ... Completion: 100 % TPM Firmware Update completed successfully. Remember to use BIOS with TPM disabled, and re-flash newer BIOS firmware afterwards. Results from new version of TPM firmware Repeating all steps from generating TPM context to using roca-detect shows that the vulnerability is no longer present : 2019-03-26 18:40:42 [4325] INFO ### SUMMARY #################### 2019-03-26 18:40:42 [4325] INFO Records tested: 8 2019-03-26 18:40:42 [4325] INFO .. PEM certs: . . . 0 2019-03-26 18:40:42 [4325] INFO .. DER certs: . . . 0 2019-03-26 18:40:42 [4325] INFO .. RSA key files: . 0 2019-03-26 18:40:42 [4325] INFO .. PGP master keys: 0 2019-03-26 18:40:42 [4325] INFO .. PGP total keys: 0 2019-03-26 18:40:42 [4325] INFO .. SSH keys: . . . 0 2019-03-26 18:40:42 [4325] INFO .. APK keys: . . . 0 2019-03-26 18:40:42 [4325] INFO .. JSON keys: . . . 0 2019-03-26 18:40:42 [4325] INFO .. LDIFF certs: . . 0 2019-03-26 18:40:42 [4325] INFO .. JKS certs: . . . 0 2019-03-26 18:40:42 [4325] INFO .. PKCS7: . . . . . 0 2019-03-26 18:40:42 [4325] INFO No fingerprinted keys found (OK) 2019-03-26 18:40:42 [4325] INFO ################################","title":"ROCA"},{"location":"research/ROCA/#roca-tpm-vulnerability-verification-and-status","text":"ROCA vulnerability was discovered (October 2017) in a software library, RSALib, provided by Infineon Technologies. That library is also used in TPM modules. When this vulnerability is present, a pair of prime numbers used for generating RSA keys is chosen from a small subset of all available prime numbers. This results in a great loss of entropy. Details and exact numbers can be found here .","title":"ROCA TPM vulnerability verification and status"},{"location":"research/ROCA/#generating-rsa-key-pairs-with-tpm","text":"RSA keys can be generated with tpm2-tools . SLB 9665 used in TPM module doesn't support 512-bit RSA, so either 1024 or 2048-bit keys must be used. Context is used for key generation, so it must be generated first: tpm2_createprimary -g 'sha1' -G 'rsa1024:null:aes128cfb' -o tpm.ctx tpm2_create -C tpm.ctx -Grsa1024 -u key.pub -r key.priv Only the public key is actually required by vulnerability check. It is a good idea to generate more than one pair, probably using different key sizes - chances for false positives are extremely low, but not zero. TPM has limited internal RAM and runs out of memory after 3 operations with error: ERROR: Tss2_Sys_CreatePrimary(0x902) - tpm:warn(2.0): out of memory for object contexts In this case either rebooting or flushing open handles manually helps. Only handles-transient need to be flushed: $ tpm2_getcap -c handles-transient - 0x80000000 - 0x80000001 - 0x80000002 $ tpm2_flushcontext -c 0x80000000 $ tpm2_flushcontext -c 0x80000001 $ tpm2_flushcontext -c 0x80000002","title":"Generating RSA key pairs with TPM"},{"location":"research/ROCA/#extracting-keys-hashes","text":"File key.pub is a binary file with a TPM-specific header. It is not supported by the tool for checking for ROCA vulnerability, so the key needs to be extracted and saved in one of the supported formats, e.g. hex coded number. This can be done with the following script: #!/bin/bash rm -f keys.txt for file in *.pub do dd if=${file} bs=1 skip=24 | hexdump -v -e '/1 \"%02x\"' >> keys.txt echo \"\" >> keys.txt done","title":"Extracting keys hashes"},{"location":"research/ROCA/#testing-for-roca-vulnerability","text":"A tool for checking for ROCA TPM vulnerability can be found here . The easiest way is to install it with pip : pip install roca-detect All parsed keys can be checked using just one command: roca-detect keys.txt More use cases can be found on the main page of this tool, including tests for saved SSH hosts keys. This operation should take no more than a couple of seconds, as it only checks if the key was generated from insecure prime numbers, without finding the exact numbers used. It does not generate private keys.","title":"Testing for ROCA vulnerability"},{"location":"research/ROCA/#results","text":"This is output from test run on 2 different modules, with both 1024 and 2048-bit keys generated on each of them: 2019-03-25 18:31:17 [11915] WARNING Fingerprint found in modulus keys.txt idx 0 {\"type\": \"mod-hex\", \"fname\": \"keys.txt\", \"idx\": 0, \"aux\": null, \"n\": \"0x94b79a35a5d47040df1503670080a7714ae1ee751aeb32071b3db388b3bf80b11f661c4b8819ebd1c716239c9ec5a202b08a2aa3c17ad6cd17075ba49fcd005d8b8fa50c29433db35c1421727472deddd77bced7e6438db4d447008b11cdb018139bfef2e06c4b4a3e672543a7e9333040fd881815e14b1f1338e90180fd0865\", \"marked\": true, \"time_years\": 0.16104529886799998, \"price_aws_c4\": 70.5861544938444} (...) 2019-03-25 18:31:17 [11915] INFO ### SUMMARY #################### 2019-03-25 18:31:17 [11915] INFO Records tested: 8 2019-03-25 18:31:17 [11915] INFO .. PEM certs: . . . 0 2019-03-25 18:31:17 [11915] INFO .. DER certs: . . . 0 2019-03-25 18:31:17 [11915] INFO .. RSA key files: . 0 2019-03-25 18:31:17 [11915] INFO .. PGP master keys: 0 2019-03-25 18:31:17 [11915] INFO .. PGP total keys: 0 2019-03-25 18:31:17 [11915] INFO .. SSH keys: . . . 0 2019-03-25 18:31:17 [11915] INFO .. APK keys: . . . 0 2019-03-25 18:31:17 [11915] INFO .. JSON keys: . . . 0 2019-03-25 18:31:17 [11915] INFO .. LDIFF certs: . . 0 2019-03-25 18:31:17 [11915] INFO .. JKS certs: . . . 0 2019-03-25 18:31:17 [11915] INFO .. PKCS7: . . . . . 0 2019-03-25 18:31:17 [11915] INFO Fingerprinted keys found: 4 2019-03-25 18:31:17 [11915] INFO WARNING: Potential vulnerability 2019-03-25 18:31:17 [11915] INFO ################################ It shows that ROCA vulnerability is present on this TPM module model. TPM firmware update will be required. Note that ROCA is connected only with RSA, it doesn't affect any other security functions, as long as they don't use RSALib.","title":"Results"},{"location":"research/ROCA/#updating-tpm-firmware","text":"Tools for updating Infineon TPM firmware can be easily found, unfortunately, most of them are either UEFI or Windows applications. A Linux port of them can be found here . First, check if TPMFactoryUpd was built successfully and TPM is detected properly: $ ./TPMFactoryUpd -info ********************************************************************** * Infineon Technologies AG TPMFactoryUpd Ver 01.01.2459.00 * ********************************************************************** TPM information: ---------------- Firmware valid : Yes TPM family : 2.0 TPM firmware version : 5.61.2785.0 TPM platformAuth : Empty Buffer Remaining updates : 64 Remember the current firmware version number, it will be needed later. Also note what is the value of TPM platformAuth - it must be Empty Buffer in order to perform an update. To do this, build and flash coreboot with TPM disabled in config menu, or use older version of BIOS - none of the v4.8.0.* versions have TPM support enabled. SeaBIOS doesn't need any modifications, it will not initialize TPM unless coreboot does. TPM firmwares are available with some of the UEFI and Windows images, like these . Only 9665FW update package_1.5/Firmware/TPM20_<old_version>_to_TPM20_5.63.3144.0.BIN file is required. Extract this file to the same directory as the TPMFactoryUpd and run: $ ./TPMFactoryUpd -update tpm20-emptyplatformauth -firmware TPM20_<old_version>_to_TPM20_5.63.3144.0.BIN ********************************************************************** * Infineon Technologies AG TPMFactoryUpd Ver 01.01.2459.00 * ********************************************************************** TPM update information: ----------------------- Firmware valid : Yes TPM family : 2.0 TPM firmware version : 5.61.2785.0 TPM platformAuth : Empty Buffer Remaining updates : 64 New firmware valid for TPM : Yes TPM family after update : 2.0 TPM firmware version after update : 5.63.3144.0 Preparation steps: TPM2.0 policy session created to authorize the update. DO NOT TURN OFF OR SHUT DOWN THE SYSTEM DURING THE UPDATE PROCESS! Updating the TPM firmware ... Completion: 100 % TPM Firmware Update completed successfully. This can take 3-5 minutes, depending on the firmware update size. After it completes, TPM is not useful until the next reboot: $ ./TPMFactoryUpd -info ********************************************************************** * Infineon Technologies AG TPMFactoryUpd Ver 01.01.2459.00 * ********************************************************************** TPM information: ---------------- Firmware valid : Yes TPM family : 2.0 TPM firmware version : 5.63.3144.0 TPM platformAuth : N/A - System restart required Remaining updates : N/A - System restart required Reboot platform immediately. Using TPM functions in this state isn't safe. After successful reboot and flashing original coreboot firmware the result should be: $ ./TPMFactoryUpd -info ********************************************************************** * Infineon Technologies AG TPMFactoryUpd Ver 01.01.2459.00 * ********************************************************************** TPM information: ---------------- Firmware valid : Yes TPM family : 2.0 TPM firmware version : 5.63.3144.0 TPM platformAuth : Not Empty Buffer Remaining updates : 63","title":"Updating TPM firmware"},{"location":"research/ROCA/#updating-tpm-firmware-automatic-version-detection","text":"Assuming that a whole Firmware directory was extracted to directory containing TPMFactoryUpd from the update package , one can use single command to do the update. Appropriate file is chosen automatically, depending on the old version. The command is: $ ./TPMFactoryUpd -update config-file -config Firmware/TPM20_latest.cfg ********************************************************************** * Infineon Technologies AG TPMFactoryUpd Ver 01.01.2459.00 * ********************************************************************** TPM update information: ----------------------- Firmware valid : Yes TPM family : 2.0 TPM firmware version : 5.51.2098.0 TPM platformAuth : Empty Buffer Remaining updates : 64 New firmware valid for TPM : Yes TPM family after update : 2.0 TPM firmware version after update : 5.63.3144.0 Selected firmware image: TPM20_5.51.2098.0_to_TPM20_5.63.3144.0.BIN Preparation steps: TPM2.0 policy session created to authorize the update. DO NOT TURN OFF OR SHUT DOWN THE SYSTEM DURING THE UPDATE PROCESS! Updating the TPM firmware ... Completion: 100 % TPM Firmware Update completed successfully. Remember to use BIOS with TPM disabled, and re-flash newer BIOS firmware afterwards.","title":"Updating TPM firmware - automatic version detection"},{"location":"research/ROCA/#results-from-new-version-of-tpm-firmware","text":"Repeating all steps from generating TPM context to using roca-detect shows that the vulnerability is no longer present : 2019-03-26 18:40:42 [4325] INFO ### SUMMARY #################### 2019-03-26 18:40:42 [4325] INFO Records tested: 8 2019-03-26 18:40:42 [4325] INFO .. PEM certs: . . . 0 2019-03-26 18:40:42 [4325] INFO .. DER certs: . . . 0 2019-03-26 18:40:42 [4325] INFO .. RSA key files: . 0 2019-03-26 18:40:42 [4325] INFO .. PGP master keys: 0 2019-03-26 18:40:42 [4325] INFO .. PGP total keys: 0 2019-03-26 18:40:42 [4325] INFO .. SSH keys: . . . 0 2019-03-26 18:40:42 [4325] INFO .. APK keys: . . . 0 2019-03-26 18:40:42 [4325] INFO .. JSON keys: . . . 0 2019-03-26 18:40:42 [4325] INFO .. LDIFF certs: . . 0 2019-03-26 18:40:42 [4325] INFO .. JKS certs: . . . 0 2019-03-26 18:40:42 [4325] INFO .. PKCS7: . . . . . 0 2019-03-26 18:40:42 [4325] INFO No fingerprinted keys found (OK) 2019-03-26 18:40:42 [4325] INFO ################################","title":"Results from new version of TPM firmware"},{"location":"research/RPI_SPI_flasher/","text":"RPI flasher Contents RPI flasher Contents Installing flashrom on RPi First approach Connection Hexdumps of binaries: Problems Conclusion Second approach Connection Flashing Conclusion Installing flashrom on RPi Assuming Raspberry Jassie is running on RPi Getting the latest flashrom source code: sudo apt-get update && sudo apt-get upgrade sudo apt-get install build-essential pciutils usbutils libpci-dev \\ libusb-dev libftdi1 libftdi-dev zlib1g-dev subversion libusb-1.0-0-dev svn co https://code.coreboot.org/svn/flashrom/trunk ~/flashrom cd ~/flashrom make sudo make install Flashing: If SPI device is not visible, enable SPI in: sudo raspi-config spi_bcmxxxx modules may differ on different RPi's sudo modprobe spi_bcm2835 sudo modprobe spidev Read from flash: sudo flashrom -V -p linux_spi:dev=/dev/spidev0.0 -r coreboot.rom First approach Connection RPI3 pin GPIO APU2 pin J6 25 GND 2 24 /CS 3 23 SCK 4 21 DO 5 19 DI 6 17 VCC 1 Hexdumps of binaries: original binary binary read by RPI Problems Programming takes a lot of time (~30min.) ERASE problems time ./flashrom -p linux_spi:dev = /dev/spidev0.0 -w ../apu2_v4.0.10.rom flashrom v0.9.9-r1954 on Linux 4 .9.28+ ( armv6l ) flashrom is free software, get the source code at https://flashrom.org Calibrating delay loop... OK. Found Winbond flash chip \"W25Q64.V\" ( 8192 kB, SPI ) on linux_spi. Reading old flash chip contents... done . Erasing and writing flash chip... FAILED at 0x0002b000! Expected = 0xff, Found = 0x00, failed byte count from 0x0002b000-0x0002bfff: 0x800 ERASE FAILED! Reading current flash chip contents... done . Looking for another erase function . FAILED at 0x0002c73c! Expected = 0xff, Found = 0xf0, failed byte count from 0x00028000-0x0002ffff: 0x4c4 ERASE FAILED! Reading current flash chip contents... done . Looking for another erase function . FAILED at 0x00020000! Expected = 0xff, Found = 0x00, failed byte count from 0x00020000-0x0002ffff: 0x10000 ERASE FAILED! Reading current flash chip contents... done . Looking for another erase function . FAILED at 0x00000000! Expected = 0xff, Found = 0x00, failed byte count from 0x00000000-0x007fffff: 0x800000 ERASE FAILED! Reading current flash chip contents... done . Looking for another erase function . FAILED at 0x00000000! Expected = 0xff, Found = 0x00, failed byte count from 0x00000000-0x007fffff: 0x800000 ERASE FAILED! Looking for another erase function . No usable erase functions left. FAILED! Uh oh. Erase/write failed. Checking if anything has changed. Reading current flash chip contents... done . Apparently at least some data has changed. Your flash chip is in an unknown state. Please report this on IRC at chat.freenode.net ( channel #flashrom) or mail flashrom@flashrom.org, thanks! real 30m5.560s user 0m5.320s sys 0m37.830s Conclusion problems with WP and HOLD pins. Pull-up is not strong enough. Second approach Connection VCC is not connected! RPI3 pin GPIO APU2 pin J6 25 GND 2 24 /CS 3 23 SCK 4 21 DO 5 19 DI 6 Power supply needs to be connected to APU2, but device needs to be powered off. It can be done by shorting pins 2-3 on J2 connector Flashing pi@raspberrypi:~/flashrom $ time ./flashrom -p linux_spi:dev=/dev/spidev0.0 -w ../apu2_v4.0.10.rom flashrom v0.9.9-r1954 on Linux 4.9.28+ (armv6l) flashrom is free software, get the source code at https://flashrom.org Calibrating delay loop... OK. Found Winbond flash chip \"W25Q64.V\" (8192 kB, SPI) on linux_spi. Reading old flash chip contents... done. Erasing and writing flash chip... Erase/write done. Verifying flash... VERIFIED. real 8m27.989s user 0m18.760s sys 0m11.140s pi@raspberrypi:~/flashrom $ time ./flashrom -p linux_spi:dev=/dev/spidev0.0 -r coreboot2.rom flashrom v0.9.9-r1954 on Linux 4.9.28+ (armv6l) flashrom is free software, get the source code at https://flashrom.org Calibrating delay loop... OK. Found Winbond flash chip \"W25Q64.V\" (8192 kB, SPI) on linux_spi. Reading flash... done. real 3m46.537s user 0m0.830s sys 0m4.940s pi@raspberrypi:~/flashrom $ md5sum coreboot2.rom ../apu2_v4.0.10.rom cf0b80e2a51a28a57bf91540bdbf957c coreboot2.rom cf0b80e2a51a28a57bf91540bdbf957c ../apu2_v4.0.10.rom After flash, spidev and spi_bcm2835 need to be unloaded and then APU2 can be powered on. Conclusion Flashing is possible, but could take a while. Need to follow the procedure to flash the device and boot it after the process.","title":"RPI flasher"},{"location":"research/RPI_SPI_flasher/#rpi-flasher","text":"","title":"RPI flasher"},{"location":"research/RPI_SPI_flasher/#contents","text":"RPI flasher Contents Installing flashrom on RPi First approach Connection Hexdumps of binaries: Problems Conclusion Second approach Connection Flashing Conclusion","title":"Contents"},{"location":"research/RPI_SPI_flasher/#installing-flashrom-on-rpi","text":"Assuming Raspberry Jassie is running on RPi Getting the latest flashrom source code: sudo apt-get update && sudo apt-get upgrade sudo apt-get install build-essential pciutils usbutils libpci-dev \\ libusb-dev libftdi1 libftdi-dev zlib1g-dev subversion libusb-1.0-0-dev svn co https://code.coreboot.org/svn/flashrom/trunk ~/flashrom cd ~/flashrom make sudo make install Flashing: If SPI device is not visible, enable SPI in: sudo raspi-config spi_bcmxxxx modules may differ on different RPi's sudo modprobe spi_bcm2835 sudo modprobe spidev Read from flash: sudo flashrom -V -p linux_spi:dev=/dev/spidev0.0 -r coreboot.rom","title":"Installing flashrom on RPi"},{"location":"research/RPI_SPI_flasher/#first-approach","text":"","title":"First approach"},{"location":"research/RPI_SPI_flasher/#connection","text":"RPI3 pin GPIO APU2 pin J6 25 GND 2 24 /CS 3 23 SCK 4 21 DO 5 19 DI 6 17 VCC 1","title":"Connection"},{"location":"research/RPI_SPI_flasher/#hexdumps-of-binaries","text":"original binary binary read by RPI","title":"Hexdumps of binaries:"},{"location":"research/RPI_SPI_flasher/#problems","text":"Programming takes a lot of time (~30min.) ERASE problems time ./flashrom -p linux_spi:dev = /dev/spidev0.0 -w ../apu2_v4.0.10.rom flashrom v0.9.9-r1954 on Linux 4 .9.28+ ( armv6l ) flashrom is free software, get the source code at https://flashrom.org Calibrating delay loop... OK. Found Winbond flash chip \"W25Q64.V\" ( 8192 kB, SPI ) on linux_spi. Reading old flash chip contents... done . Erasing and writing flash chip... FAILED at 0x0002b000! Expected = 0xff, Found = 0x00, failed byte count from 0x0002b000-0x0002bfff: 0x800 ERASE FAILED! Reading current flash chip contents... done . Looking for another erase function . FAILED at 0x0002c73c! Expected = 0xff, Found = 0xf0, failed byte count from 0x00028000-0x0002ffff: 0x4c4 ERASE FAILED! Reading current flash chip contents... done . Looking for another erase function . FAILED at 0x00020000! Expected = 0xff, Found = 0x00, failed byte count from 0x00020000-0x0002ffff: 0x10000 ERASE FAILED! Reading current flash chip contents... done . Looking for another erase function . FAILED at 0x00000000! Expected = 0xff, Found = 0x00, failed byte count from 0x00000000-0x007fffff: 0x800000 ERASE FAILED! Reading current flash chip contents... done . Looking for another erase function . FAILED at 0x00000000! Expected = 0xff, Found = 0x00, failed byte count from 0x00000000-0x007fffff: 0x800000 ERASE FAILED! Looking for another erase function . No usable erase functions left. FAILED! Uh oh. Erase/write failed. Checking if anything has changed. Reading current flash chip contents... done . Apparently at least some data has changed. Your flash chip is in an unknown state. Please report this on IRC at chat.freenode.net ( channel #flashrom) or mail flashrom@flashrom.org, thanks! real 30m5.560s user 0m5.320s sys 0m37.830s","title":"Problems"},{"location":"research/RPI_SPI_flasher/#conclusion","text":"problems with WP and HOLD pins. Pull-up is not strong enough.","title":"Conclusion"},{"location":"research/RPI_SPI_flasher/#second-approach","text":"","title":"Second approach"},{"location":"research/RPI_SPI_flasher/#connection_1","text":"VCC is not connected! RPI3 pin GPIO APU2 pin J6 25 GND 2 24 /CS 3 23 SCK 4 21 DO 5 19 DI 6 Power supply needs to be connected to APU2, but device needs to be powered off. It can be done by shorting pins 2-3 on J2 connector","title":"Connection"},{"location":"research/RPI_SPI_flasher/#flashing","text":"pi@raspberrypi:~/flashrom $ time ./flashrom -p linux_spi:dev=/dev/spidev0.0 -w ../apu2_v4.0.10.rom flashrom v0.9.9-r1954 on Linux 4.9.28+ (armv6l) flashrom is free software, get the source code at https://flashrom.org Calibrating delay loop... OK. Found Winbond flash chip \"W25Q64.V\" (8192 kB, SPI) on linux_spi. Reading old flash chip contents... done. Erasing and writing flash chip... Erase/write done. Verifying flash... VERIFIED. real 8m27.989s user 0m18.760s sys 0m11.140s pi@raspberrypi:~/flashrom $ time ./flashrom -p linux_spi:dev=/dev/spidev0.0 -r coreboot2.rom flashrom v0.9.9-r1954 on Linux 4.9.28+ (armv6l) flashrom is free software, get the source code at https://flashrom.org Calibrating delay loop... OK. Found Winbond flash chip \"W25Q64.V\" (8192 kB, SPI) on linux_spi. Reading flash... done. real 3m46.537s user 0m0.830s sys 0m4.940s pi@raspberrypi:~/flashrom $ md5sum coreboot2.rom ../apu2_v4.0.10.rom cf0b80e2a51a28a57bf91540bdbf957c coreboot2.rom cf0b80e2a51a28a57bf91540bdbf957c ../apu2_v4.0.10.rom After flash, spidev and spi_bcm2835 need to be unloaded and then APU2 can be powered on.","title":"Flashing"},{"location":"research/RPI_SPI_flasher/#conclusion_1","text":"Flashing is possible, but could take a while. Need to follow the procedure to flash the device and boot it after the process.","title":"Conclusion"},{"location":"research/USB_compliance_test/","text":"USB compliance tests This document contains research about USB tests compliance which allow to analyze USB device detection process. Mostly it references to USB 3.0. Related documents Universal Serial Bus 3.0 Specification USB 3.0 Electrical Compliance Test Specification USB 3.1 Link Layer Test Specification USB 3.0 Electrical Test Fixture Topologies Universal Serial Bus 2.0 Specification USB 2.0 Electrical Compliance Tests Specification eXtensible Host Controller Interface for Universal Serial Bus List of abbreviations HS - High Speed USB (USB 2.0) SS - Super Speed USB (USB 3.0) LFPS - Low Frequency Periodic Signaling LTSSM - Link Training and Status State Machine USB Standards comparison Power Speed PHY Layer USB 1.1 Low Speed 5V @500mA 1,5 Mbps VCC, GND, D+, D- USB 1.1 Full Speed 5V @500mA 12 Mbps VCC, GND, D+, D- USB 2.0 High Speed 5V @500mA 480 Mbps VCC, GND, D+, D- USB 3.0 SuperSpeed 5V @900mA 5 Gbps VCC, GND, D+, D-, Rx+, Rx-, Tx+, Tx- USB 3.1 SuperSpeed+ 5V @900mA 10 Gbps VCC, GND, D+, D-, Rx+, Rx-, Tx+, Tx- Device detection process debugging USB 3.0 device enumeration process USB enumeration process lets a host determine if USB device was plugged into USB port and what kind of device is that. Enumeration process could be divided into multiple stages proceeded after previous one if there were no errors: RxDetect mode ( USB 3.0 Specification Section 6.11 ) Polling LFPS ( USB 3.0 Specification Section 6.9.2 ) TSEQ Ordered Sets ( USB 3.0 Specification Section 6.4.1.1.3 and Table 6-3 ) TS1 Ordered Sets ( USB 3.0 Specification Section 6.4.1.1.3 and Table 6-4 ) TS2 Ordered Sets ( USB 3.0 Specification Section 6.4.1.1.3 and Table 6-5 ) Logical idle (sending idle data) Exit Initialization to U0 state NOTE: Link Initialization and Training (stages 3,4,5) could be different depending on USB 3.0 (Gen 1) or USB 3.1 (Gen 2) devices. More details are available in USB 3.0 Specification Section 6.4. After last stage device should be recognized by host and communication between them is opened. To test device detection in system it should be checked if all above stages are performed correctly. Hence electrical compliance tests and link layer tests should be performed to compare data, timing and electrical values with Specification requirements (tables with reference values are available in Specification under mentioned above sections which corresponds to specific stage). Link Training and Status State Machine (LTSSM) in USB 3.0 Link Training and Status State Machine (LTSSM) is a state machine consists of 12 link states. It is described in USB 3.0 Specification Section 7.5 . LTSSM diagram is presented in figure 7.14. During USB device detection process LTSSM changes stages according to diagram flow. To test if device detection process is done correctly state machine analyze should be done. Compliance tests USB 3.0 testing Electrical compliance tests Electrical compliance tests verify that electrical signals sent between host and device meet USB 3.0 requirements which are described in USB 3.0 Specification Document. To correctly capture these data high-class oscilloscope is required (with minimum 13 GHz bandwidth) with high-class cables and probes. Also Test Fixtures are needed to separate signals from USB data lines and dedicated software installed on oscilloscope. Proposed tool kit: - Teledyne LeCroy SDA 813Zi-A Oscilloscope - QualiPHY Software - SigTest software v.3.2.1 - TF-USB3 Test Fixture - SMA cables - PeRT3 Phoenix System (for Receiver tests) All tools are listed in QPHY-USB3.2-TX-RX Manual in section Introduction/Required Equipment. That document contains also guide how to perform electrical tests with QualiPHY Software. From QPHY-USB3.2-TX-RX Manual those tests should be carried out: - in section USB 3.1/3.2 Transmitter Testing : - TD 1.1 Low Frequency Periodic Signaling Test - TD 1.6 Spread Spectrum Test - in section USB 3.1/3.2 Transmitter Testing : - TD 1.2 Low Frequency Periodic Signaling Test - TD 1.8 and 1.9 Receiver Jitter Tolerance Tests Electrical compliance tests tool kit is rather expensive and those tests don't guaranty that stick detection problem will be resolved. My advice is to first carry out link layer tests because they can give more information and benefits about problem. Proposed tests are compatible with USB-IF official Electrical Compliance Tests Program. All tests are listed in Electrical Compliance Test Specification SuperSpeed Universal Serial Bus . Link layer compliance tests Link layer compliance tests can be performed with USB Analyzers. USB Analyzers capture USB traffic and with dedicated software it is possible to find and resolve problems caused by errors in link layer during enumeration process, i.e. data packets missing, states are not proceed in exact way, errors between process stages etc. Examples of USB 3.0 Analyzers with dedicated software: - Beagle USB 5000 v2 SuperSpeed Protocol Analyzer | Data Center Software - Ellisys Explorer 280 | Analyzer Software - Teledyne LeCroy Advisor T3 | USB Protocol Suite - Teledyne LeCroy Voyager M3 | USB Protocol Suite NOTE: From mentioned above analyzers only Beagle USB 5000's software is supported on Linux. Another ones are supported only in Windows. Should be considered to carry out tests: - analyze LFPS at communication initialization - analyze Training Sequences TSEQ, TS1, TS2 Ordered Sets - analyze State Machine (check if states proceed according to Specification) - checking if USB Port/Device ends in U0 mode - checking packets between host and recognized device USB-IF has its own Link Layer Compliance Tests program. However, to carry out those tests it is required to use their hardware and software tools. In my opinion, good enough alternative is to use one of mentioned above devices, because they have features which are sufficient to resolve stick detection problems. If mentioned above analyses aren't sufficient, tests from sections 7.5.1 to 7.5.5 from USB 3.1 Link Layer Test Specification can be performed. Additional conclusions USB 3.0 analyze Mentioned above equipment is necessary to carry out electrical and link layer tests. Due to its high price it's rather impossible to perform such tests now. So far I couldn't find any alternate solutions which will meet the requirements and will be low-price devices. It results from the fact, that to test USB 3.0 protocol, high frequency devices are needed and such devices are rather expensive. Most of available instruments are suitable only for USB 2.0 testing. USB 2.0 analyze USB 2.0 Analyzer's principles of operation is exactly the same as USB 3.0 Analyzer and it is described above in that document. Proposed USB 2.0 Analyzers with dedicated software: - OpenVizsla | Wireshark - Beagle USB 480 | Data Center Software Both analyzers are perfectly good to capture and investigate USB data. However, OpenVizsla is an open-source solution which can easily handle with USB analysis within low price. In combination with Wireshark (or any other program which can descramble USB data) it doesn't stand out from any other available solutions. On the other hand, Beagle's software has feature which analyze state machine and show current state in LTSSM. Those devices can't be extended to analyze USB 3.0/3.1 transmission. RxDetect state Detailed description of RxDetect machine state (with substates) is available in Section 7.5.3 in USB 3.0 Specification. Initially USB ports are in SS.Disabled state (SuperSpeed connection is cut off). RxDetect state (in fact RxDetect.Reset ) is reached after Power On Reset or Directed Warm Reset. Let's look how machine substate sequence looks like depending on scenarios: RxDetect.Reset If it was reached by power on reset it transit directly to RxDetect.Active . If it was reached by warm reset it transmits LFPS sequence (warm reset sequence) and goes to RxDetect.Active . RxDetect.Active In this state receiver termination (detecting termination at line) is performed. If it is detected (USB 3.0 device is at the end) then Polling.LFPS state is reached. If it is not detected then RxDetect.Quiet state is reached and after 12ms it gets back to RxDetect.Active state and try procedure again. It can move to RxDetect.Quiet state only 8 times in a row. Next time if no termination is detected it goes to SS.Disabled . RxDetect.Quiet Wait 12 ms timeout and go to RxDetect.Active state. Maybe the problem with USB 3.0 stick detection is caused by not detecting Rx termination for 8 times in a row. Host will not get back to detecting USB 3.x device no more and will start procedure of detecting USB 2.0 device.","title":"USB compliance tests"},{"location":"research/USB_compliance_test/#usb-compliance-tests","text":"This document contains research about USB tests compliance which allow to analyze USB device detection process. Mostly it references to USB 3.0.","title":"USB compliance tests"},{"location":"research/USB_compliance_test/#related-documents","text":"Universal Serial Bus 3.0 Specification USB 3.0 Electrical Compliance Test Specification USB 3.1 Link Layer Test Specification USB 3.0 Electrical Test Fixture Topologies Universal Serial Bus 2.0 Specification USB 2.0 Electrical Compliance Tests Specification eXtensible Host Controller Interface for Universal Serial Bus","title":"Related documents"},{"location":"research/USB_compliance_test/#list-of-abbreviations","text":"HS - High Speed USB (USB 2.0) SS - Super Speed USB (USB 3.0) LFPS - Low Frequency Periodic Signaling LTSSM - Link Training and Status State Machine","title":"List of abbreviations"},{"location":"research/USB_compliance_test/#usb-standards-comparison","text":"Power Speed PHY Layer USB 1.1 Low Speed 5V @500mA 1,5 Mbps VCC, GND, D+, D- USB 1.1 Full Speed 5V @500mA 12 Mbps VCC, GND, D+, D- USB 2.0 High Speed 5V @500mA 480 Mbps VCC, GND, D+, D- USB 3.0 SuperSpeed 5V @900mA 5 Gbps VCC, GND, D+, D-, Rx+, Rx-, Tx+, Tx- USB 3.1 SuperSpeed+ 5V @900mA 10 Gbps VCC, GND, D+, D-, Rx+, Rx-, Tx+, Tx-","title":"USB Standards comparison"},{"location":"research/USB_compliance_test/#device-detection-process-debugging","text":"","title":"Device detection process debugging"},{"location":"research/USB_compliance_test/#usb-30-device-enumeration-process","text":"USB enumeration process lets a host determine if USB device was plugged into USB port and what kind of device is that. Enumeration process could be divided into multiple stages proceeded after previous one if there were no errors: RxDetect mode ( USB 3.0 Specification Section 6.11 ) Polling LFPS ( USB 3.0 Specification Section 6.9.2 ) TSEQ Ordered Sets ( USB 3.0 Specification Section 6.4.1.1.3 and Table 6-3 ) TS1 Ordered Sets ( USB 3.0 Specification Section 6.4.1.1.3 and Table 6-4 ) TS2 Ordered Sets ( USB 3.0 Specification Section 6.4.1.1.3 and Table 6-5 ) Logical idle (sending idle data) Exit Initialization to U0 state NOTE: Link Initialization and Training (stages 3,4,5) could be different depending on USB 3.0 (Gen 1) or USB 3.1 (Gen 2) devices. More details are available in USB 3.0 Specification Section 6.4. After last stage device should be recognized by host and communication between them is opened. To test device detection in system it should be checked if all above stages are performed correctly. Hence electrical compliance tests and link layer tests should be performed to compare data, timing and electrical values with Specification requirements (tables with reference values are available in Specification under mentioned above sections which corresponds to specific stage).","title":"USB 3.0 device enumeration process"},{"location":"research/USB_compliance_test/#link-training-and-status-state-machine-ltssm-in-usb-30","text":"Link Training and Status State Machine (LTSSM) is a state machine consists of 12 link states. It is described in USB 3.0 Specification Section 7.5 . LTSSM diagram is presented in figure 7.14. During USB device detection process LTSSM changes stages according to diagram flow. To test if device detection process is done correctly state machine analyze should be done.","title":"Link Training and Status State Machine (LTSSM) in USB 3.0"},{"location":"research/USB_compliance_test/#compliance-tests","text":"","title":"Compliance tests"},{"location":"research/USB_compliance_test/#usb-30-testing","text":"","title":"USB 3.0 testing"},{"location":"research/USB_compliance_test/#electrical-compliance-tests","text":"Electrical compliance tests verify that electrical signals sent between host and device meet USB 3.0 requirements which are described in USB 3.0 Specification Document. To correctly capture these data high-class oscilloscope is required (with minimum 13 GHz bandwidth) with high-class cables and probes. Also Test Fixtures are needed to separate signals from USB data lines and dedicated software installed on oscilloscope. Proposed tool kit: - Teledyne LeCroy SDA 813Zi-A Oscilloscope - QualiPHY Software - SigTest software v.3.2.1 - TF-USB3 Test Fixture - SMA cables - PeRT3 Phoenix System (for Receiver tests) All tools are listed in QPHY-USB3.2-TX-RX Manual in section Introduction/Required Equipment. That document contains also guide how to perform electrical tests with QualiPHY Software. From QPHY-USB3.2-TX-RX Manual those tests should be carried out: - in section USB 3.1/3.2 Transmitter Testing : - TD 1.1 Low Frequency Periodic Signaling Test - TD 1.6 Spread Spectrum Test - in section USB 3.1/3.2 Transmitter Testing : - TD 1.2 Low Frequency Periodic Signaling Test - TD 1.8 and 1.9 Receiver Jitter Tolerance Tests Electrical compliance tests tool kit is rather expensive and those tests don't guaranty that stick detection problem will be resolved. My advice is to first carry out link layer tests because they can give more information and benefits about problem. Proposed tests are compatible with USB-IF official Electrical Compliance Tests Program. All tests are listed in Electrical Compliance Test Specification SuperSpeed Universal Serial Bus .","title":"Electrical compliance tests"},{"location":"research/USB_compliance_test/#link-layer-compliance-tests","text":"Link layer compliance tests can be performed with USB Analyzers. USB Analyzers capture USB traffic and with dedicated software it is possible to find and resolve problems caused by errors in link layer during enumeration process, i.e. data packets missing, states are not proceed in exact way, errors between process stages etc. Examples of USB 3.0 Analyzers with dedicated software: - Beagle USB 5000 v2 SuperSpeed Protocol Analyzer | Data Center Software - Ellisys Explorer 280 | Analyzer Software - Teledyne LeCroy Advisor T3 | USB Protocol Suite - Teledyne LeCroy Voyager M3 | USB Protocol Suite NOTE: From mentioned above analyzers only Beagle USB 5000's software is supported on Linux. Another ones are supported only in Windows. Should be considered to carry out tests: - analyze LFPS at communication initialization - analyze Training Sequences TSEQ, TS1, TS2 Ordered Sets - analyze State Machine (check if states proceed according to Specification) - checking if USB Port/Device ends in U0 mode - checking packets between host and recognized device USB-IF has its own Link Layer Compliance Tests program. However, to carry out those tests it is required to use their hardware and software tools. In my opinion, good enough alternative is to use one of mentioned above devices, because they have features which are sufficient to resolve stick detection problems. If mentioned above analyses aren't sufficient, tests from sections 7.5.1 to 7.5.5 from USB 3.1 Link Layer Test Specification can be performed.","title":"Link layer compliance tests"},{"location":"research/USB_compliance_test/#additional-conclusions","text":"","title":"Additional conclusions"},{"location":"research/USB_compliance_test/#usb-30-analyze","text":"Mentioned above equipment is necessary to carry out electrical and link layer tests. Due to its high price it's rather impossible to perform such tests now. So far I couldn't find any alternate solutions which will meet the requirements and will be low-price devices. It results from the fact, that to test USB 3.0 protocol, high frequency devices are needed and such devices are rather expensive. Most of available instruments are suitable only for USB 2.0 testing.","title":"USB 3.0 analyze"},{"location":"research/USB_compliance_test/#usb-20-analyze","text":"USB 2.0 Analyzer's principles of operation is exactly the same as USB 3.0 Analyzer and it is described above in that document. Proposed USB 2.0 Analyzers with dedicated software: - OpenVizsla | Wireshark - Beagle USB 480 | Data Center Software Both analyzers are perfectly good to capture and investigate USB data. However, OpenVizsla is an open-source solution which can easily handle with USB analysis within low price. In combination with Wireshark (or any other program which can descramble USB data) it doesn't stand out from any other available solutions. On the other hand, Beagle's software has feature which analyze state machine and show current state in LTSSM. Those devices can't be extended to analyze USB 3.0/3.1 transmission.","title":"USB 2.0 analyze"},{"location":"research/USB_compliance_test/#rxdetect-state","text":"Detailed description of RxDetect machine state (with substates) is available in Section 7.5.3 in USB 3.0 Specification. Initially USB ports are in SS.Disabled state (SuperSpeed connection is cut off). RxDetect state (in fact RxDetect.Reset ) is reached after Power On Reset or Directed Warm Reset. Let's look how machine substate sequence looks like depending on scenarios: RxDetect.Reset If it was reached by power on reset it transit directly to RxDetect.Active . If it was reached by warm reset it transmits LFPS sequence (warm reset sequence) and goes to RxDetect.Active . RxDetect.Active In this state receiver termination (detecting termination at line) is performed. If it is detected (USB 3.0 device is at the end) then Polling.LFPS state is reached. If it is not detected then RxDetect.Quiet state is reached and after 12ms it gets back to RxDetect.Active state and try procedure again. It can move to RxDetect.Quiet state only 8 times in a row. Next time if no termination is detected it goes to SS.Disabled . RxDetect.Quiet Wait 12 ms timeout and go to RxDetect.Active state. Maybe the problem with USB 3.0 stick detection is caused by not detecting Rx termination for 8 times in a row. Host will not get back to detecting USB 3.x device no more and will start procedure of detecting USB 2.0 device.","title":"RxDetect state"},{"location":"research/apu_bios_write_protect/","text":"BIOS write protect Rationale Enabling of the SPI flash locking on APU2/3 boards could prove to be useful, in order to prevent BIOS updates and/or malicious binary injection to the BIOS flash memory during system runtime and/or remotely. Documents used BKDG no.1 BKDG for family 16h model 30h processor BKDG no.2 BKDG for family 16h models 00h-0Fh processors Initial investigation At first, BKDG for processor family 16h model 30h, as stated in /proc/cpuinfo of used Linux distribution, was used as a reference: $ cat /proc/cpuinfo ... processor : 3 vendor_id : AuthenticAMD cpu family : 22 model : 48 model name : AMD GX-412TC SOC ... There is a possibility to block the writes (and reads) to flash using the registers described in paragraph 3.26.9.2 SPIx1D Alt_SPI_CS ( SpiProtectEn0 , SpiProtectLock ). Definition of address ranges, that are to be blocked, is described in paragraph 3.26.9.1 D14F3x[5C,58,54,50] ROM Protect 3, 2, 1, 0 SPI WP# is on the J2 header (page 12 on the board schematics ). This signal is connected to the dedicated SPI WP# pin of the APU chip and can't be controlled like a GPIO. First test was done checking the behavior of the SPI WP# pin, when shorted to ground. No change was noticed. Flashing was still possible using flashrom application on Voyage Linux distribution. Flash writes blocking using register definitions in BKDG no.1 PCI config registers for device 14h function 3h (offset 50h) was set according to BKDG no.1 . RomBase was set to 0 (as for the start of the flash addressing), WriteProtect was set to 1, ReadProtect was set to 0, RangeUnit was set to 1 (64kB unit size), Range was set to 0x80 (8MB flash locked) SPI device memory mapped register ( BAR for this device is set using PCI config register 0xA0 of the device 14h, function 3h), offset 0x1D was set: SpiProtectEn0 to 1, SpiProtectLock to 1. lspci output: $ lspci -s 14.3 -xxx 00:14.3 ISA bridge: Advanced Micro Devices, Inc. [AMD] FCH LPC Bridge (rev 11) 00: 22 10 0e 78 0f 00 20 02 11 00 01 06 00 00 80 00 10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20: 00 00 00 00 00 00 00 00 00 00 00 00 22 10 0e 78 30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40: 04 00 00 00 d5 ff 03 ff 07 ff 20 03 00 00 00 00 50: 80 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00 60: 00 00 00 00 00 0e f8 03 0e 00 0f 00 00 ff ff ff 70: 67 45 23 00 0c 00 00 00 90 00 00 00 05 0b 00 00 80: 08 00 03 a8 00 00 00 00 00 00 00 00 00 00 00 00 90: e8 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 a0: 02 00 c1 fe 2f 01 00 00 00 00 00 00 00 00 00 00 b0: 00 00 00 00 00 00 00 00 04 00 e9 3d 00 00 00 00 c0: 00 00 00 00 00 00 00 00 00 00 00 80 47 10 82 ff d0: 86 ff ff 08 42 00 00 00 00 00 00 00 00 00 00 00 e0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 f0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 Using flashrom utility, flash was still somewhat writeable, but returned errors during verification process. $ flashrom -w coreboot.rom -p internal:boardmismatch=force flashrom v0.9.9-r1954 on Linux 3.16.7-ckt9-voyage (x86_64) flashrom is free software, get the source code at https://flashrom.org Calibrating delay loop... delay loop is unreliable, trying to continue OK. coreboot table found at 0xdffae000. Found chipset \"AMD FCH\". Enabling flash write... OK. Found Winbond flash chip \"W25Q64.V\" (8192 kB, SPI) mapped at physical address 0x00000000ff800000. Reading old flash chip contents... done. Erasing and writing flash chip... Reading current flash chip contents... FAILED at 0x00060000! Expected=0xff, Found=0x55, failed byte count from 0x00060000-0x00060fff: 0xfdf ERASE FAILED! done. Looking for another erase function. Erase/write done. Verifying flash... FAILED at 0x00060000! Expected=0x55, Found=0xff, failed byte count from 0x00000000-0x007fffff: 0x14500 Your flash chip is in an unknown state. Get help on IRC at chat.freenode.net (channel #flashrom) or mail flashrom@flashrom.org with the subject \"FAILED: <your board name>\"! ------------------------------------------------------------------------------- DO NOT REBOOT OR POWEROFF! Platform was not booting anymore. Flash writes blocking using register definitions in BKDG no.2 In BKDG no.2 definition of the PCI config registers for device 14h function 3h is different (paragraph 3.25.9.1 D14F3x[5C,58,54,50] ROM Protect 3, 2, 1, 0 ). According to the document above, registers were set like this: Offset 0x50 : RomBase was set to 0 (as for the start of the flash addressing), RomOffset was set to 1ff (512kB), ReadProtect was set to 1 , WriteProtect was set to 1 . Offset 0x54 : RomBase was set to 0x005ff800 (as for the AGESA fw offset in flash), RomOffset was set to 1ff (512kB), ReadProtect was set to 1 , WriteProtect was set to 1 . SPI device memory mapped register, offset 0x1D was set as in the test before. lspci output: $ lspci -s 14.3 -xxx 00:14.3 ISA bridge: Advanced Micro Devices, Inc. [AMD] FCH LPC Bridge (rev 11) 00: 22 10 0e 78 0f 00 20 02 11 00 01 06 00 00 80 00 10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20: 00 00 00 00 00 00 00 00 00 00 00 00 22 10 0e 78 30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40: 04 00 00 00 d5 ff 03 ff 07 ff 20 03 00 00 00 00 50: ff 07 00 00 ff ff 5f 00 00 00 00 00 00 00 00 00 60: 00 00 00 00 00 0e f8 03 0e 00 0f 00 00 ff ff ff 70: 67 45 23 00 0c 00 00 00 90 00 00 00 05 0a 00 00 80: 08 00 03 a8 00 00 00 00 00 00 00 00 00 00 00 00 90: e8 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 a0: 02 00 c1 fe 2f 01 00 00 00 00 00 00 00 00 00 00 b0: 00 00 00 00 00 00 00 00 04 00 e9 3d 00 00 00 00 c0: 00 00 00 00 00 00 00 00 00 00 00 80 47 10 82 ff d0: 86 ff ff 08 42 00 00 00 00 00 00 00 00 00 00 00 e0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 f0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 Using flashrom utility flashing the vital areas is not possible. $ flashrom -w coreboot.rom -p internal:boardmismatch=force flashrom v0.9.9-r1954 on Linux 3.16.7-ckt9-voyage (x86_64) flashrom is free software, get the source code at https://flashrom.org Calibrating delay loop... OK. coreboot table found at 0xdffae000. Found chipset \"AMD FCH\". Enabling flash write... OK. Disabling read write protection of flash addresses from 0x00000000 to 0x0007ffff failed. Disabling read write protection of flash addresses from 0x005ff800 to 0x0067f7ff failed. Found Winbond flash chip \"W25Q64.V\" (8192 kB, SPI) mapped at physical address 0x00000000ff800000. Reading old flash chip contents... done. Erasing and writing flash chip... Erase/write done. Verifying flash... FAILED at 0x00000000! Expected=0x4c, Found=0xff, failed byte count from 0x00000000-0x007fffff: 0x167107 Your flash chip is in an unknown state. Get help on IRC at chat.freenode.net (channel #flashrom) or mail flashrom@flashrom.org with the subject \"FAILED: <your board name>\"! ------------------------------------------------------------------------------- DO NOT REBOOT OR POWEROFF! Despite the warning, board was still bootable and contained old firmware. Conclusions BKDG for processor family/model used in APU2/3 platform is not correct. One has to use the BKDG for older processor family/models. Blocking the flash writes/reads on APU2/3 boards is certainly possible, but according to research done, it's not possible to lock the full 8MB of flash memory (only 2MB at most using all 4 blockable regions). Unfortunately choosing the vital areas of flash to be blocked, is also very difficult as coreboot creates layout in a dynamic way, so it could vary between versions (e.g. legacy vs mainline).","title":"Apu bios write protect"},{"location":"research/apu_bios_write_protect/#bios-write-protect","text":"","title":"BIOS write protect"},{"location":"research/apu_bios_write_protect/#rationale","text":"Enabling of the SPI flash locking on APU2/3 boards could prove to be useful, in order to prevent BIOS updates and/or malicious binary injection to the BIOS flash memory during system runtime and/or remotely.","title":"Rationale"},{"location":"research/apu_bios_write_protect/#documents-used","text":"","title":"Documents used"},{"location":"research/apu_bios_write_protect/#bkdg-no1","text":"BKDG for family 16h model 30h processor","title":"BKDG no.1"},{"location":"research/apu_bios_write_protect/#bkdg-no2","text":"BKDG for family 16h models 00h-0Fh processors","title":"BKDG no.2"},{"location":"research/apu_bios_write_protect/#initial-investigation","text":"At first, BKDG for processor family 16h model 30h, as stated in /proc/cpuinfo of used Linux distribution, was used as a reference: $ cat /proc/cpuinfo ... processor : 3 vendor_id : AuthenticAMD cpu family : 22 model : 48 model name : AMD GX-412TC SOC ... There is a possibility to block the writes (and reads) to flash using the registers described in paragraph 3.26.9.2 SPIx1D Alt_SPI_CS ( SpiProtectEn0 , SpiProtectLock ). Definition of address ranges, that are to be blocked, is described in paragraph 3.26.9.1 D14F3x[5C,58,54,50] ROM Protect 3, 2, 1, 0 SPI WP# is on the J2 header (page 12 on the board schematics ). This signal is connected to the dedicated SPI WP# pin of the APU chip and can't be controlled like a GPIO. First test was done checking the behavior of the SPI WP# pin, when shorted to ground. No change was noticed. Flashing was still possible using flashrom application on Voyage Linux distribution.","title":"Initial investigation"},{"location":"research/apu_bios_write_protect/#flash-writes-blocking-using-register-definitions-in-bkdg-no1","text":"PCI config registers for device 14h function 3h (offset 50h) was set according to BKDG no.1 . RomBase was set to 0 (as for the start of the flash addressing), WriteProtect was set to 1, ReadProtect was set to 0, RangeUnit was set to 1 (64kB unit size), Range was set to 0x80 (8MB flash locked) SPI device memory mapped register ( BAR for this device is set using PCI config register 0xA0 of the device 14h, function 3h), offset 0x1D was set: SpiProtectEn0 to 1, SpiProtectLock to 1. lspci output: $ lspci -s 14.3 -xxx 00:14.3 ISA bridge: Advanced Micro Devices, Inc. [AMD] FCH LPC Bridge (rev 11) 00: 22 10 0e 78 0f 00 20 02 11 00 01 06 00 00 80 00 10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20: 00 00 00 00 00 00 00 00 00 00 00 00 22 10 0e 78 30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40: 04 00 00 00 d5 ff 03 ff 07 ff 20 03 00 00 00 00 50: 80 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00 60: 00 00 00 00 00 0e f8 03 0e 00 0f 00 00 ff ff ff 70: 67 45 23 00 0c 00 00 00 90 00 00 00 05 0b 00 00 80: 08 00 03 a8 00 00 00 00 00 00 00 00 00 00 00 00 90: e8 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 a0: 02 00 c1 fe 2f 01 00 00 00 00 00 00 00 00 00 00 b0: 00 00 00 00 00 00 00 00 04 00 e9 3d 00 00 00 00 c0: 00 00 00 00 00 00 00 00 00 00 00 80 47 10 82 ff d0: 86 ff ff 08 42 00 00 00 00 00 00 00 00 00 00 00 e0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 f0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 Using flashrom utility, flash was still somewhat writeable, but returned errors during verification process. $ flashrom -w coreboot.rom -p internal:boardmismatch=force flashrom v0.9.9-r1954 on Linux 3.16.7-ckt9-voyage (x86_64) flashrom is free software, get the source code at https://flashrom.org Calibrating delay loop... delay loop is unreliable, trying to continue OK. coreboot table found at 0xdffae000. Found chipset \"AMD FCH\". Enabling flash write... OK. Found Winbond flash chip \"W25Q64.V\" (8192 kB, SPI) mapped at physical address 0x00000000ff800000. Reading old flash chip contents... done. Erasing and writing flash chip... Reading current flash chip contents... FAILED at 0x00060000! Expected=0xff, Found=0x55, failed byte count from 0x00060000-0x00060fff: 0xfdf ERASE FAILED! done. Looking for another erase function. Erase/write done. Verifying flash... FAILED at 0x00060000! Expected=0x55, Found=0xff, failed byte count from 0x00000000-0x007fffff: 0x14500 Your flash chip is in an unknown state. Get help on IRC at chat.freenode.net (channel #flashrom) or mail flashrom@flashrom.org with the subject \"FAILED: <your board name>\"! ------------------------------------------------------------------------------- DO NOT REBOOT OR POWEROFF! Platform was not booting anymore.","title":"Flash writes blocking using register definitions in BKDG no.1"},{"location":"research/apu_bios_write_protect/#flash-writes-blocking-using-register-definitions-in-bkdg-no2","text":"In BKDG no.2 definition of the PCI config registers for device 14h function 3h is different (paragraph 3.25.9.1 D14F3x[5C,58,54,50] ROM Protect 3, 2, 1, 0 ). According to the document above, registers were set like this: Offset 0x50 : RomBase was set to 0 (as for the start of the flash addressing), RomOffset was set to 1ff (512kB), ReadProtect was set to 1 , WriteProtect was set to 1 . Offset 0x54 : RomBase was set to 0x005ff800 (as for the AGESA fw offset in flash), RomOffset was set to 1ff (512kB), ReadProtect was set to 1 , WriteProtect was set to 1 . SPI device memory mapped register, offset 0x1D was set as in the test before. lspci output: $ lspci -s 14.3 -xxx 00:14.3 ISA bridge: Advanced Micro Devices, Inc. [AMD] FCH LPC Bridge (rev 11) 00: 22 10 0e 78 0f 00 20 02 11 00 01 06 00 00 80 00 10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20: 00 00 00 00 00 00 00 00 00 00 00 00 22 10 0e 78 30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40: 04 00 00 00 d5 ff 03 ff 07 ff 20 03 00 00 00 00 50: ff 07 00 00 ff ff 5f 00 00 00 00 00 00 00 00 00 60: 00 00 00 00 00 0e f8 03 0e 00 0f 00 00 ff ff ff 70: 67 45 23 00 0c 00 00 00 90 00 00 00 05 0a 00 00 80: 08 00 03 a8 00 00 00 00 00 00 00 00 00 00 00 00 90: e8 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 a0: 02 00 c1 fe 2f 01 00 00 00 00 00 00 00 00 00 00 b0: 00 00 00 00 00 00 00 00 04 00 e9 3d 00 00 00 00 c0: 00 00 00 00 00 00 00 00 00 00 00 80 47 10 82 ff d0: 86 ff ff 08 42 00 00 00 00 00 00 00 00 00 00 00 e0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 f0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 Using flashrom utility flashing the vital areas is not possible. $ flashrom -w coreboot.rom -p internal:boardmismatch=force flashrom v0.9.9-r1954 on Linux 3.16.7-ckt9-voyage (x86_64) flashrom is free software, get the source code at https://flashrom.org Calibrating delay loop... OK. coreboot table found at 0xdffae000. Found chipset \"AMD FCH\". Enabling flash write... OK. Disabling read write protection of flash addresses from 0x00000000 to 0x0007ffff failed. Disabling read write protection of flash addresses from 0x005ff800 to 0x0067f7ff failed. Found Winbond flash chip \"W25Q64.V\" (8192 kB, SPI) mapped at physical address 0x00000000ff800000. Reading old flash chip contents... done. Erasing and writing flash chip... Erase/write done. Verifying flash... FAILED at 0x00000000! Expected=0x4c, Found=0xff, failed byte count from 0x00000000-0x007fffff: 0x167107 Your flash chip is in an unknown state. Get help on IRC at chat.freenode.net (channel #flashrom) or mail flashrom@flashrom.org with the subject \"FAILED: <your board name>\"! ------------------------------------------------------------------------------- DO NOT REBOOT OR POWEROFF! Despite the warning, board was still bootable and contained old firmware.","title":"Flash writes blocking using register definitions in BKDG no.2"},{"location":"research/apu_bios_write_protect/#conclusions","text":"BKDG for processor family/model used in APU2/3 platform is not correct. One has to use the BKDG for older processor family/models. Blocking the flash writes/reads on APU2/3 boards is certainly possible, but according to research done, it's not possible to lock the full 8MB of flash memory (only 2MB at most using all 4 blockable regions). Unfortunately choosing the vital areas of flash to be blocked, is also very difficult as coreboot creates layout in a dynamic way, so it could vary between versions (e.g. legacy vs mainline).","title":"Conclusions"},{"location":"research/early-cbmem-implementation/","text":"Early CBMEM support By the 4.7 release (October) support for cbmem in romstage is required for all platforms. Original message from mailing list can be found there Following mail gives some insight on what needs to be done to satisfy the romstage cbmem requirement. Essential extract from above message: > In preparation to remove the static CBMEM allocator, tag the chipsets > that still do not implement get_top_of_ram() for romstage. So you need to implement that function for your chipset, remove the Kconfig selection, and if I remember correctly, everything else should then start working nicely. The next step is then to also add time-stamps to CBMEM, that can be read out with cbmem -t . It looks that implementation in northbridge is necessary. For apu2 it will be in src/northbridge/amd/pi/00730F01 . Few more useful links below: Chipsets that are marked as missing EARLY_CBMEM implementation One example of Intel chipset implementation Another example of Intel chipset implementation There is much work already done by Kyosti Malkki for AGESA here I recommend to look at related topics too. This can be an inspiring source AGESA: Add romstage timestamps I also advise to contact Kyosti and ask about the progress of his work. Maybe there is something we could do to help.","title":"Early cbmem implementation"},{"location":"research/early-cbmem-implementation/#early-cbmem-support","text":"By the 4.7 release (October) support for cbmem in romstage is required for all platforms. Original message from mailing list can be found there Following mail gives some insight on what needs to be done to satisfy the romstage cbmem requirement. Essential extract from above message: > In preparation to remove the static CBMEM allocator, tag the chipsets > that still do not implement get_top_of_ram() for romstage. So you need to implement that function for your chipset, remove the Kconfig selection, and if I remember correctly, everything else should then start working nicely. The next step is then to also add time-stamps to CBMEM, that can be read out with cbmem -t . It looks that implementation in northbridge is necessary. For apu2 it will be in src/northbridge/amd/pi/00730F01 . Few more useful links below: Chipsets that are marked as missing EARLY_CBMEM implementation One example of Intel chipset implementation Another example of Intel chipset implementation There is much work already done by Kyosti Malkki for AGESA here I recommend to look at related topics too. This can be an inspiring source AGESA: Add romstage timestamps I also advise to contact Kyosti and ask about the progress of his work. Maybe there is something we could do to help.","title":"Early CBMEM support"},{"location":"research/fast_boot/","text":"PC Engines fast boot Long boot time PC Engines apu2 platforms are booting coreboot in approximately 2.6s while the memory training takes over 2s. Dump of cbmem timestamps on v4.9.0.2 firmware on apu: 0:1st timestamp 18,886 1:start of romstage 18,958 (71) 2:before ram initialization 46,334 (27,376) 3:after ram initialization 2,225,788 (2,179,453) 4:end of romstage 2,298,974 (73,185) 8:starting to load ramstage 2,299,924 (949) 15:starting LZMA decompress (ignore for x86) 2,300,264 (340) 16:finished LZMA decompress (ignore for x86) 2,341,499 (41,234) 9:finished loading ramstage 2,343,593 (2,094) 10:start of ramstage 2,343,929 (335) 30:device enumeration 2,343,937 (8) 40:device configuration 2,347,291 (3,354) 50:device enable 2,349,098 (1,806) 60:device initialization 2,381,455 (32,356) 70:device setup done 2,452,309 (70,853) 75:cbmem post 2,472,769 (20,460) 80:write tables 2,472,773 (3) 85:finalize chips 2,475,425 (2,652) 90:load payload 2,475,637 (211) 15:starting LZMA decompress (ignore for x86) 2,475,906 (269) 16:finished LZMA decompress (ignore for x86) 2,514,778 (38,871) 99:selfboot jump 2,514,808 (30) Memory Context Restore AGESA has an option called Memory Context Restore which restores the configuration of the memory controller from non-volatile storage. The feature should dramatically reduce of memory training time after first boot. IN BOOLEAN MemRestoreCtl; ///< Memory context restore control ///< FALSE = perform memory init as normal (AMD default) ///< TRUE = restore memory context and skip training. This requires ///< MemContext is valid before AmdInitPost ///< IN BOOLEAN SaveMemContextCtl; ///< Control switch to save memory context at the end of MemAuto ///< TRUE = AGESA will setup MemContext block before exit AmdInitPost ///< FALSE = AGESA will not setup MemContext block. Platform is ///< expected to call S3Save later in POST if it wants to ///< use memory context restore feature. ///< IN OUT AMD_S3_PARAMS MemContext; ///< Memory context block describes the data that platform needs to ///< save and restore for memory context restore feature to work. ///< It uses the subset of S3Save block to save/restore. Hence platform ///< may save only S3 block and uses it for both S3 resume and ///< memory context restore. ///< - If MemRestoreCtl is TRUE, platform needs to pass in MemContext ///< before AmdInitPost. ///< - If SaveMemContextCtl is TRUE, platform needs to save MemContext ///< right after AmdInitPost. Implementation and testing Implementation of memory context restore feature contained: passsing correct values to MemRestoreCtl and SaveMemContextCtl in following manner: set MemRestoreCtl to TRUE set SaveMemContextCtl to TRUE if memory context present and valid; FALSE otherwise obtain memory context from AGESA in MemContext structure and save it in SPI flash Results At first boot platform behaved correctly, the booting contained normal memory training. However, after a reboot or second boot, the platform began to reset unexpectedly during iPXE booting or normal kernel loading from storage. Such behaviour could point to incorrect memory initialization. Further debugging of the memory context restoring revealed that the memory context returned by AGESA is inconsistent across boots. The test conditions were as follows: set MemRestoreCtl to TRUE do not save MemContext in SPi flash in order to force memory training after each boot Dumps of the memory context showed that the content is different each time platform boots. The differences always occurred on fixed offsets in the structure: 0x220 (single byte changes) 0x300 (multiple byte changes in 80-byte long block) 0x390 (multiple byte changes in 80-byte long block) Example diff of offset 0x300 across two random boots: 00 52 4a 00 00 00 00 00 00 5c 00 5d 00 60 00 62 .RJ......\\.].`.b 00 65 00 00 00 70 00 6e 00 77 00 78 00 1b 1c 25 .e...p.n.w.x...% 24 32 30 37 35 2b 00 00 00 14 14 14 14 14 14 14 $2075+.......... 14 0b 00 0a 00 13 00 11 00 19 00 00 00 20 00 20 ............. . 00 25 00 23 00 38 03 38 03 00 00 00 00 03 00 00 .%.#.8.8........ ================= 00 52 4a 00 00 00 00 00 00 5c 00 5d 00 60 00 62 .RJ......\\.].`.b 00 64 00 00 00 70 00 6e 00 76 00 78 00 1a 1c 24 .d...p.n.v.x...$ 24 32 30 37 35 2c 00 00 00 14 14 14 14 14 14 14 $2075,.......... 14 0a 00 0a 00 12 00 11 00 1a 00 00 00 20 00 20 ............. . 00 25 00 23 00 38 03 38 03 00 00 00 00 03 00 00 .%.#.8.8........ The conclusion is that restoring the memory context from non-volatile storage is not reliable. Platform skipped training and initialized memory controller with wrong values taken from context. Without correctly initialized memory the platform could not load any kernel, thus kept resetting unexpectedly. AMD and community statement The fast boot topic has been also touched by coreboot community: https://review.coreboot.org/c/coreboot/+/22727 The most interesting are the comments: Unfortunately, according to AMD, we can only use the saved training results for S3 resume, and not as part of a fastboot path... AMD has taken a pretty strong position that an Intel-like \"fast boot\" is not practical to develop. Given that it is impossible to use available AGESA binary to implement fast boot feature. Providing initial training data AGESA has more parameters that can be specified when calling AmdInitPost. Some of them are: IN UINT8 *TableBasedAlterations; IN PSO_TABLE *PlatformMemoryConfiguration; IN FORCE_TRAIN_MODE ForceTrainMode; PlatformMemoryConfiguration is filled with a set of macros available in AGESA.h . Things like number of DIMMs or channels supported, motherboard layers and signal maps can be set, but it doesn't have any measurable effect. Format for TableBasedAlterations isn't specified in the available documentation, but can be read from source code available in coreboot repository, assuming that AGESA blob follows the same format. ForceTrainMode can force 1D training only, which is slightly faster. Results Using all of those settings with data taken from full memory training seems to speed up that process, but the changes are minimal (less than 2%): type of boot v4.9.0.2 with filled data cold 2,544,751 2,509,498 warm 2,529,474 2,484,815 reboot 2,494,380 2,470,353 It is possible that there are more not documented, configurable options than those found which could give additional gain. Some of the entries to the TableBasedAlterations can override final data, but they are applied after the training finishes, not instead of the training. Initial data was obtained from one platform, data obtained from different platforms can be different. Because of that results on other platforms might differ too.","title":"Fast boot"},{"location":"research/fast_boot/#pc-engines-fast-boot","text":"","title":"PC Engines fast boot"},{"location":"research/fast_boot/#long-boot-time","text":"PC Engines apu2 platforms are booting coreboot in approximately 2.6s while the memory training takes over 2s. Dump of cbmem timestamps on v4.9.0.2 firmware on apu: 0:1st timestamp 18,886 1:start of romstage 18,958 (71) 2:before ram initialization 46,334 (27,376) 3:after ram initialization 2,225,788 (2,179,453) 4:end of romstage 2,298,974 (73,185) 8:starting to load ramstage 2,299,924 (949) 15:starting LZMA decompress (ignore for x86) 2,300,264 (340) 16:finished LZMA decompress (ignore for x86) 2,341,499 (41,234) 9:finished loading ramstage 2,343,593 (2,094) 10:start of ramstage 2,343,929 (335) 30:device enumeration 2,343,937 (8) 40:device configuration 2,347,291 (3,354) 50:device enable 2,349,098 (1,806) 60:device initialization 2,381,455 (32,356) 70:device setup done 2,452,309 (70,853) 75:cbmem post 2,472,769 (20,460) 80:write tables 2,472,773 (3) 85:finalize chips 2,475,425 (2,652) 90:load payload 2,475,637 (211) 15:starting LZMA decompress (ignore for x86) 2,475,906 (269) 16:finished LZMA decompress (ignore for x86) 2,514,778 (38,871) 99:selfboot jump 2,514,808 (30)","title":"Long boot time"},{"location":"research/fast_boot/#memory-context-restore","text":"AGESA has an option called Memory Context Restore which restores the configuration of the memory controller from non-volatile storage. The feature should dramatically reduce of memory training time after first boot. IN BOOLEAN MemRestoreCtl; ///< Memory context restore control ///< FALSE = perform memory init as normal (AMD default) ///< TRUE = restore memory context and skip training. This requires ///< MemContext is valid before AmdInitPost ///< IN BOOLEAN SaveMemContextCtl; ///< Control switch to save memory context at the end of MemAuto ///< TRUE = AGESA will setup MemContext block before exit AmdInitPost ///< FALSE = AGESA will not setup MemContext block. Platform is ///< expected to call S3Save later in POST if it wants to ///< use memory context restore feature. ///< IN OUT AMD_S3_PARAMS MemContext; ///< Memory context block describes the data that platform needs to ///< save and restore for memory context restore feature to work. ///< It uses the subset of S3Save block to save/restore. Hence platform ///< may save only S3 block and uses it for both S3 resume and ///< memory context restore. ///< - If MemRestoreCtl is TRUE, platform needs to pass in MemContext ///< before AmdInitPost. ///< - If SaveMemContextCtl is TRUE, platform needs to save MemContext ///< right after AmdInitPost.","title":"Memory Context Restore"},{"location":"research/fast_boot/#implementation-and-testing","text":"Implementation of memory context restore feature contained: passsing correct values to MemRestoreCtl and SaveMemContextCtl in following manner: set MemRestoreCtl to TRUE set SaveMemContextCtl to TRUE if memory context present and valid; FALSE otherwise obtain memory context from AGESA in MemContext structure and save it in SPI flash","title":"Implementation and testing"},{"location":"research/fast_boot/#results","text":"At first boot platform behaved correctly, the booting contained normal memory training. However, after a reboot or second boot, the platform began to reset unexpectedly during iPXE booting or normal kernel loading from storage. Such behaviour could point to incorrect memory initialization. Further debugging of the memory context restoring revealed that the memory context returned by AGESA is inconsistent across boots. The test conditions were as follows: set MemRestoreCtl to TRUE do not save MemContext in SPi flash in order to force memory training after each boot Dumps of the memory context showed that the content is different each time platform boots. The differences always occurred on fixed offsets in the structure: 0x220 (single byte changes) 0x300 (multiple byte changes in 80-byte long block) 0x390 (multiple byte changes in 80-byte long block) Example diff of offset 0x300 across two random boots: 00 52 4a 00 00 00 00 00 00 5c 00 5d 00 60 00 62 .RJ......\\.].`.b 00 65 00 00 00 70 00 6e 00 77 00 78 00 1b 1c 25 .e...p.n.w.x...% 24 32 30 37 35 2b 00 00 00 14 14 14 14 14 14 14 $2075+.......... 14 0b 00 0a 00 13 00 11 00 19 00 00 00 20 00 20 ............. . 00 25 00 23 00 38 03 38 03 00 00 00 00 03 00 00 .%.#.8.8........ ================= 00 52 4a 00 00 00 00 00 00 5c 00 5d 00 60 00 62 .RJ......\\.].`.b 00 64 00 00 00 70 00 6e 00 76 00 78 00 1a 1c 24 .d...p.n.v.x...$ 24 32 30 37 35 2c 00 00 00 14 14 14 14 14 14 14 $2075,.......... 14 0a 00 0a 00 12 00 11 00 1a 00 00 00 20 00 20 ............. . 00 25 00 23 00 38 03 38 03 00 00 00 00 03 00 00 .%.#.8.8........ The conclusion is that restoring the memory context from non-volatile storage is not reliable. Platform skipped training and initialized memory controller with wrong values taken from context. Without correctly initialized memory the platform could not load any kernel, thus kept resetting unexpectedly.","title":"Results"},{"location":"research/fast_boot/#amd-and-community-statement","text":"The fast boot topic has been also touched by coreboot community: https://review.coreboot.org/c/coreboot/+/22727 The most interesting are the comments: Unfortunately, according to AMD, we can only use the saved training results for S3 resume, and not as part of a fastboot path... AMD has taken a pretty strong position that an Intel-like \"fast boot\" is not practical to develop. Given that it is impossible to use available AGESA binary to implement fast boot feature.","title":"AMD and community statement"},{"location":"research/fast_boot/#providing-initial-training-data","text":"AGESA has more parameters that can be specified when calling AmdInitPost. Some of them are: IN UINT8 *TableBasedAlterations; IN PSO_TABLE *PlatformMemoryConfiguration; IN FORCE_TRAIN_MODE ForceTrainMode; PlatformMemoryConfiguration is filled with a set of macros available in AGESA.h . Things like number of DIMMs or channels supported, motherboard layers and signal maps can be set, but it doesn't have any measurable effect. Format for TableBasedAlterations isn't specified in the available documentation, but can be read from source code available in coreboot repository, assuming that AGESA blob follows the same format. ForceTrainMode can force 1D training only, which is slightly faster.","title":"Providing initial training data"},{"location":"research/fast_boot/#results_1","text":"Using all of those settings with data taken from full memory training seems to speed up that process, but the changes are minimal (less than 2%): type of boot v4.9.0.2 with filled data cold 2,544,751 2,509,498 warm 2,529,474 2,484,815 reboot 2,494,380 2,470,353 It is possible that there are more not documented, configurable options than those found which could give additional gain. Some of the entries to the TableBasedAlterations can override final data, but they are applied after the training finishes, not instead of the training. Initial data was obtained from one platform, data obtained from different platforms can be different. Because of that results on other platforms might differ too.","title":"Results"},{"location":"research/freebsd_tpm_support/","text":"FreeBSD TPM2.0 support Early boot process From: https://www.freebsd.org/doc/handbook/boot-introduction.html Stage One and Stage Two Conceptually, the first and second stages are part of the same program on the same area of the disk. Because of space constraints, they have been split into two, but are always installed together. They are copied from the combined /boot/boot by the FreeBSD installer or bsdlabel. These two stages are located outside file systems, in the first track of the boot slice, starting with the first sector. This is where boot0, or any other boot manager, expects to find a program to run which will continue the boot process. The first stage, boot1, is very simple, since it can only be 512 bytes in size. It knows just enough about the FreeBSD bsdlabel, which stores information about the slice, to find and execute boot2. Stage two, boot2, is slightly more sophisticated, and understands the FreeBSD file system enough to find files. It can provide a simple interface to choose the kernel or loader to run. It runs loader, which is much more sophisticated and provides a boot configuration file. So boot1 is equivalent of MBR code and boot2 is a simple command line interface to load kernel directly or a 3rd stage loader. Stage Three The loader is the final stage of the three-stage bootstrap process. It is located on the file system, usually as /boot/loader. The loader is intended as an interactive method for configuration, using a built-in command set, backed up by a more powerful interpreter which has a more complex command set. Looks like stage three loader seem to be an equivalent of GRUB or other bootloader. Last stage Kernel is loaded. It examines for boot flags and adjusts its behavior: Option Description -a During kernel init, ask the device to mount as the rootfs. -C Boot the root file system from a CDROM. -s Boot into single-user mode. -v Be more verbose during kernel startup. Once the kernel has finished booting, it passes control to the user process init(8), which is located at /sbin/init, or the program path specified in the init_path variable in loader. This is the last stage of the boot process. TPM support information From investigating the source, there is very little code for TPM 2.0 interaction. Also no information found on mailing lists about TPM 2.0 support in early boot process, verification, measurements etc. The only message found was related to tpm2-tools compatibility in FreeBSD. However I have found an interesting mail with guide to trusted gptboot ( tgptboot ). gptboot is a part of standard FreeBSD boot path that connects legacy MBR and GPT partitioning and tgptboot is its hardened version. First of all BIOS measures the PMBR (Protective Master Boot Record) code. Then PMBR measure freebsd-boot partition (most likely the stage two and/or stage three) and hand control over to trusted gptboot. tgptboot: select UFS partition (take gptboot(8) attributes into account) get KEY from TPM NVRAM get DATA_PATH from TPM NVRAM read and decrypt DATA at DATA_PATH using KEY set kernel environment (if specified in DATA) load and checksum kernel and modules (path, size and hash in DATA) load disk keys (if specified in DATA) execute kernel https://lists.freebsd.org/pipermail/freebsd-hackers/2015-March/047376.html Unfotunately it utilizes TPM1.2 only. The status of tgptboot development still needs to be researched.","title":"Freebsd tpm support"},{"location":"research/freebsd_tpm_support/#freebsd-tpm20-support","text":"","title":"FreeBSD TPM2.0 support"},{"location":"research/freebsd_tpm_support/#early-boot-process","text":"From: https://www.freebsd.org/doc/handbook/boot-introduction.html","title":"Early boot process"},{"location":"research/freebsd_tpm_support/#stage-one-and-stage-two","text":"Conceptually, the first and second stages are part of the same program on the same area of the disk. Because of space constraints, they have been split into two, but are always installed together. They are copied from the combined /boot/boot by the FreeBSD installer or bsdlabel. These two stages are located outside file systems, in the first track of the boot slice, starting with the first sector. This is where boot0, or any other boot manager, expects to find a program to run which will continue the boot process. The first stage, boot1, is very simple, since it can only be 512 bytes in size. It knows just enough about the FreeBSD bsdlabel, which stores information about the slice, to find and execute boot2. Stage two, boot2, is slightly more sophisticated, and understands the FreeBSD file system enough to find files. It can provide a simple interface to choose the kernel or loader to run. It runs loader, which is much more sophisticated and provides a boot configuration file. So boot1 is equivalent of MBR code and boot2 is a simple command line interface to load kernel directly or a 3rd stage loader.","title":"Stage One and Stage Two"},{"location":"research/freebsd_tpm_support/#stage-three","text":"The loader is the final stage of the three-stage bootstrap process. It is located on the file system, usually as /boot/loader. The loader is intended as an interactive method for configuration, using a built-in command set, backed up by a more powerful interpreter which has a more complex command set. Looks like stage three loader seem to be an equivalent of GRUB or other bootloader.","title":"Stage Three"},{"location":"research/freebsd_tpm_support/#last-stage","text":"Kernel is loaded. It examines for boot flags and adjusts its behavior: Option Description -a During kernel init, ask the device to mount as the rootfs. -C Boot the root file system from a CDROM. -s Boot into single-user mode. -v Be more verbose during kernel startup. Once the kernel has finished booting, it passes control to the user process init(8), which is located at /sbin/init, or the program path specified in the init_path variable in loader. This is the last stage of the boot process.","title":"Last stage"},{"location":"research/freebsd_tpm_support/#tpm-support-information","text":"From investigating the source, there is very little code for TPM 2.0 interaction. Also no information found on mailing lists about TPM 2.0 support in early boot process, verification, measurements etc. The only message found was related to tpm2-tools compatibility in FreeBSD. However I have found an interesting mail with guide to trusted gptboot ( tgptboot ). gptboot is a part of standard FreeBSD boot path that connects legacy MBR and GPT partitioning and tgptboot is its hardened version. First of all BIOS measures the PMBR (Protective Master Boot Record) code. Then PMBR measure freebsd-boot partition (most likely the stage two and/or stage three) and hand control over to trusted gptboot. tgptboot: select UFS partition (take gptboot(8) attributes into account) get KEY from TPM NVRAM get DATA_PATH from TPM NVRAM read and decrypt DATA at DATA_PATH using KEY set kernel environment (if specified in DATA) load and checksum kernel and modules (path, size and hash in DATA) load disk keys (if specified in DATA) execute kernel https://lists.freebsd.org/pipermail/freebsd-hackers/2015-March/047376.html Unfotunately it utilizes TPM1.2 only. The status of tgptboot development still needs to be researched.","title":"TPM support information"},{"location":"research/geode_lx/","text":"ALIX and AMD Geode LX This paper contains research about Geode LX CAR and whole effort to implement EARLY_CBMEM_INIT in coreboot for PC Engines ALIX platforms. Table of Contents List of abbreviations Memory initialisation Memory types and caching policies MTRRS Fixed MTRRs Variable MTRRs Geode LX MTRRs List of abbreviations SDM - Software Developer Manual MTRR - Memory Type Range Register MSR - Model Specific Register CAR - Cache-as-RAM UC - Strong Uncacheable UC- - Uncacheable WC - Write Combining WT - Write Through WB - Write Back WP - Write Protected SMM - System Management Mode DMM - Debug Management Mode Memory initialisation Current ALIX platforms support in coreboot (state at the day of writing this document) lets user build a firmware capable to boot the platform without issues. However... With coreboot 4.7 version, new standards has been introduced which every platform must meet to be supported (to stay in the main branch). One of these standards (requirements) is EARLY_CBMEM_INIT to be used by platform. EARLY_CBMEM_INIT allows to save log to cbmem early in romstage, but that's not all about it. To get all benefits of EARLY_CBMEM_INIT , the main memory need to be initialised and addressable in romstage. Unfortunately ALIX platforms initialize memory in ramstage, which breaks the model proposed by coreboot project. In order to achieve the goal (move platform to EARLY_CBMEM_INIT ), deeper understading of caching, memory initialisation and CAR is needed. Below sections describes steps needed to reach the goal. Memory types and caching policies Intel SDM is a good source of knowledge about caching and memory types. Detialed description is available in Intel SDM vol 3A Section 11.3. In brief Intel describes 6 memory types which are used in Intel's hardware: UC - System memory locations are not cached. All reads and writes appear on the system bus and are executed in program order without reordering. UC- - Has same characteristics as the strong uncacheable (UC) memory type, except that this memory type can be overridden by programming the MTRRs for the WC memory type WC - System memory locations are not cached (as with uncacheable memory) and coherency is not enforced by the processor\u2019s bus coherency protocol. Speculative reads are allowed. Writes may be delayed and combined in the write combining buffer (WC buffer) to reduce memory accesses. If the WC buffer is partially filled, the writes may be delayed until the next occurrence of a serializing event WT - Writes and reads to and from system memory are cached. Reads come from cache lines on cache hits; read misses cause cache fills. Speculative reads are allowed. All writes are written to a cache line (when possible) and through to system memory. When writing through to memory, invalid cache lines are never filled, and valid cache lines are either filled or invalidated. Write combining is allowed. WB - Writes and reads to and from system memory are cached. Reads come from cache lines on cache hits; read misses cause cache fills. Speculative reads are allowed. Write misses cause cache line fills, and writes are performed entirely in the cache, when possible. Write combining is allowed. The write-back memory type reduces bus traffic by eliminating many unnecessary writes to system memory. Writes to a cache line are not immediately forwarded to system memory; instead, they are accumulated in the cache. The modified cache lines are written to system memory later, when a write-back operation is performed. WP - Reads come from cache lines when possible, and read misses cause cache fills. Writes are propagated to the system bus and cause corresponding cache lines on all processors on the bus to be invalidated. Speculative reads are allowed. Section 11.2 describes the terms cache line fill , cache hit and write hit . MTRRS MTRRs are registers responsible for setting memory type for given address ranges of physical memory. They are divided into two groups: fixed MTRRs variable MTRRs MTRR availability if identified by bit 12 in EDX register after issuing CPUID instruction. Additional information about MTRRs are stored in IA32_MTRRCAP MSR which is read-only. It defines variable MTRRs count, fixed MTRRs count etc. All MTRRs and IA32_MTRRCAP are described in Section 11.11 in Intel SDM vol 3A and subsequent subsections. Fixed MTRRs Fixed MTRR allows to set memory type for region handled by corresponding MTRR. There are 3 types of fixed MTRRs based on address range covered: Register IA32_MTRR_FIX64K_00000 \u2014 Maps the 512-KByte address range from 0H to 7FFFFH. This range is divided into eight 64-KByte sub-ranges Registers IA32_MTRR_FIX16K_80000 and IA32_MTRR_FIX16K_A0000 \u2014 Maps the two 128-KByte address ranges from 80000H to BFFFFH. This range is divided into sixteen 16-KByte sub-ranges, 8 ranges per register. Registers IA32_MTRR_FIX4K_C0000 through IA32_MTRR_FIX4K_F8000 \u2014 Maps eight 32-KByte address ranges from C0000H to FFFFFH. This range is divided into sixty-four 4-KByte sub-ranges, 8 ranges per register. These registers can set memory type only for a fixed address range. Variable MTRRs IA32_MTRRCAP MSR contains number of variable ranges supported by CPU (this number is also an upper limit of variable MTRRs). These MTRRs allow to define not only memory type, but also the address range it will be applied to. The range is defined by programming BASE and MASK registers. NOTE: all MTRRS must be consistent across all CPUs in multi-processor systems. Geode LX MTRRs Geode LX registers does not have typical MTRRs as described in Intel SDM. Do not be surprised, it is quite old processor and created by AMD. It is obvious that registers will differ. However there is a set of MSRs which serve the same purpose as MTRRs. The equivalents of fixed MTRRs are described below. RCONF_A0_BF_MSR - is a regions configuration register for address range between 0xA0000 and 0xBFFFF (128 KByte). This range is divided into eight 16-KByte sub-ranges. Equivalent of IA32_MTRR_FIX16K_A0000 RCONF_C0_DF_MSR - same as above for range 0xC0000 and 0xDFFFF (128 KByte). There is no equivalent in Intel SDM (Intel's implementation for range 0xC0000 - 0xDFFFF is programmed via IA32_MTRR_FIX4K_xxxxx which are 32=KByte address range registers with eight 4-Kbyte subranges) RCONF_E0_FF_MSR - same as above for range 0xE0000 and 0xFFFFF (128 KByte). No equivalents, this range is covered by IA32_MTRR_FIX4K_xxxxx registers in Intel's implementations. The equivalents of variable MTRRs are RCONF0_MSR through RCONF7_MSR . Eight equivalents to Intel's variable MTRRs are available in Geode LX processor. Fields defined by these registers: top of range, range base address, enable/disable bit and 8 bits for region properties. Additionally there are separate range register for SMM ( RCONF_SMM_MSR ) and DMM ( RCONF_DMM_MSR ). They are defining SMM/DMM base address, top address, enable/disable bit and region properties when region is active or inactive (8 bits for each state). Region properties are described in detail in Geode LX databook and seem to be different than Intel's standard. Region properties are defined by 8 bits (64bit MSR divided into eight sub-rnages, 8 bits for each subrange properties). Bit Property 7 Reserved 6 Reserved 5 WS - Write-serialize 4 WC - Write-ombine 3 WT - Write-hrough 2 WP - Write-rotect 1 WA - Write-allocate 0 CD - Cache Disable Based on the setting, the properties can have different impact on read and write operations. AMD's implementations allow to set multiple bits allowing to set \"memory subtypes\" (page 170 of Geode LX databook): Property Setting Read Operation behaviour WS=0 and CD=0, rest don't care Cacheable. Read misses cause a cache line to be allocated. WS=1 and CD=0, rest don't care Undefined State. Unpredictable behavior occurs. CD=1, rest don't care Uncacheable. Reads are sent unmodified to the bus. Equivalent to Intel's UC and UC- Property Setting Write Operation behaviour WP=1, rest don't care Write-protected. Writes to the region are discarded. Equivalent to Intel's WP WS=1, rest don't care Undefined. Unpredictable behavior occurs. WC=1 and CD=0, rest don't care Undefined. Unpredictable behavior occurs. WA=1 and CD=1, rest don't care Undefined. Unpredictable behavior occurs. 00h Write-back Cacheable. Write misses are sent to the bus, a cache line is not allocated on a write miss. 02h Write-back Cacheable/Write-allocate. Write misses allocate a line in the cache. Equivalent to Intel's WB 08h or 0Ah Write-through cacheable. Write misses do not allocate a line in the cache. Write hits update the cache but do not mark the line as dirty. All writes are sent to the bus. Similar to Intel's WT 01h Uncacheable. All writes are sent to the bus in strict program order without any combining. Write hits still update the cache. Equivalent to UC and UC- 21h Uncacheable as above. Additionally: Write-serialize. Limit the number of outstanding writes to the value of the WSREQ field in DM_CONFIG0_MSR 11h Write-combined (uncacheable). Writes to the same cache line may be combined. Multiple writes to the same byte results in a single write with the last value specified. Write order is not preserved. Similar to Intel's WC 31h Write-combined (uncacheable) as above. Additionally: Write-serialize . Limit the number of outstanding writes to the value of the WSREQ field in DM_CONFIG0_MSR 19h Write-burstable (uncacheable). Writes to the same cache line are combined as long as they are to increasing addresses and do not access a previously written byte. Multiple writes to the same byte results in multiple bytes on the bus. 31h Write-burstable (uncacheable) as above. Additionally: Write-serialize . Limit the number of outstanding writes to the value of the WSREQ field in DM_CONFIG0_MSR","title":"Geode lx"},{"location":"research/geode_lx/#alix-and-amd-geode-lx","text":"This paper contains research about Geode LX CAR and whole effort to implement EARLY_CBMEM_INIT in coreboot for PC Engines ALIX platforms.","title":"ALIX and AMD Geode LX"},{"location":"research/geode_lx/#table-of-contents","text":"List of abbreviations Memory initialisation Memory types and caching policies MTRRS Fixed MTRRs Variable MTRRs Geode LX MTRRs","title":"Table of Contents"},{"location":"research/geode_lx/#list-of-abbreviations","text":"SDM - Software Developer Manual MTRR - Memory Type Range Register MSR - Model Specific Register CAR - Cache-as-RAM UC - Strong Uncacheable UC- - Uncacheable WC - Write Combining WT - Write Through WB - Write Back WP - Write Protected SMM - System Management Mode DMM - Debug Management Mode","title":"List of abbreviations"},{"location":"research/geode_lx/#memory-initialisation","text":"Current ALIX platforms support in coreboot (state at the day of writing this document) lets user build a firmware capable to boot the platform without issues. However... With coreboot 4.7 version, new standards has been introduced which every platform must meet to be supported (to stay in the main branch). One of these standards (requirements) is EARLY_CBMEM_INIT to be used by platform. EARLY_CBMEM_INIT allows to save log to cbmem early in romstage, but that's not all about it. To get all benefits of EARLY_CBMEM_INIT , the main memory need to be initialised and addressable in romstage. Unfortunately ALIX platforms initialize memory in ramstage, which breaks the model proposed by coreboot project. In order to achieve the goal (move platform to EARLY_CBMEM_INIT ), deeper understading of caching, memory initialisation and CAR is needed. Below sections describes steps needed to reach the goal.","title":"Memory initialisation"},{"location":"research/geode_lx/#memory-types-and-caching-policies","text":"Intel SDM is a good source of knowledge about caching and memory types. Detialed description is available in Intel SDM vol 3A Section 11.3. In brief Intel describes 6 memory types which are used in Intel's hardware: UC - System memory locations are not cached. All reads and writes appear on the system bus and are executed in program order without reordering. UC- - Has same characteristics as the strong uncacheable (UC) memory type, except that this memory type can be overridden by programming the MTRRs for the WC memory type WC - System memory locations are not cached (as with uncacheable memory) and coherency is not enforced by the processor\u2019s bus coherency protocol. Speculative reads are allowed. Writes may be delayed and combined in the write combining buffer (WC buffer) to reduce memory accesses. If the WC buffer is partially filled, the writes may be delayed until the next occurrence of a serializing event WT - Writes and reads to and from system memory are cached. Reads come from cache lines on cache hits; read misses cause cache fills. Speculative reads are allowed. All writes are written to a cache line (when possible) and through to system memory. When writing through to memory, invalid cache lines are never filled, and valid cache lines are either filled or invalidated. Write combining is allowed. WB - Writes and reads to and from system memory are cached. Reads come from cache lines on cache hits; read misses cause cache fills. Speculative reads are allowed. Write misses cause cache line fills, and writes are performed entirely in the cache, when possible. Write combining is allowed. The write-back memory type reduces bus traffic by eliminating many unnecessary writes to system memory. Writes to a cache line are not immediately forwarded to system memory; instead, they are accumulated in the cache. The modified cache lines are written to system memory later, when a write-back operation is performed. WP - Reads come from cache lines when possible, and read misses cause cache fills. Writes are propagated to the system bus and cause corresponding cache lines on all processors on the bus to be invalidated. Speculative reads are allowed. Section 11.2 describes the terms cache line fill , cache hit and write hit .","title":"Memory types and caching policies"},{"location":"research/geode_lx/#mtrrs","text":"MTRRs are registers responsible for setting memory type for given address ranges of physical memory. They are divided into two groups: fixed MTRRs variable MTRRs MTRR availability if identified by bit 12 in EDX register after issuing CPUID instruction. Additional information about MTRRs are stored in IA32_MTRRCAP MSR which is read-only. It defines variable MTRRs count, fixed MTRRs count etc. All MTRRs and IA32_MTRRCAP are described in Section 11.11 in Intel SDM vol 3A and subsequent subsections.","title":"MTRRS"},{"location":"research/geode_lx/#fixed-mtrrs","text":"Fixed MTRR allows to set memory type for region handled by corresponding MTRR. There are 3 types of fixed MTRRs based on address range covered: Register IA32_MTRR_FIX64K_00000 \u2014 Maps the 512-KByte address range from 0H to 7FFFFH. This range is divided into eight 64-KByte sub-ranges Registers IA32_MTRR_FIX16K_80000 and IA32_MTRR_FIX16K_A0000 \u2014 Maps the two 128-KByte address ranges from 80000H to BFFFFH. This range is divided into sixteen 16-KByte sub-ranges, 8 ranges per register. Registers IA32_MTRR_FIX4K_C0000 through IA32_MTRR_FIX4K_F8000 \u2014 Maps eight 32-KByte address ranges from C0000H to FFFFFH. This range is divided into sixty-four 4-KByte sub-ranges, 8 ranges per register. These registers can set memory type only for a fixed address range.","title":"Fixed MTRRs"},{"location":"research/geode_lx/#variable-mtrrs","text":"IA32_MTRRCAP MSR contains number of variable ranges supported by CPU (this number is also an upper limit of variable MTRRs). These MTRRs allow to define not only memory type, but also the address range it will be applied to. The range is defined by programming BASE and MASK registers. NOTE: all MTRRS must be consistent across all CPUs in multi-processor systems.","title":"Variable MTRRs"},{"location":"research/geode_lx/#geode-lx-mtrrs","text":"Geode LX registers does not have typical MTRRs as described in Intel SDM. Do not be surprised, it is quite old processor and created by AMD. It is obvious that registers will differ. However there is a set of MSRs which serve the same purpose as MTRRs. The equivalents of fixed MTRRs are described below. RCONF_A0_BF_MSR - is a regions configuration register for address range between 0xA0000 and 0xBFFFF (128 KByte). This range is divided into eight 16-KByte sub-ranges. Equivalent of IA32_MTRR_FIX16K_A0000 RCONF_C0_DF_MSR - same as above for range 0xC0000 and 0xDFFFF (128 KByte). There is no equivalent in Intel SDM (Intel's implementation for range 0xC0000 - 0xDFFFF is programmed via IA32_MTRR_FIX4K_xxxxx which are 32=KByte address range registers with eight 4-Kbyte subranges) RCONF_E0_FF_MSR - same as above for range 0xE0000 and 0xFFFFF (128 KByte). No equivalents, this range is covered by IA32_MTRR_FIX4K_xxxxx registers in Intel's implementations. The equivalents of variable MTRRs are RCONF0_MSR through RCONF7_MSR . Eight equivalents to Intel's variable MTRRs are available in Geode LX processor. Fields defined by these registers: top of range, range base address, enable/disable bit and 8 bits for region properties. Additionally there are separate range register for SMM ( RCONF_SMM_MSR ) and DMM ( RCONF_DMM_MSR ). They are defining SMM/DMM base address, top address, enable/disable bit and region properties when region is active or inactive (8 bits for each state). Region properties are described in detail in Geode LX databook and seem to be different than Intel's standard. Region properties are defined by 8 bits (64bit MSR divided into eight sub-rnages, 8 bits for each subrange properties). Bit Property 7 Reserved 6 Reserved 5 WS - Write-serialize 4 WC - Write-ombine 3 WT - Write-hrough 2 WP - Write-rotect 1 WA - Write-allocate 0 CD - Cache Disable Based on the setting, the properties can have different impact on read and write operations. AMD's implementations allow to set multiple bits allowing to set \"memory subtypes\" (page 170 of Geode LX databook): Property Setting Read Operation behaviour WS=0 and CD=0, rest don't care Cacheable. Read misses cause a cache line to be allocated. WS=1 and CD=0, rest don't care Undefined State. Unpredictable behavior occurs. CD=1, rest don't care Uncacheable. Reads are sent unmodified to the bus. Equivalent to Intel's UC and UC- Property Setting Write Operation behaviour WP=1, rest don't care Write-protected. Writes to the region are discarded. Equivalent to Intel's WP WS=1, rest don't care Undefined. Unpredictable behavior occurs. WC=1 and CD=0, rest don't care Undefined. Unpredictable behavior occurs. WA=1 and CD=1, rest don't care Undefined. Unpredictable behavior occurs. 00h Write-back Cacheable. Write misses are sent to the bus, a cache line is not allocated on a write miss. 02h Write-back Cacheable/Write-allocate. Write misses allocate a line in the cache. Equivalent to Intel's WB 08h or 0Ah Write-through cacheable. Write misses do not allocate a line in the cache. Write hits update the cache but do not mark the line as dirty. All writes are sent to the bus. Similar to Intel's WT 01h Uncacheable. All writes are sent to the bus in strict program order without any combining. Write hits still update the cache. Equivalent to UC and UC- 21h Uncacheable as above. Additionally: Write-serialize. Limit the number of outstanding writes to the value of the WSREQ field in DM_CONFIG0_MSR 11h Write-combined (uncacheable). Writes to the same cache line may be combined. Multiple writes to the same byte results in a single write with the last value specified. Write order is not preserved. Similar to Intel's WC 31h Write-combined (uncacheable) as above. Additionally: Write-serialize . Limit the number of outstanding writes to the value of the WSREQ field in DM_CONFIG0_MSR 19h Write-burstable (uncacheable). Writes to the same cache line are combined as long as they are to increasing addresses and do not access a previously written byte. Multiple writes to the same byte results in multiple bytes on the bus. 31h Write-burstable (uncacheable) as above. Additionally: Write-serialize . Limit the number of outstanding writes to the value of the WSREQ field in DM_CONFIG0_MSR","title":"Geode LX MTRRs"},{"location":"research/power-consumption-tests/","text":"PC Engines apu3 power consumption tests We have started research and measurements of power consumption on apu platforms. Our goal is to optimize (if possible) power management on coreboot level. First stage of work is to collect data from various tests and create reports. For that purpose we have used RTE with power monitor sensor. RTE stands for Remote Testing Environment and it is a tool which helps debugging and testing devices. RTE gathers all necessary interfaces and ports in one device. Therefore, it is very versatile and convenient to use. More information can be found on 3mdeb official website . It is also place where you can buy it. This document gathers all already carried out tests, their results and our conclusions. Over time, we will conduct next tests and hence extend this document with further reports. Tests apu3 stress-test cpu Test case is following: Power on RTE and power on apu3. Boot to Debian 10 (buster) with kernel 4.19 on apu3. Start measurements on RTE: constantly measure bus voltage , current and input power in 0.5 seconds time intervals and save them to text file. After 10 seconds from starting measurements, invoke sysbench command on apu3. When sysbench finished, wait ~25 seconds and invoke command again. When sysbench command was invoked 10 times, finish entire test. Results with coreboot v4.11.0.4 Above test was performed with coreboot v4.11.0.4 which doesn't have ASPM (Active State Power Management) enabled. This feature was introduced in v4.11.0.5 release. $ sysbench cpu run --threads = 4 --events = 10000 --cpu-max-prime = 20000 --time = 0 --validate sysbench 1 .0.19 ( using bundled LuaJIT 2 .1.0-beta2 ) Running the test with following options: Number of threads: 4 Validation checks: on. Initializing random number generator from current time Prime numbers limit: 20000 Initializing worker threads... Threads started! CPU speed: events per second: 539 .76 General statistics: total time: 18 .5220s total number of events: 10000 Latency ( ms ) : min: 6 .40 avg: 7 .41 max: 8 .13 95th percentile: 7 .70 sum: 74064 .78 Threads fairness: events ( avg/stddev ) : 2500 .0000/18.61 execution time ( avg/stddev ) : 18 .5162/0.00 Conclusions In idle state, when only Debian is running without any commands and applications, power consumption oscillates around 4W. It increases to almost 6W (~5.8W) when sysbench is running. That change is mainly caused by current rise. However, simultaneously there is a little voltage drop on the bus. As you can see it drops from about 12.18 V to 12.12 V. That behavior is normal - the greater the load, the greater voltage decrease can be observed. It is rather related to quality of power supply and wires than to end device. Moreover, as this voltage drop is slight, it can be omitted in analysis. Results with coreboot v4.11.0.5 Above test was repeated with coreboot v4.11.0.5 which has ASPM (Active State Power Management) enabled. Exactly same test case was carried out and same measurements were taken. $ sysbench cpu run --threads = 4 --events = 10000 --cpu-max-prime = 20000 --time = 0 --validate sysbench 1 .0.19 ( using bundled LuaJIT 2 .1.0-beta2 ) Running the test with following options: Number of threads: 4 Validation checks: on. Initializing random number generator from current time Prime numbers limit: 20000 Initializing worker threads... Threads started! CPU speed: events per second: 539 .80 General statistics: total time: 18 .5200s total number of events: 10000 Latency ( ms ) : min: 6 .36 avg: 7 .41 max: 8 .17 95th percentile: 7 .70 sum: 74053 .97 Threads fairness: events ( avg/stddev ) : 2500 .0000/18.79 execution time ( avg/stddev ) : 18 .5135/0.00 coreboot v4.11.0.4 vs v4.11.0.5 Comparing those results to previous one (with coreboot v4.11.0.4 ), following differences can be noticed: average bus voltage level in idle state and during stress-test is slightly larger with coreboot v4.11.0.5 than coreboot v4.11.0.4 ; however, those differences are only about 0,01/0,02 V, which makes 0,17% measurement error. As power monitor sensor accuracy is up to 1%, obtained error is within the norm; in idle state, power consumption oscillates around 3.5W and when sysbench is running it increases to 5.3W top; it is improvement by approximately 0.5W in each state against coreboot v4.11.0.4 ; Remarks Carried out tests are definitely insufficient to draw far-reaching conclusions. There must be done more tests which involve another hardware components and operations. It is already on our roadmap and we should successively introduce more. Although it is beginning of research, we already have some remarks and leads: power monitor sensor seems to work fine, the more there are estimated differences in power consumption with different coreboot versions; before moving to optimization stage, we need to collect large enough and diverse database - so far we have carried out only one test; we should setup exact same test suite (with the same apu platform, firmware, operating system and power monitor sensor) to confirm that results are repeatable;","title":"PC Engines apu3 power consumption tests"},{"location":"research/power-consumption-tests/#pc-engines-apu3-power-consumption-tests","text":"We have started research and measurements of power consumption on apu platforms. Our goal is to optimize (if possible) power management on coreboot level. First stage of work is to collect data from various tests and create reports. For that purpose we have used RTE with power monitor sensor. RTE stands for Remote Testing Environment and it is a tool which helps debugging and testing devices. RTE gathers all necessary interfaces and ports in one device. Therefore, it is very versatile and convenient to use. More information can be found on 3mdeb official website . It is also place where you can buy it. This document gathers all already carried out tests, their results and our conclusions. Over time, we will conduct next tests and hence extend this document with further reports.","title":"PC Engines apu3 power consumption tests"},{"location":"research/power-consumption-tests/#tests","text":"","title":"Tests"},{"location":"research/power-consumption-tests/#apu3-stress-test-cpu","text":"Test case is following: Power on RTE and power on apu3. Boot to Debian 10 (buster) with kernel 4.19 on apu3. Start measurements on RTE: constantly measure bus voltage , current and input power in 0.5 seconds time intervals and save them to text file. After 10 seconds from starting measurements, invoke sysbench command on apu3. When sysbench finished, wait ~25 seconds and invoke command again. When sysbench command was invoked 10 times, finish entire test.","title":"apu3 stress-test cpu"},{"location":"research/power-consumption-tests/#results-with-coreboot-v41104","text":"Above test was performed with coreboot v4.11.0.4 which doesn't have ASPM (Active State Power Management) enabled. This feature was introduced in v4.11.0.5 release. $ sysbench cpu run --threads = 4 --events = 10000 --cpu-max-prime = 20000 --time = 0 --validate sysbench 1 .0.19 ( using bundled LuaJIT 2 .1.0-beta2 ) Running the test with following options: Number of threads: 4 Validation checks: on. Initializing random number generator from current time Prime numbers limit: 20000 Initializing worker threads... Threads started! CPU speed: events per second: 539 .76 General statistics: total time: 18 .5220s total number of events: 10000 Latency ( ms ) : min: 6 .40 avg: 7 .41 max: 8 .13 95th percentile: 7 .70 sum: 74064 .78 Threads fairness: events ( avg/stddev ) : 2500 .0000/18.61 execution time ( avg/stddev ) : 18 .5162/0.00","title":"Results with coreboot v4.11.0.4"},{"location":"research/power-consumption-tests/#conclusions","text":"In idle state, when only Debian is running without any commands and applications, power consumption oscillates around 4W. It increases to almost 6W (~5.8W) when sysbench is running. That change is mainly caused by current rise. However, simultaneously there is a little voltage drop on the bus. As you can see it drops from about 12.18 V to 12.12 V. That behavior is normal - the greater the load, the greater voltage decrease can be observed. It is rather related to quality of power supply and wires than to end device. Moreover, as this voltage drop is slight, it can be omitted in analysis.","title":"Conclusions"},{"location":"research/power-consumption-tests/#results-with-coreboot-v41105","text":"Above test was repeated with coreboot v4.11.0.5 which has ASPM (Active State Power Management) enabled. Exactly same test case was carried out and same measurements were taken. $ sysbench cpu run --threads = 4 --events = 10000 --cpu-max-prime = 20000 --time = 0 --validate sysbench 1 .0.19 ( using bundled LuaJIT 2 .1.0-beta2 ) Running the test with following options: Number of threads: 4 Validation checks: on. Initializing random number generator from current time Prime numbers limit: 20000 Initializing worker threads... Threads started! CPU speed: events per second: 539 .80 General statistics: total time: 18 .5200s total number of events: 10000 Latency ( ms ) : min: 6 .36 avg: 7 .41 max: 8 .17 95th percentile: 7 .70 sum: 74053 .97 Threads fairness: events ( avg/stddev ) : 2500 .0000/18.79 execution time ( avg/stddev ) : 18 .5135/0.00","title":"Results with coreboot v4.11.0.5"},{"location":"research/power-consumption-tests/#coreboot-v41104-vs-v41105","text":"Comparing those results to previous one (with coreboot v4.11.0.4 ), following differences can be noticed: average bus voltage level in idle state and during stress-test is slightly larger with coreboot v4.11.0.5 than coreboot v4.11.0.4 ; however, those differences are only about 0,01/0,02 V, which makes 0,17% measurement error. As power monitor sensor accuracy is up to 1%, obtained error is within the norm; in idle state, power consumption oscillates around 3.5W and when sysbench is running it increases to 5.3W top; it is improvement by approximately 0.5W in each state against coreboot v4.11.0.4 ;","title":"coreboot v4.11.0.4 vs v4.11.0.5"},{"location":"research/power-consumption-tests/#remarks","text":"Carried out tests are definitely insufficient to draw far-reaching conclusions. There must be done more tests which involve another hardware components and operations. It is already on our roadmap and we should successively introduce more. Although it is beginning of research, we already have some remarks and leads: power monitor sensor seems to work fine, the more there are estimated differences in power consumption with different coreboot versions; before moving to optimization stage, we need to collect large enough and diverse database - so far we have carried out only one test; we should setup exact same test suite (with the same apu platform, firmware, operating system and power monitor sensor) to confirm that results are repeatable;","title":"Remarks"},{"location":"research/tpm2-triage/","text":"Report of TPM2 support Conclusion Works with tpm_tis module bypassing the BIOS in TPM setup. Verified on Voyage Linux 0.10.0 and Debian jessie. Actual steps taken HW used: APU2 with TPM LPC addon Install 4.13.0-rc6 kernel - config Enable tpm2 module: modprobe tpm_tis force=1 interrupts=0 /dev/tpm0 should appear Install packages: apt -y install \\ autoconf-archive \\ libcmocka0 \\ libcmocka-dev \\ build-essential \\ git \\ pkg-config \\ gcc \\ g++ \\ m4 \\ libtool \\ automake \\ autoconf \\ libssl-dev \\ libssl1.0.0 \\ libcurl4-openssl-dev git clone https://github.com/01org/tpm2-tss.git Build tpm2-tss lib (i.e. sapi ) ./bootstrap ./configure make -j$(nproc) make install ldconfig git clone https://github.com/01org/tpm2-tools Build tpm2-tools ./bootstrap ./configure make -j$(nproc) make install Check the device: $ tpm2_dump_capability -T device -c properties-fixed TPM_PT_FAMILY_INDICATOR: as UINT32: 0x08322e3000 as string: \"2.0\" TPM_PT_LEVEL: 0 TPM_PT_REVISION: 1.16 TPM_PT_DAY_OF_YEAR: 0x000000d1 TPM_PT_YEAR: 0x000007df TPM_PT_MANUFACTURER: 0x49465800 TPM_PT_VENDOR_STRING_1: as UINT32: 0x534c4239 as string: \"SLB9\" TPM_PT_VENDOR_STRING_2: as UINT32: 0x36363500 as string: \"665\" TPM_PT_VENDOR_STRING_3: as UINT32: 0x00000000 as string: \"\" TPM_PT_VENDOR_STRING_4: as UINT32: 0x00000000 as string: \"\" TPM_PT_VENDOR_TPM_TYPE: 0x00000000 TPM_PT_FIRMWARE_VERSION_1: 0x00050033 TPM_PT_FIRMWARE_VERSION_2: 0x00083200 TPM_PT_INPUT_BUFFER: 0x00000400 TPM_PT_HR_TRANSIENT_MIN: 0x00000003 TPM_PT_HR_PERSISTENT_MIN: 0x00000007 TPM_PT_HR_LOADED_MIN: 0x00000003 TPM_PT_ACTIVE_SESSIONS_MAX: 0x00000040 TPM_PT_PCR_COUNT: 0x00000018 TPM_PT_PCR_SELECT_MIN: 0x00000003 TPM_PT_CONTEXT_GAP_MAX: 0x0000ffff TPM_PT_NV_COUNTERS_MAX: 0x00000008 TPM_PT_NV_INDEX_MAX: 0x00000680 TPM_PT_MEMORY: 0x00000006 TPM_PT_CLOCK_UPDATE: 0x00080000 TPM_PT_CONTEXT_HASH: 0x0000000b TPM_PT_CONTEXT_SYM: 0x00000006 TPM_PT_CONTEXT_SYM_SIZE: 0x00000080 TPM_PT_ORDERLY_COUNT: 0x000000ff TPM_PT_MAX_COMMAND_SIZE: 0x00000500 TPM_PT_MAX_RESPONSE_SIZE: 0x00000500 TPM_PT_MAX_DIGEST: 0x00000020 TPM_PT_MAX_OBJECT_CONTEXT: 0x00000396 TPM_PT_MAX_SESSION_CONTEXT: 0x000000eb TPM_PT_PS_FAMILY_INDICATOR: 0x00000001 TPM_PT_PS_LEVEL: 0x00000000 TPM_PT_PS_REVISION: 0x00000100 TPM_PT_PS_DAY_OF_YEAR: 0x00000000 TPM_PT_PS_YEAR: 0x00000000 TPM_PT_SPLIT_MAX: 0x00000080 TPM_PT_TOTAL_COMMANDS: 0x0000005a TPM_PT_LIBRARY_COMMANDS: 0x00000058 TPM_PT_VENDOR_COMMANDS: 0x00000002 TPM_PT_NV_BUFFER_MAX: 0x00000300 $ tpm2_getrandom -T device 10 0x84 0xCF 0xA4 0xF8 0xEC 0x43 0x11 0xA4 0x7D 0xE8","title":"Tpm2 triage"},{"location":"research/tpm2-triage/#report-of-tpm2-support","text":"","title":"Report of TPM2 support"},{"location":"research/tpm2-triage/#conclusion","text":"Works with tpm_tis module bypassing the BIOS in TPM setup. Verified on Voyage Linux 0.10.0 and Debian jessie.","title":"Conclusion"},{"location":"research/tpm2-triage/#actual-steps-taken","text":"HW used: APU2 with TPM LPC addon Install 4.13.0-rc6 kernel - config Enable tpm2 module: modprobe tpm_tis force=1 interrupts=0 /dev/tpm0 should appear Install packages: apt -y install \\ autoconf-archive \\ libcmocka0 \\ libcmocka-dev \\ build-essential \\ git \\ pkg-config \\ gcc \\ g++ \\ m4 \\ libtool \\ automake \\ autoconf \\ libssl-dev \\ libssl1.0.0 \\ libcurl4-openssl-dev git clone https://github.com/01org/tpm2-tss.git Build tpm2-tss lib (i.e. sapi ) ./bootstrap ./configure make -j$(nproc) make install ldconfig git clone https://github.com/01org/tpm2-tools Build tpm2-tools ./bootstrap ./configure make -j$(nproc) make install Check the device: $ tpm2_dump_capability -T device -c properties-fixed TPM_PT_FAMILY_INDICATOR: as UINT32: 0x08322e3000 as string: \"2.0\" TPM_PT_LEVEL: 0 TPM_PT_REVISION: 1.16 TPM_PT_DAY_OF_YEAR: 0x000000d1 TPM_PT_YEAR: 0x000007df TPM_PT_MANUFACTURER: 0x49465800 TPM_PT_VENDOR_STRING_1: as UINT32: 0x534c4239 as string: \"SLB9\" TPM_PT_VENDOR_STRING_2: as UINT32: 0x36363500 as string: \"665\" TPM_PT_VENDOR_STRING_3: as UINT32: 0x00000000 as string: \"\" TPM_PT_VENDOR_STRING_4: as UINT32: 0x00000000 as string: \"\" TPM_PT_VENDOR_TPM_TYPE: 0x00000000 TPM_PT_FIRMWARE_VERSION_1: 0x00050033 TPM_PT_FIRMWARE_VERSION_2: 0x00083200 TPM_PT_INPUT_BUFFER: 0x00000400 TPM_PT_HR_TRANSIENT_MIN: 0x00000003 TPM_PT_HR_PERSISTENT_MIN: 0x00000007 TPM_PT_HR_LOADED_MIN: 0x00000003 TPM_PT_ACTIVE_SESSIONS_MAX: 0x00000040 TPM_PT_PCR_COUNT: 0x00000018 TPM_PT_PCR_SELECT_MIN: 0x00000003 TPM_PT_CONTEXT_GAP_MAX: 0x0000ffff TPM_PT_NV_COUNTERS_MAX: 0x00000008 TPM_PT_NV_INDEX_MAX: 0x00000680 TPM_PT_MEMORY: 0x00000006 TPM_PT_CLOCK_UPDATE: 0x00080000 TPM_PT_CONTEXT_HASH: 0x0000000b TPM_PT_CONTEXT_SYM: 0x00000006 TPM_PT_CONTEXT_SYM_SIZE: 0x00000080 TPM_PT_ORDERLY_COUNT: 0x000000ff TPM_PT_MAX_COMMAND_SIZE: 0x00000500 TPM_PT_MAX_RESPONSE_SIZE: 0x00000500 TPM_PT_MAX_DIGEST: 0x00000020 TPM_PT_MAX_OBJECT_CONTEXT: 0x00000396 TPM_PT_MAX_SESSION_CONTEXT: 0x000000eb TPM_PT_PS_FAMILY_INDICATOR: 0x00000001 TPM_PT_PS_LEVEL: 0x00000000 TPM_PT_PS_REVISION: 0x00000100 TPM_PT_PS_DAY_OF_YEAR: 0x00000000 TPM_PT_PS_YEAR: 0x00000000 TPM_PT_SPLIT_MAX: 0x00000080 TPM_PT_TOTAL_COMMANDS: 0x0000005a TPM_PT_LIBRARY_COMMANDS: 0x00000058 TPM_PT_VENDOR_COMMANDS: 0x00000002 TPM_PT_NV_BUFFER_MAX: 0x00000300 $ tpm2_getrandom -T device 10 0x84 0xCF 0xA4 0xF8 0xEC 0x43 0x11 0xA4 0x7D 0xE8","title":"Actual steps taken"}]}